Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> program function
Rule 3     program -> program declaration Semi
Rule 4     program -> empty
Rule 5     type -> Int
Rule 6     function -> type Identifier LParen params RParen Semi
Rule 7     function -> type Identifier LParen params RParen LBrace block RBrace
Rule 8     params -> empty
Rule 9     params -> params param_item
Rule 10    param_item -> declaration
Rule 11    param_item -> Comma declaration
Rule 12    block -> block block_item
Rule 13    block -> empty
Rule 14    block_item -> statement
Rule 15    block_item -> declaration Semi
Rule 16    statement -> statement_matched
Rule 17    statement -> statement_unmatched
Rule 18    statement_matched -> If LParen expression RParen statement_matched Else statement_matched
Rule 19    statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched
Rule 20    statement_unmatched -> If LParen expression RParen statement
Rule 21    statement_matched -> While LParen expression RParen statement_matched
Rule 22    statement_unmatched -> While LParen expression RParen statement_unmatched
Rule 23    statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched
Rule 24    statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched
Rule 25    statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched
Rule 26    statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched
Rule 27    statement_matched -> For LParen Semi expression Semi expression RParen statement_matched
Rule 28    statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched
Rule 29    statement_matched -> For LParen expression Semi Semi expression RParen statement_matched
Rule 30    statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched
Rule 31    statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched
Rule 32    statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched
Rule 33    statement_matched -> For LParen expression Semi expression Semi RParen statement_matched
Rule 34    statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched
Rule 35    statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched
Rule 36    statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched
Rule 37    statement_matched -> For LParen expression Semi Semi RParen statement_matched
Rule 38    statement_matched -> For LParen declaration Semi Semi RParen statement_matched
Rule 39    statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched
Rule 40    statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched
Rule 41    statement_matched -> For LParen Semi expression Semi RParen statement_matched
Rule 42    statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched
Rule 43    statement_matched -> For LParen Semi Semi expression RParen statement_matched
Rule 44    statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched
Rule 45    statement_matched -> For LParen Semi Semi RParen statement_matched
Rule 46    statement_unmatched -> For LParen Semi Semi RParen statement_unmatched
Rule 47    statement_matched -> Do statement_matched While LParen expression RParen Semi
Rule 48    statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi
Rule 49    statement_matched -> Return expression Semi
Rule 50    statement_matched -> opt_expression Semi
Rule 51    statement_matched -> LBrace block RBrace
Rule 52    statement_matched -> Break Semi
Rule 53    statement_matched -> Continue Semi
Rule 54    opt_expression -> expression
Rule 55    opt_expression -> empty
Rule 56    declaration -> type Identifier
Rule 57    declaration -> type Identifier Assign expression
Rule 58    expression -> assignment
Rule 59    assignment -> conditional
Rule 60    conditional -> logical_or
Rule 61    logical_or -> logical_and
Rule 62    logical_and -> bit_or
Rule 63    bit_or -> xor
Rule 64    xor -> bit_and
Rule 65    bit_and -> equality
Rule 66    equality -> relational
Rule 67    relational -> additive
Rule 68    additive -> multiplicative
Rule 69    multiplicative -> unary
Rule 70    unary -> postfix
Rule 71    postfix -> primary
Rule 72    unary -> Minus unary
Rule 73    unary -> BitNot unary
Rule 74    unary -> Not unary
Rule 75    postfix -> Identifier LParen arguments RParen
Rule 76    arguments -> empty
Rule 77    arguments -> arguments argument_item
Rule 78    argument_item -> Comma expression
Rule 79    argument_item -> expression
Rule 80    assignment -> Identifier Assign expression
Rule 81    logical_or -> logical_or Or logical_and
Rule 82    logical_and -> logical_and And bit_or
Rule 83    bit_or -> bit_or BitOr xor
Rule 84    xor -> xor Xor bit_and
Rule 85    bit_and -> bit_and BitAnd equality
Rule 86    equality -> equality NotEqual relational
Rule 87    equality -> equality Equal relational
Rule 88    relational -> relational Less additive
Rule 89    relational -> relational Greater additive
Rule 90    relational -> relational LessEqual additive
Rule 91    relational -> relational GreaterEqual additive
Rule 92    additive -> additive Plus multiplicative
Rule 93    additive -> additive Minus multiplicative
Rule 94    multiplicative -> multiplicative Mul unary
Rule 95    multiplicative -> multiplicative Div unary
Rule 96    multiplicative -> multiplicative Mod unary
Rule 97    conditional -> logical_or Question expression Colon conditional
Rule 98    primary -> Integer
Rule 99    primary -> Identifier
Rule 100   primary -> LParen expression RParen

Terminals, with rules where they appear

And                  : 82
Assign               : 57 80
BitAnd               : 85
BitNot               : 73
BitOr                : 83
Break                : 52
Colon                : 97
Comma                : 11 78
Continue             : 53
Div                  : 95
Do                   : 47 48
Else                 : 18 19
Equal                : 87
For                  : 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
Greater              : 89
GreaterEqual         : 91
Identifier           : 6 7 56 57 75 80 99
If                   : 18 19 20
Int                  : 5
Integer              : 98
LBrace               : 7 51
LParen               : 6 7 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 75 100
Less                 : 88
LessEqual            : 90
Minus                : 72 93
Mod                  : 96
Mul                  : 94
Not                  : 74
NotEqual             : 86
Or                   : 81
Plus                 : 92
Question             : 97
RBrace               : 7 51
RParen               : 6 7 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 75 100
Return               : 49
Semi                 : 3 6 15 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 48 49 50 52 53
While                : 21 22 47 48
Xor                  : 84
error                : 

Nonterminals, with rules where they appear

additive             : 67 88 89 90 91 92 93
argument_item        : 77
arguments            : 75 77
assignment           : 58
bit_and              : 64 84 85
bit_or               : 62 82 83
block                : 7 12 51
block_item           : 12
conditional          : 59 97
declaration          : 3 10 11 15 24 26 30 32 34 36 38 40
empty                : 4 8 13 55 76
equality             : 65 85 86 87
expression           : 18 19 20 21 22 23 23 23 24 24 25 25 25 26 26 27 27 28 28 29 29 30 31 31 32 33 33 34 35 35 36 37 39 41 42 43 44 47 48 49 54 57 78 79 80 97 100
function             : 2
logical_and          : 61 81 82
logical_or           : 60 81 97
multiplicative       : 68 92 93 94 95 96
opt_expression       : 50
param_item           : 9
params               : 6 7 9
postfix              : 70
primary              : 71
program              : 2 3 0
relational           : 66 86 87 88 89 90 91
statement            : 14 20
statement_matched    : 16 18 18 19 21 23 24 27 29 30 33 34 37 38 41 43 45 47
statement_unmatched  : 17 19 22 25 26 28 31 32 35 36 39 40 42 44 46 48
type                 : 6 7 56 57
unary                : 69 72 73 74 94 95 96
xor                  : 63 83 84

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . program function
    (3) program -> . program declaration Semi
    (4) program -> . empty
    (1) empty -> .

    Int             reduce using rule 1 (empty -> .)
    $end            reduce using rule 1 (empty -> .)

    program                        shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> program .
    (2) program -> program . function
    (3) program -> program . declaration Semi
    (6) function -> . type Identifier LParen params RParen Semi
    (7) function -> . type Identifier LParen params RParen LBrace block RBrace
    (56) declaration -> . type Identifier
    (57) declaration -> . type Identifier Assign expression
    (5) type -> . Int

    Int             shift and go to state 6

    function                       shift and go to state 3
    declaration                    shift and go to state 4
    type                           shift and go to state 5

state 2

    (4) program -> empty .

    Int             reduce using rule 4 (program -> empty .)
    $end            reduce using rule 4 (program -> empty .)


state 3

    (2) program -> program function .

    Int             reduce using rule 2 (program -> program function .)
    $end            reduce using rule 2 (program -> program function .)


state 4

    (3) program -> program declaration . Semi

    Semi            shift and go to state 7


state 5

    (6) function -> type . Identifier LParen params RParen Semi
    (7) function -> type . Identifier LParen params RParen LBrace block RBrace
    (56) declaration -> type . Identifier
    (57) declaration -> type . Identifier Assign expression

    Identifier      shift and go to state 8


state 6

    (5) type -> Int .

    Identifier      reduce using rule 5 (type -> Int .)


state 7

    (3) program -> program declaration Semi .

    Int             reduce using rule 3 (program -> program declaration Semi .)
    $end            reduce using rule 3 (program -> program declaration Semi .)


state 8

    (6) function -> type Identifier . LParen params RParen Semi
    (7) function -> type Identifier . LParen params RParen LBrace block RBrace
    (56) declaration -> type Identifier .
    (57) declaration -> type Identifier . Assign expression

    LParen          shift and go to state 9
    Semi            reduce using rule 56 (declaration -> type Identifier .)
    Assign          shift and go to state 10


state 9

    (6) function -> type Identifier LParen . params RParen Semi
    (7) function -> type Identifier LParen . params RParen LBrace block RBrace
    (8) params -> . empty
    (9) params -> . params param_item
    (1) empty -> .

    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)

    params                         shift and go to state 11
    empty                          shift and go to state 12

state 10

    (57) declaration -> type Identifier Assign . expression
    (58) expression -> . assignment
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 14
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 11

    (6) function -> type Identifier LParen params . RParen Semi
    (7) function -> type Identifier LParen params . RParen LBrace block RBrace
    (9) params -> params . param_item
    (10) param_item -> . declaration
    (11) param_item -> . Comma declaration
    (56) declaration -> . type Identifier
    (57) declaration -> . type Identifier Assign expression
    (5) type -> . Int

    RParen          shift and go to state 35
    Comma           shift and go to state 38
    Int             shift and go to state 6

    type                           shift and go to state 34
    param_item                     shift and go to state 36
    declaration                    shift and go to state 37

state 12

    (8) params -> empty .

    RParen          reduce using rule 8 (params -> empty .)
    Comma           reduce using rule 8 (params -> empty .)
    Int             reduce using rule 8 (params -> empty .)


state 13

    (80) assignment -> Identifier . Assign expression
    (75) postfix -> Identifier . LParen arguments RParen
    (99) primary -> Identifier .

  ! shift/reduce conflict for LParen resolved as shift
    Assign          shift and go to state 39
    LParen          shift and go to state 40
    Mul             reduce using rule 99 (primary -> Identifier .)
    Div             reduce using rule 99 (primary -> Identifier .)
    Mod             reduce using rule 99 (primary -> Identifier .)
    Plus            reduce using rule 99 (primary -> Identifier .)
    Minus           reduce using rule 99 (primary -> Identifier .)
    Less            reduce using rule 99 (primary -> Identifier .)
    Greater         reduce using rule 99 (primary -> Identifier .)
    LessEqual       reduce using rule 99 (primary -> Identifier .)
    GreaterEqual    reduce using rule 99 (primary -> Identifier .)
    NotEqual        reduce using rule 99 (primary -> Identifier .)
    Equal           reduce using rule 99 (primary -> Identifier .)
    BitAnd          reduce using rule 99 (primary -> Identifier .)
    Xor             reduce using rule 99 (primary -> Identifier .)
    BitOr           reduce using rule 99 (primary -> Identifier .)
    And             reduce using rule 99 (primary -> Identifier .)
    Question        reduce using rule 99 (primary -> Identifier .)
    Or              reduce using rule 99 (primary -> Identifier .)
    Semi            reduce using rule 99 (primary -> Identifier .)
    RParen          reduce using rule 99 (primary -> Identifier .)
    Comma           reduce using rule 99 (primary -> Identifier .)
    Int             reduce using rule 99 (primary -> Identifier .)
    Colon           reduce using rule 99 (primary -> Identifier .)
    Identifier      reduce using rule 99 (primary -> Identifier .)
    BitNot          reduce using rule 99 (primary -> Identifier .)
    Not             reduce using rule 99 (primary -> Identifier .)
    Integer         reduce using rule 99 (primary -> Identifier .)

  ! LParen          [ reduce using rule 99 (primary -> Identifier .) ]


state 14

    (57) declaration -> type Identifier Assign expression .

    Semi            reduce using rule 57 (declaration -> type Identifier Assign expression .)
    RParen          reduce using rule 57 (declaration -> type Identifier Assign expression .)
    Comma           reduce using rule 57 (declaration -> type Identifier Assign expression .)
    Int             reduce using rule 57 (declaration -> type Identifier Assign expression .)


state 15

    (58) expression -> assignment .

    Semi            reduce using rule 58 (expression -> assignment .)
    RParen          reduce using rule 58 (expression -> assignment .)
    Comma           reduce using rule 58 (expression -> assignment .)
    Int             reduce using rule 58 (expression -> assignment .)
    Colon           reduce using rule 58 (expression -> assignment .)
    Identifier      reduce using rule 58 (expression -> assignment .)
    Minus           reduce using rule 58 (expression -> assignment .)
    BitNot          reduce using rule 58 (expression -> assignment .)
    Not             reduce using rule 58 (expression -> assignment .)
    Integer         reduce using rule 58 (expression -> assignment .)
    LParen          reduce using rule 58 (expression -> assignment .)


state 16

    (59) assignment -> conditional .

    Semi            reduce using rule 59 (assignment -> conditional .)
    RParen          reduce using rule 59 (assignment -> conditional .)
    Comma           reduce using rule 59 (assignment -> conditional .)
    Int             reduce using rule 59 (assignment -> conditional .)
    Colon           reduce using rule 59 (assignment -> conditional .)
    Identifier      reduce using rule 59 (assignment -> conditional .)
    Minus           reduce using rule 59 (assignment -> conditional .)
    BitNot          reduce using rule 59 (assignment -> conditional .)
    Not             reduce using rule 59 (assignment -> conditional .)
    Integer         reduce using rule 59 (assignment -> conditional .)
    LParen          reduce using rule 59 (assignment -> conditional .)


state 17

    (60) conditional -> logical_or .
    (97) conditional -> logical_or . Question expression Colon conditional
    (81) logical_or -> logical_or . Or logical_and

    Semi            reduce using rule 60 (conditional -> logical_or .)
    RParen          reduce using rule 60 (conditional -> logical_or .)
    Comma           reduce using rule 60 (conditional -> logical_or .)
    Int             reduce using rule 60 (conditional -> logical_or .)
    Colon           reduce using rule 60 (conditional -> logical_or .)
    Identifier      reduce using rule 60 (conditional -> logical_or .)
    Minus           reduce using rule 60 (conditional -> logical_or .)
    BitNot          reduce using rule 60 (conditional -> logical_or .)
    Not             reduce using rule 60 (conditional -> logical_or .)
    Integer         reduce using rule 60 (conditional -> logical_or .)
    LParen          reduce using rule 60 (conditional -> logical_or .)
    Question        shift and go to state 41
    Or              shift and go to state 42


state 18

    (61) logical_or -> logical_and .
    (82) logical_and -> logical_and . And bit_or

    Question        reduce using rule 61 (logical_or -> logical_and .)
    Or              reduce using rule 61 (logical_or -> logical_and .)
    Semi            reduce using rule 61 (logical_or -> logical_and .)
    RParen          reduce using rule 61 (logical_or -> logical_and .)
    Comma           reduce using rule 61 (logical_or -> logical_and .)
    Int             reduce using rule 61 (logical_or -> logical_and .)
    Colon           reduce using rule 61 (logical_or -> logical_and .)
    Identifier      reduce using rule 61 (logical_or -> logical_and .)
    Minus           reduce using rule 61 (logical_or -> logical_and .)
    BitNot          reduce using rule 61 (logical_or -> logical_and .)
    Not             reduce using rule 61 (logical_or -> logical_and .)
    Integer         reduce using rule 61 (logical_or -> logical_and .)
    LParen          reduce using rule 61 (logical_or -> logical_and .)
    And             shift and go to state 43


state 19

    (62) logical_and -> bit_or .
    (83) bit_or -> bit_or . BitOr xor

    And             reduce using rule 62 (logical_and -> bit_or .)
    Question        reduce using rule 62 (logical_and -> bit_or .)
    Or              reduce using rule 62 (logical_and -> bit_or .)
    Semi            reduce using rule 62 (logical_and -> bit_or .)
    RParen          reduce using rule 62 (logical_and -> bit_or .)
    Comma           reduce using rule 62 (logical_and -> bit_or .)
    Int             reduce using rule 62 (logical_and -> bit_or .)
    Colon           reduce using rule 62 (logical_and -> bit_or .)
    Identifier      reduce using rule 62 (logical_and -> bit_or .)
    Minus           reduce using rule 62 (logical_and -> bit_or .)
    BitNot          reduce using rule 62 (logical_and -> bit_or .)
    Not             reduce using rule 62 (logical_and -> bit_or .)
    Integer         reduce using rule 62 (logical_and -> bit_or .)
    LParen          reduce using rule 62 (logical_and -> bit_or .)
    BitOr           shift and go to state 44


state 20

    (63) bit_or -> xor .
    (84) xor -> xor . Xor bit_and

    BitOr           reduce using rule 63 (bit_or -> xor .)
    And             reduce using rule 63 (bit_or -> xor .)
    Question        reduce using rule 63 (bit_or -> xor .)
    Or              reduce using rule 63 (bit_or -> xor .)
    Semi            reduce using rule 63 (bit_or -> xor .)
    RParen          reduce using rule 63 (bit_or -> xor .)
    Comma           reduce using rule 63 (bit_or -> xor .)
    Int             reduce using rule 63 (bit_or -> xor .)
    Colon           reduce using rule 63 (bit_or -> xor .)
    Identifier      reduce using rule 63 (bit_or -> xor .)
    Minus           reduce using rule 63 (bit_or -> xor .)
    BitNot          reduce using rule 63 (bit_or -> xor .)
    Not             reduce using rule 63 (bit_or -> xor .)
    Integer         reduce using rule 63 (bit_or -> xor .)
    LParen          reduce using rule 63 (bit_or -> xor .)
    Xor             shift and go to state 45


state 21

    (64) xor -> bit_and .
    (85) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 64 (xor -> bit_and .)
    BitOr           reduce using rule 64 (xor -> bit_and .)
    And             reduce using rule 64 (xor -> bit_and .)
    Question        reduce using rule 64 (xor -> bit_and .)
    Or              reduce using rule 64 (xor -> bit_and .)
    Semi            reduce using rule 64 (xor -> bit_and .)
    RParen          reduce using rule 64 (xor -> bit_and .)
    Comma           reduce using rule 64 (xor -> bit_and .)
    Int             reduce using rule 64 (xor -> bit_and .)
    Colon           reduce using rule 64 (xor -> bit_and .)
    Identifier      reduce using rule 64 (xor -> bit_and .)
    Minus           reduce using rule 64 (xor -> bit_and .)
    BitNot          reduce using rule 64 (xor -> bit_and .)
    Not             reduce using rule 64 (xor -> bit_and .)
    Integer         reduce using rule 64 (xor -> bit_and .)
    LParen          reduce using rule 64 (xor -> bit_and .)
    BitAnd          shift and go to state 46


state 22

    (65) bit_and -> equality .
    (86) equality -> equality . NotEqual relational
    (87) equality -> equality . Equal relational

    BitAnd          reduce using rule 65 (bit_and -> equality .)
    Xor             reduce using rule 65 (bit_and -> equality .)
    BitOr           reduce using rule 65 (bit_and -> equality .)
    And             reduce using rule 65 (bit_and -> equality .)
    Question        reduce using rule 65 (bit_and -> equality .)
    Or              reduce using rule 65 (bit_and -> equality .)
    Semi            reduce using rule 65 (bit_and -> equality .)
    RParen          reduce using rule 65 (bit_and -> equality .)
    Comma           reduce using rule 65 (bit_and -> equality .)
    Int             reduce using rule 65 (bit_and -> equality .)
    Colon           reduce using rule 65 (bit_and -> equality .)
    Identifier      reduce using rule 65 (bit_and -> equality .)
    Minus           reduce using rule 65 (bit_and -> equality .)
    BitNot          reduce using rule 65 (bit_and -> equality .)
    Not             reduce using rule 65 (bit_and -> equality .)
    Integer         reduce using rule 65 (bit_and -> equality .)
    LParen          reduce using rule 65 (bit_and -> equality .)
    NotEqual        shift and go to state 47
    Equal           shift and go to state 48


state 23

    (66) equality -> relational .
    (88) relational -> relational . Less additive
    (89) relational -> relational . Greater additive
    (90) relational -> relational . LessEqual additive
    (91) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 66 (equality -> relational .)
    Equal           reduce using rule 66 (equality -> relational .)
    BitAnd          reduce using rule 66 (equality -> relational .)
    Xor             reduce using rule 66 (equality -> relational .)
    BitOr           reduce using rule 66 (equality -> relational .)
    And             reduce using rule 66 (equality -> relational .)
    Question        reduce using rule 66 (equality -> relational .)
    Or              reduce using rule 66 (equality -> relational .)
    Semi            reduce using rule 66 (equality -> relational .)
    RParen          reduce using rule 66 (equality -> relational .)
    Comma           reduce using rule 66 (equality -> relational .)
    Int             reduce using rule 66 (equality -> relational .)
    Colon           reduce using rule 66 (equality -> relational .)
    Identifier      reduce using rule 66 (equality -> relational .)
    Minus           reduce using rule 66 (equality -> relational .)
    BitNot          reduce using rule 66 (equality -> relational .)
    Not             reduce using rule 66 (equality -> relational .)
    Integer         reduce using rule 66 (equality -> relational .)
    LParen          reduce using rule 66 (equality -> relational .)
    Less            shift and go to state 49
    Greater         shift and go to state 50
    LessEqual       shift and go to state 51
    GreaterEqual    shift and go to state 52


state 24

    (67) relational -> additive .
    (92) additive -> additive . Plus multiplicative
    (93) additive -> additive . Minus multiplicative

  ! shift/reduce conflict for Minus resolved as shift
    Less            reduce using rule 67 (relational -> additive .)
    Greater         reduce using rule 67 (relational -> additive .)
    LessEqual       reduce using rule 67 (relational -> additive .)
    GreaterEqual    reduce using rule 67 (relational -> additive .)
    NotEqual        reduce using rule 67 (relational -> additive .)
    Equal           reduce using rule 67 (relational -> additive .)
    BitAnd          reduce using rule 67 (relational -> additive .)
    Xor             reduce using rule 67 (relational -> additive .)
    BitOr           reduce using rule 67 (relational -> additive .)
    And             reduce using rule 67 (relational -> additive .)
    Question        reduce using rule 67 (relational -> additive .)
    Or              reduce using rule 67 (relational -> additive .)
    Semi            reduce using rule 67 (relational -> additive .)
    RParen          reduce using rule 67 (relational -> additive .)
    Comma           reduce using rule 67 (relational -> additive .)
    Int             reduce using rule 67 (relational -> additive .)
    Colon           reduce using rule 67 (relational -> additive .)
    Identifier      reduce using rule 67 (relational -> additive .)
    BitNot          reduce using rule 67 (relational -> additive .)
    Not             reduce using rule 67 (relational -> additive .)
    Integer         reduce using rule 67 (relational -> additive .)
    LParen          reduce using rule 67 (relational -> additive .)
    Plus            shift and go to state 53
    Minus           shift and go to state 54

  ! Minus           [ reduce using rule 67 (relational -> additive .) ]


state 25

    (68) additive -> multiplicative .
    (94) multiplicative -> multiplicative . Mul unary
    (95) multiplicative -> multiplicative . Div unary
    (96) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 68 (additive -> multiplicative .)
    Minus           reduce using rule 68 (additive -> multiplicative .)
    Less            reduce using rule 68 (additive -> multiplicative .)
    Greater         reduce using rule 68 (additive -> multiplicative .)
    LessEqual       reduce using rule 68 (additive -> multiplicative .)
    GreaterEqual    reduce using rule 68 (additive -> multiplicative .)
    NotEqual        reduce using rule 68 (additive -> multiplicative .)
    Equal           reduce using rule 68 (additive -> multiplicative .)
    BitAnd          reduce using rule 68 (additive -> multiplicative .)
    Xor             reduce using rule 68 (additive -> multiplicative .)
    BitOr           reduce using rule 68 (additive -> multiplicative .)
    And             reduce using rule 68 (additive -> multiplicative .)
    Question        reduce using rule 68 (additive -> multiplicative .)
    Or              reduce using rule 68 (additive -> multiplicative .)
    Semi            reduce using rule 68 (additive -> multiplicative .)
    RParen          reduce using rule 68 (additive -> multiplicative .)
    Comma           reduce using rule 68 (additive -> multiplicative .)
    Int             reduce using rule 68 (additive -> multiplicative .)
    Colon           reduce using rule 68 (additive -> multiplicative .)
    Identifier      reduce using rule 68 (additive -> multiplicative .)
    BitNot          reduce using rule 68 (additive -> multiplicative .)
    Not             reduce using rule 68 (additive -> multiplicative .)
    Integer         reduce using rule 68 (additive -> multiplicative .)
    LParen          reduce using rule 68 (additive -> multiplicative .)
    Mul             shift and go to state 55
    Div             shift and go to state 56
    Mod             shift and go to state 57


state 26

    (72) unary -> Minus . unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 59
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    unary                          shift and go to state 58
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 27

    (69) multiplicative -> unary .

    Mul             reduce using rule 69 (multiplicative -> unary .)
    Div             reduce using rule 69 (multiplicative -> unary .)
    Mod             reduce using rule 69 (multiplicative -> unary .)
    Plus            reduce using rule 69 (multiplicative -> unary .)
    Minus           reduce using rule 69 (multiplicative -> unary .)
    Less            reduce using rule 69 (multiplicative -> unary .)
    Greater         reduce using rule 69 (multiplicative -> unary .)
    LessEqual       reduce using rule 69 (multiplicative -> unary .)
    GreaterEqual    reduce using rule 69 (multiplicative -> unary .)
    NotEqual        reduce using rule 69 (multiplicative -> unary .)
    Equal           reduce using rule 69 (multiplicative -> unary .)
    BitAnd          reduce using rule 69 (multiplicative -> unary .)
    Xor             reduce using rule 69 (multiplicative -> unary .)
    BitOr           reduce using rule 69 (multiplicative -> unary .)
    And             reduce using rule 69 (multiplicative -> unary .)
    Question        reduce using rule 69 (multiplicative -> unary .)
    Or              reduce using rule 69 (multiplicative -> unary .)
    Semi            reduce using rule 69 (multiplicative -> unary .)
    RParen          reduce using rule 69 (multiplicative -> unary .)
    Comma           reduce using rule 69 (multiplicative -> unary .)
    Int             reduce using rule 69 (multiplicative -> unary .)
    Colon           reduce using rule 69 (multiplicative -> unary .)
    Identifier      reduce using rule 69 (multiplicative -> unary .)
    BitNot          reduce using rule 69 (multiplicative -> unary .)
    Not             reduce using rule 69 (multiplicative -> unary .)
    Integer         reduce using rule 69 (multiplicative -> unary .)
    LParen          reduce using rule 69 (multiplicative -> unary .)


state 28

    (70) unary -> postfix .

    Mul             reduce using rule 70 (unary -> postfix .)
    Div             reduce using rule 70 (unary -> postfix .)
    Mod             reduce using rule 70 (unary -> postfix .)
    Plus            reduce using rule 70 (unary -> postfix .)
    Minus           reduce using rule 70 (unary -> postfix .)
    Less            reduce using rule 70 (unary -> postfix .)
    Greater         reduce using rule 70 (unary -> postfix .)
    LessEqual       reduce using rule 70 (unary -> postfix .)
    GreaterEqual    reduce using rule 70 (unary -> postfix .)
    NotEqual        reduce using rule 70 (unary -> postfix .)
    Equal           reduce using rule 70 (unary -> postfix .)
    BitAnd          reduce using rule 70 (unary -> postfix .)
    Xor             reduce using rule 70 (unary -> postfix .)
    BitOr           reduce using rule 70 (unary -> postfix .)
    And             reduce using rule 70 (unary -> postfix .)
    Question        reduce using rule 70 (unary -> postfix .)
    Or              reduce using rule 70 (unary -> postfix .)
    Semi            reduce using rule 70 (unary -> postfix .)
    RParen          reduce using rule 70 (unary -> postfix .)
    Comma           reduce using rule 70 (unary -> postfix .)
    Int             reduce using rule 70 (unary -> postfix .)
    Colon           reduce using rule 70 (unary -> postfix .)
    Identifier      reduce using rule 70 (unary -> postfix .)
    BitNot          reduce using rule 70 (unary -> postfix .)
    Not             reduce using rule 70 (unary -> postfix .)
    Integer         reduce using rule 70 (unary -> postfix .)
    LParen          reduce using rule 70 (unary -> postfix .)


state 29

    (73) unary -> BitNot . unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 59
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    unary                          shift and go to state 60
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 30

    (74) unary -> Not . unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 59
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    unary                          shift and go to state 61
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 31

    (71) postfix -> primary .

    Mul             reduce using rule 71 (postfix -> primary .)
    Div             reduce using rule 71 (postfix -> primary .)
    Mod             reduce using rule 71 (postfix -> primary .)
    Plus            reduce using rule 71 (postfix -> primary .)
    Minus           reduce using rule 71 (postfix -> primary .)
    Less            reduce using rule 71 (postfix -> primary .)
    Greater         reduce using rule 71 (postfix -> primary .)
    LessEqual       reduce using rule 71 (postfix -> primary .)
    GreaterEqual    reduce using rule 71 (postfix -> primary .)
    NotEqual        reduce using rule 71 (postfix -> primary .)
    Equal           reduce using rule 71 (postfix -> primary .)
    BitAnd          reduce using rule 71 (postfix -> primary .)
    Xor             reduce using rule 71 (postfix -> primary .)
    BitOr           reduce using rule 71 (postfix -> primary .)
    And             reduce using rule 71 (postfix -> primary .)
    Question        reduce using rule 71 (postfix -> primary .)
    Or              reduce using rule 71 (postfix -> primary .)
    Semi            reduce using rule 71 (postfix -> primary .)
    RParen          reduce using rule 71 (postfix -> primary .)
    Comma           reduce using rule 71 (postfix -> primary .)
    Int             reduce using rule 71 (postfix -> primary .)
    Colon           reduce using rule 71 (postfix -> primary .)
    Identifier      reduce using rule 71 (postfix -> primary .)
    BitNot          reduce using rule 71 (postfix -> primary .)
    Not             reduce using rule 71 (postfix -> primary .)
    Integer         reduce using rule 71 (postfix -> primary .)
    LParen          reduce using rule 71 (postfix -> primary .)


state 32

    (100) primary -> LParen . expression RParen
    (58) expression -> . assignment
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 62
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 33

    (98) primary -> Integer .

    Mul             reduce using rule 98 (primary -> Integer .)
    Div             reduce using rule 98 (primary -> Integer .)
    Mod             reduce using rule 98 (primary -> Integer .)
    Plus            reduce using rule 98 (primary -> Integer .)
    Minus           reduce using rule 98 (primary -> Integer .)
    Less            reduce using rule 98 (primary -> Integer .)
    Greater         reduce using rule 98 (primary -> Integer .)
    LessEqual       reduce using rule 98 (primary -> Integer .)
    GreaterEqual    reduce using rule 98 (primary -> Integer .)
    NotEqual        reduce using rule 98 (primary -> Integer .)
    Equal           reduce using rule 98 (primary -> Integer .)
    BitAnd          reduce using rule 98 (primary -> Integer .)
    Xor             reduce using rule 98 (primary -> Integer .)
    BitOr           reduce using rule 98 (primary -> Integer .)
    And             reduce using rule 98 (primary -> Integer .)
    Question        reduce using rule 98 (primary -> Integer .)
    Or              reduce using rule 98 (primary -> Integer .)
    Semi            reduce using rule 98 (primary -> Integer .)
    RParen          reduce using rule 98 (primary -> Integer .)
    Comma           reduce using rule 98 (primary -> Integer .)
    Int             reduce using rule 98 (primary -> Integer .)
    Colon           reduce using rule 98 (primary -> Integer .)
    Identifier      reduce using rule 98 (primary -> Integer .)
    BitNot          reduce using rule 98 (primary -> Integer .)
    Not             reduce using rule 98 (primary -> Integer .)
    Integer         reduce using rule 98 (primary -> Integer .)
    LParen          reduce using rule 98 (primary -> Integer .)


state 34

    (56) declaration -> type . Identifier
    (57) declaration -> type . Identifier Assign expression

    Identifier      shift and go to state 63


state 35

    (6) function -> type Identifier LParen params RParen . Semi
    (7) function -> type Identifier LParen params RParen . LBrace block RBrace

    Semi            shift and go to state 64
    LBrace          shift and go to state 65


state 36

    (9) params -> params param_item .

    RParen          reduce using rule 9 (params -> params param_item .)
    Comma           reduce using rule 9 (params -> params param_item .)
    Int             reduce using rule 9 (params -> params param_item .)


state 37

    (10) param_item -> declaration .

    RParen          reduce using rule 10 (param_item -> declaration .)
    Comma           reduce using rule 10 (param_item -> declaration .)
    Int             reduce using rule 10 (param_item -> declaration .)


state 38

    (11) param_item -> Comma . declaration
    (56) declaration -> . type Identifier
    (57) declaration -> . type Identifier Assign expression
    (5) type -> . Int

    Int             shift and go to state 6

    declaration                    shift and go to state 66
    type                           shift and go to state 34

state 39

    (80) assignment -> Identifier Assign . expression
    (58) expression -> . assignment
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 67
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 40

    (75) postfix -> Identifier LParen . arguments RParen
    (76) arguments -> . empty
    (77) arguments -> . arguments argument_item
    (1) empty -> .

    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)

    arguments                      shift and go to state 68
    empty                          shift and go to state 69

state 41

    (97) conditional -> logical_or Question . expression Colon conditional
    (58) expression -> . assignment
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    logical_or                     shift and go to state 17
    expression                     shift and go to state 70
    conditional                    shift and go to state 16
    assignment                     shift and go to state 15
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 42

    (81) logical_or -> logical_or Or . logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 59
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    logical_and                    shift and go to state 71
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 43

    (82) logical_and -> logical_and And . bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 59
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    bit_or                         shift and go to state 72
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 44

    (83) bit_or -> bit_or BitOr . xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 59
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    xor                            shift and go to state 73
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 45

    (84) xor -> xor Xor . bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 59
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    bit_and                        shift and go to state 74
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 46

    (85) bit_and -> bit_and BitAnd . equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 59
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    equality                       shift and go to state 75
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 47

    (86) equality -> equality NotEqual . relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 59
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    relational                     shift and go to state 76
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 48

    (87) equality -> equality Equal . relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 59
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    relational                     shift and go to state 77
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 49

    (88) relational -> relational Less . additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 59
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    additive                       shift and go to state 78
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 50

    (89) relational -> relational Greater . additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 59
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    additive                       shift and go to state 79
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 51

    (90) relational -> relational LessEqual . additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 59
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    additive                       shift and go to state 80
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 52

    (91) relational -> relational GreaterEqual . additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 59
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    additive                       shift and go to state 81
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 53

    (92) additive -> additive Plus . multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 59
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    multiplicative                 shift and go to state 82
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 54

    (93) additive -> additive Minus . multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 59
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    multiplicative                 shift and go to state 83
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 55

    (94) multiplicative -> multiplicative Mul . unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 59
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    unary                          shift and go to state 84
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 56

    (95) multiplicative -> multiplicative Div . unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 59
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    unary                          shift and go to state 85
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 57

    (96) multiplicative -> multiplicative Mod . unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 59
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    unary                          shift and go to state 86
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 58

    (72) unary -> Minus unary .

    Mul             reduce using rule 72 (unary -> Minus unary .)
    Div             reduce using rule 72 (unary -> Minus unary .)
    Mod             reduce using rule 72 (unary -> Minus unary .)
    Plus            reduce using rule 72 (unary -> Minus unary .)
    Minus           reduce using rule 72 (unary -> Minus unary .)
    Less            reduce using rule 72 (unary -> Minus unary .)
    Greater         reduce using rule 72 (unary -> Minus unary .)
    LessEqual       reduce using rule 72 (unary -> Minus unary .)
    GreaterEqual    reduce using rule 72 (unary -> Minus unary .)
    NotEqual        reduce using rule 72 (unary -> Minus unary .)
    Equal           reduce using rule 72 (unary -> Minus unary .)
    BitAnd          reduce using rule 72 (unary -> Minus unary .)
    Xor             reduce using rule 72 (unary -> Minus unary .)
    BitOr           reduce using rule 72 (unary -> Minus unary .)
    And             reduce using rule 72 (unary -> Minus unary .)
    Question        reduce using rule 72 (unary -> Minus unary .)
    Or              reduce using rule 72 (unary -> Minus unary .)
    Semi            reduce using rule 72 (unary -> Minus unary .)
    RParen          reduce using rule 72 (unary -> Minus unary .)
    Comma           reduce using rule 72 (unary -> Minus unary .)
    Int             reduce using rule 72 (unary -> Minus unary .)
    Colon           reduce using rule 72 (unary -> Minus unary .)
    Identifier      reduce using rule 72 (unary -> Minus unary .)
    BitNot          reduce using rule 72 (unary -> Minus unary .)
    Not             reduce using rule 72 (unary -> Minus unary .)
    Integer         reduce using rule 72 (unary -> Minus unary .)
    LParen          reduce using rule 72 (unary -> Minus unary .)


state 59

    (75) postfix -> Identifier . LParen arguments RParen
    (99) primary -> Identifier .

  ! shift/reduce conflict for LParen resolved as shift
    LParen          shift and go to state 40
    Mul             reduce using rule 99 (primary -> Identifier .)
    Div             reduce using rule 99 (primary -> Identifier .)
    Mod             reduce using rule 99 (primary -> Identifier .)
    Plus            reduce using rule 99 (primary -> Identifier .)
    Minus           reduce using rule 99 (primary -> Identifier .)
    Less            reduce using rule 99 (primary -> Identifier .)
    Greater         reduce using rule 99 (primary -> Identifier .)
    LessEqual       reduce using rule 99 (primary -> Identifier .)
    GreaterEqual    reduce using rule 99 (primary -> Identifier .)
    NotEqual        reduce using rule 99 (primary -> Identifier .)
    Equal           reduce using rule 99 (primary -> Identifier .)
    BitAnd          reduce using rule 99 (primary -> Identifier .)
    Xor             reduce using rule 99 (primary -> Identifier .)
    BitOr           reduce using rule 99 (primary -> Identifier .)
    And             reduce using rule 99 (primary -> Identifier .)
    Question        reduce using rule 99 (primary -> Identifier .)
    Or              reduce using rule 99 (primary -> Identifier .)
    Semi            reduce using rule 99 (primary -> Identifier .)
    RParen          reduce using rule 99 (primary -> Identifier .)
    Comma           reduce using rule 99 (primary -> Identifier .)
    Int             reduce using rule 99 (primary -> Identifier .)
    Colon           reduce using rule 99 (primary -> Identifier .)
    Identifier      reduce using rule 99 (primary -> Identifier .)
    BitNot          reduce using rule 99 (primary -> Identifier .)
    Not             reduce using rule 99 (primary -> Identifier .)
    Integer         reduce using rule 99 (primary -> Identifier .)

  ! LParen          [ reduce using rule 99 (primary -> Identifier .) ]


state 60

    (73) unary -> BitNot unary .

    Mul             reduce using rule 73 (unary -> BitNot unary .)
    Div             reduce using rule 73 (unary -> BitNot unary .)
    Mod             reduce using rule 73 (unary -> BitNot unary .)
    Plus            reduce using rule 73 (unary -> BitNot unary .)
    Minus           reduce using rule 73 (unary -> BitNot unary .)
    Less            reduce using rule 73 (unary -> BitNot unary .)
    Greater         reduce using rule 73 (unary -> BitNot unary .)
    LessEqual       reduce using rule 73 (unary -> BitNot unary .)
    GreaterEqual    reduce using rule 73 (unary -> BitNot unary .)
    NotEqual        reduce using rule 73 (unary -> BitNot unary .)
    Equal           reduce using rule 73 (unary -> BitNot unary .)
    BitAnd          reduce using rule 73 (unary -> BitNot unary .)
    Xor             reduce using rule 73 (unary -> BitNot unary .)
    BitOr           reduce using rule 73 (unary -> BitNot unary .)
    And             reduce using rule 73 (unary -> BitNot unary .)
    Question        reduce using rule 73 (unary -> BitNot unary .)
    Or              reduce using rule 73 (unary -> BitNot unary .)
    Semi            reduce using rule 73 (unary -> BitNot unary .)
    RParen          reduce using rule 73 (unary -> BitNot unary .)
    Comma           reduce using rule 73 (unary -> BitNot unary .)
    Int             reduce using rule 73 (unary -> BitNot unary .)
    Colon           reduce using rule 73 (unary -> BitNot unary .)
    Identifier      reduce using rule 73 (unary -> BitNot unary .)
    BitNot          reduce using rule 73 (unary -> BitNot unary .)
    Not             reduce using rule 73 (unary -> BitNot unary .)
    Integer         reduce using rule 73 (unary -> BitNot unary .)
    LParen          reduce using rule 73 (unary -> BitNot unary .)


state 61

    (74) unary -> Not unary .

    Mul             reduce using rule 74 (unary -> Not unary .)
    Div             reduce using rule 74 (unary -> Not unary .)
    Mod             reduce using rule 74 (unary -> Not unary .)
    Plus            reduce using rule 74 (unary -> Not unary .)
    Minus           reduce using rule 74 (unary -> Not unary .)
    Less            reduce using rule 74 (unary -> Not unary .)
    Greater         reduce using rule 74 (unary -> Not unary .)
    LessEqual       reduce using rule 74 (unary -> Not unary .)
    GreaterEqual    reduce using rule 74 (unary -> Not unary .)
    NotEqual        reduce using rule 74 (unary -> Not unary .)
    Equal           reduce using rule 74 (unary -> Not unary .)
    BitAnd          reduce using rule 74 (unary -> Not unary .)
    Xor             reduce using rule 74 (unary -> Not unary .)
    BitOr           reduce using rule 74 (unary -> Not unary .)
    And             reduce using rule 74 (unary -> Not unary .)
    Question        reduce using rule 74 (unary -> Not unary .)
    Or              reduce using rule 74 (unary -> Not unary .)
    Semi            reduce using rule 74 (unary -> Not unary .)
    RParen          reduce using rule 74 (unary -> Not unary .)
    Comma           reduce using rule 74 (unary -> Not unary .)
    Int             reduce using rule 74 (unary -> Not unary .)
    Colon           reduce using rule 74 (unary -> Not unary .)
    Identifier      reduce using rule 74 (unary -> Not unary .)
    BitNot          reduce using rule 74 (unary -> Not unary .)
    Not             reduce using rule 74 (unary -> Not unary .)
    Integer         reduce using rule 74 (unary -> Not unary .)
    LParen          reduce using rule 74 (unary -> Not unary .)


state 62

    (100) primary -> LParen expression . RParen

    RParen          shift and go to state 87


state 63

    (56) declaration -> type Identifier .
    (57) declaration -> type Identifier . Assign expression

    RParen          reduce using rule 56 (declaration -> type Identifier .)
    Comma           reduce using rule 56 (declaration -> type Identifier .)
    Int             reduce using rule 56 (declaration -> type Identifier .)
    Semi            reduce using rule 56 (declaration -> type Identifier .)
    Assign          shift and go to state 10


state 64

    (6) function -> type Identifier LParen params RParen Semi .

    Int             reduce using rule 6 (function -> type Identifier LParen params RParen Semi .)
    $end            reduce using rule 6 (function -> type Identifier LParen params RParen Semi .)


state 65

    (7) function -> type Identifier LParen params RParen LBrace . block RBrace
    (12) block -> . block block_item
    (13) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 88
    empty                          shift and go to state 89

state 66

    (11) param_item -> Comma declaration .

    RParen          reduce using rule 11 (param_item -> Comma declaration .)
    Comma           reduce using rule 11 (param_item -> Comma declaration .)
    Int             reduce using rule 11 (param_item -> Comma declaration .)


state 67

    (80) assignment -> Identifier Assign expression .

    Semi            reduce using rule 80 (assignment -> Identifier Assign expression .)
    RParen          reduce using rule 80 (assignment -> Identifier Assign expression .)
    Comma           reduce using rule 80 (assignment -> Identifier Assign expression .)
    Int             reduce using rule 80 (assignment -> Identifier Assign expression .)
    Colon           reduce using rule 80 (assignment -> Identifier Assign expression .)
    Identifier      reduce using rule 80 (assignment -> Identifier Assign expression .)
    Minus           reduce using rule 80 (assignment -> Identifier Assign expression .)
    BitNot          reduce using rule 80 (assignment -> Identifier Assign expression .)
    Not             reduce using rule 80 (assignment -> Identifier Assign expression .)
    Integer         reduce using rule 80 (assignment -> Identifier Assign expression .)
    LParen          reduce using rule 80 (assignment -> Identifier Assign expression .)


state 68

    (75) postfix -> Identifier LParen arguments . RParen
    (77) arguments -> arguments . argument_item
    (78) argument_item -> . Comma expression
    (79) argument_item -> . expression
    (58) expression -> . assignment
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    RParen          shift and go to state 90
    Comma           shift and go to state 92
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    argument_item                  shift and go to state 91
    expression                     shift and go to state 93
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 69

    (76) arguments -> empty .

    RParen          reduce using rule 76 (arguments -> empty .)
    Comma           reduce using rule 76 (arguments -> empty .)
    Identifier      reduce using rule 76 (arguments -> empty .)
    Minus           reduce using rule 76 (arguments -> empty .)
    BitNot          reduce using rule 76 (arguments -> empty .)
    Not             reduce using rule 76 (arguments -> empty .)
    Integer         reduce using rule 76 (arguments -> empty .)
    LParen          reduce using rule 76 (arguments -> empty .)


state 70

    (97) conditional -> logical_or Question expression . Colon conditional

    Colon           shift and go to state 94


state 71

    (81) logical_or -> logical_or Or logical_and .
    (82) logical_and -> logical_and . And bit_or

    Question        reduce using rule 81 (logical_or -> logical_or Or logical_and .)
    Or              reduce using rule 81 (logical_or -> logical_or Or logical_and .)
    Semi            reduce using rule 81 (logical_or -> logical_or Or logical_and .)
    RParen          reduce using rule 81 (logical_or -> logical_or Or logical_and .)
    Comma           reduce using rule 81 (logical_or -> logical_or Or logical_and .)
    Int             reduce using rule 81 (logical_or -> logical_or Or logical_and .)
    Colon           reduce using rule 81 (logical_or -> logical_or Or logical_and .)
    Identifier      reduce using rule 81 (logical_or -> logical_or Or logical_and .)
    Minus           reduce using rule 81 (logical_or -> logical_or Or logical_and .)
    BitNot          reduce using rule 81 (logical_or -> logical_or Or logical_and .)
    Not             reduce using rule 81 (logical_or -> logical_or Or logical_and .)
    Integer         reduce using rule 81 (logical_or -> logical_or Or logical_and .)
    LParen          reduce using rule 81 (logical_or -> logical_or Or logical_and .)
    And             shift and go to state 43


state 72

    (82) logical_and -> logical_and And bit_or .
    (83) bit_or -> bit_or . BitOr xor

    And             reduce using rule 82 (logical_and -> logical_and And bit_or .)
    Question        reduce using rule 82 (logical_and -> logical_and And bit_or .)
    Or              reduce using rule 82 (logical_and -> logical_and And bit_or .)
    Semi            reduce using rule 82 (logical_and -> logical_and And bit_or .)
    RParen          reduce using rule 82 (logical_and -> logical_and And bit_or .)
    Comma           reduce using rule 82 (logical_and -> logical_and And bit_or .)
    Int             reduce using rule 82 (logical_and -> logical_and And bit_or .)
    Colon           reduce using rule 82 (logical_and -> logical_and And bit_or .)
    Identifier      reduce using rule 82 (logical_and -> logical_and And bit_or .)
    Minus           reduce using rule 82 (logical_and -> logical_and And bit_or .)
    BitNot          reduce using rule 82 (logical_and -> logical_and And bit_or .)
    Not             reduce using rule 82 (logical_and -> logical_and And bit_or .)
    Integer         reduce using rule 82 (logical_and -> logical_and And bit_or .)
    LParen          reduce using rule 82 (logical_and -> logical_and And bit_or .)
    BitOr           shift and go to state 44


state 73

    (83) bit_or -> bit_or BitOr xor .
    (84) xor -> xor . Xor bit_and

    BitOr           reduce using rule 83 (bit_or -> bit_or BitOr xor .)
    And             reduce using rule 83 (bit_or -> bit_or BitOr xor .)
    Question        reduce using rule 83 (bit_or -> bit_or BitOr xor .)
    Or              reduce using rule 83 (bit_or -> bit_or BitOr xor .)
    Semi            reduce using rule 83 (bit_or -> bit_or BitOr xor .)
    RParen          reduce using rule 83 (bit_or -> bit_or BitOr xor .)
    Comma           reduce using rule 83 (bit_or -> bit_or BitOr xor .)
    Int             reduce using rule 83 (bit_or -> bit_or BitOr xor .)
    Colon           reduce using rule 83 (bit_or -> bit_or BitOr xor .)
    Identifier      reduce using rule 83 (bit_or -> bit_or BitOr xor .)
    Minus           reduce using rule 83 (bit_or -> bit_or BitOr xor .)
    BitNot          reduce using rule 83 (bit_or -> bit_or BitOr xor .)
    Not             reduce using rule 83 (bit_or -> bit_or BitOr xor .)
    Integer         reduce using rule 83 (bit_or -> bit_or BitOr xor .)
    LParen          reduce using rule 83 (bit_or -> bit_or BitOr xor .)
    Xor             shift and go to state 45


state 74

    (84) xor -> xor Xor bit_and .
    (85) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 84 (xor -> xor Xor bit_and .)
    BitOr           reduce using rule 84 (xor -> xor Xor bit_and .)
    And             reduce using rule 84 (xor -> xor Xor bit_and .)
    Question        reduce using rule 84 (xor -> xor Xor bit_and .)
    Or              reduce using rule 84 (xor -> xor Xor bit_and .)
    Semi            reduce using rule 84 (xor -> xor Xor bit_and .)
    RParen          reduce using rule 84 (xor -> xor Xor bit_and .)
    Comma           reduce using rule 84 (xor -> xor Xor bit_and .)
    Int             reduce using rule 84 (xor -> xor Xor bit_and .)
    Colon           reduce using rule 84 (xor -> xor Xor bit_and .)
    Identifier      reduce using rule 84 (xor -> xor Xor bit_and .)
    Minus           reduce using rule 84 (xor -> xor Xor bit_and .)
    BitNot          reduce using rule 84 (xor -> xor Xor bit_and .)
    Not             reduce using rule 84 (xor -> xor Xor bit_and .)
    Integer         reduce using rule 84 (xor -> xor Xor bit_and .)
    LParen          reduce using rule 84 (xor -> xor Xor bit_and .)
    BitAnd          shift and go to state 46


state 75

    (85) bit_and -> bit_and BitAnd equality .
    (86) equality -> equality . NotEqual relational
    (87) equality -> equality . Equal relational

    BitAnd          reduce using rule 85 (bit_and -> bit_and BitAnd equality .)
    Xor             reduce using rule 85 (bit_and -> bit_and BitAnd equality .)
    BitOr           reduce using rule 85 (bit_and -> bit_and BitAnd equality .)
    And             reduce using rule 85 (bit_and -> bit_and BitAnd equality .)
    Question        reduce using rule 85 (bit_and -> bit_and BitAnd equality .)
    Or              reduce using rule 85 (bit_and -> bit_and BitAnd equality .)
    Semi            reduce using rule 85 (bit_and -> bit_and BitAnd equality .)
    RParen          reduce using rule 85 (bit_and -> bit_and BitAnd equality .)
    Comma           reduce using rule 85 (bit_and -> bit_and BitAnd equality .)
    Int             reduce using rule 85 (bit_and -> bit_and BitAnd equality .)
    Colon           reduce using rule 85 (bit_and -> bit_and BitAnd equality .)
    Identifier      reduce using rule 85 (bit_and -> bit_and BitAnd equality .)
    Minus           reduce using rule 85 (bit_and -> bit_and BitAnd equality .)
    BitNot          reduce using rule 85 (bit_and -> bit_and BitAnd equality .)
    Not             reduce using rule 85 (bit_and -> bit_and BitAnd equality .)
    Integer         reduce using rule 85 (bit_and -> bit_and BitAnd equality .)
    LParen          reduce using rule 85 (bit_and -> bit_and BitAnd equality .)
    NotEqual        shift and go to state 47
    Equal           shift and go to state 48


state 76

    (86) equality -> equality NotEqual relational .
    (88) relational -> relational . Less additive
    (89) relational -> relational . Greater additive
    (90) relational -> relational . LessEqual additive
    (91) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 86 (equality -> equality NotEqual relational .)
    Equal           reduce using rule 86 (equality -> equality NotEqual relational .)
    BitAnd          reduce using rule 86 (equality -> equality NotEqual relational .)
    Xor             reduce using rule 86 (equality -> equality NotEqual relational .)
    BitOr           reduce using rule 86 (equality -> equality NotEqual relational .)
    And             reduce using rule 86 (equality -> equality NotEqual relational .)
    Question        reduce using rule 86 (equality -> equality NotEqual relational .)
    Or              reduce using rule 86 (equality -> equality NotEqual relational .)
    Semi            reduce using rule 86 (equality -> equality NotEqual relational .)
    RParen          reduce using rule 86 (equality -> equality NotEqual relational .)
    Comma           reduce using rule 86 (equality -> equality NotEqual relational .)
    Int             reduce using rule 86 (equality -> equality NotEqual relational .)
    Colon           reduce using rule 86 (equality -> equality NotEqual relational .)
    Identifier      reduce using rule 86 (equality -> equality NotEqual relational .)
    Minus           reduce using rule 86 (equality -> equality NotEqual relational .)
    BitNot          reduce using rule 86 (equality -> equality NotEqual relational .)
    Not             reduce using rule 86 (equality -> equality NotEqual relational .)
    Integer         reduce using rule 86 (equality -> equality NotEqual relational .)
    LParen          reduce using rule 86 (equality -> equality NotEqual relational .)
    Less            shift and go to state 49
    Greater         shift and go to state 50
    LessEqual       shift and go to state 51
    GreaterEqual    shift and go to state 52


state 77

    (87) equality -> equality Equal relational .
    (88) relational -> relational . Less additive
    (89) relational -> relational . Greater additive
    (90) relational -> relational . LessEqual additive
    (91) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 87 (equality -> equality Equal relational .)
    Equal           reduce using rule 87 (equality -> equality Equal relational .)
    BitAnd          reduce using rule 87 (equality -> equality Equal relational .)
    Xor             reduce using rule 87 (equality -> equality Equal relational .)
    BitOr           reduce using rule 87 (equality -> equality Equal relational .)
    And             reduce using rule 87 (equality -> equality Equal relational .)
    Question        reduce using rule 87 (equality -> equality Equal relational .)
    Or              reduce using rule 87 (equality -> equality Equal relational .)
    Semi            reduce using rule 87 (equality -> equality Equal relational .)
    RParen          reduce using rule 87 (equality -> equality Equal relational .)
    Comma           reduce using rule 87 (equality -> equality Equal relational .)
    Int             reduce using rule 87 (equality -> equality Equal relational .)
    Colon           reduce using rule 87 (equality -> equality Equal relational .)
    Identifier      reduce using rule 87 (equality -> equality Equal relational .)
    Minus           reduce using rule 87 (equality -> equality Equal relational .)
    BitNot          reduce using rule 87 (equality -> equality Equal relational .)
    Not             reduce using rule 87 (equality -> equality Equal relational .)
    Integer         reduce using rule 87 (equality -> equality Equal relational .)
    LParen          reduce using rule 87 (equality -> equality Equal relational .)
    Less            shift and go to state 49
    Greater         shift and go to state 50
    LessEqual       shift and go to state 51
    GreaterEqual    shift and go to state 52


state 78

    (88) relational -> relational Less additive .
    (92) additive -> additive . Plus multiplicative
    (93) additive -> additive . Minus multiplicative

  ! shift/reduce conflict for Minus resolved as shift
    Less            reduce using rule 88 (relational -> relational Less additive .)
    Greater         reduce using rule 88 (relational -> relational Less additive .)
    LessEqual       reduce using rule 88 (relational -> relational Less additive .)
    GreaterEqual    reduce using rule 88 (relational -> relational Less additive .)
    NotEqual        reduce using rule 88 (relational -> relational Less additive .)
    Equal           reduce using rule 88 (relational -> relational Less additive .)
    BitAnd          reduce using rule 88 (relational -> relational Less additive .)
    Xor             reduce using rule 88 (relational -> relational Less additive .)
    BitOr           reduce using rule 88 (relational -> relational Less additive .)
    And             reduce using rule 88 (relational -> relational Less additive .)
    Question        reduce using rule 88 (relational -> relational Less additive .)
    Or              reduce using rule 88 (relational -> relational Less additive .)
    Semi            reduce using rule 88 (relational -> relational Less additive .)
    RParen          reduce using rule 88 (relational -> relational Less additive .)
    Comma           reduce using rule 88 (relational -> relational Less additive .)
    Int             reduce using rule 88 (relational -> relational Less additive .)
    Colon           reduce using rule 88 (relational -> relational Less additive .)
    Identifier      reduce using rule 88 (relational -> relational Less additive .)
    BitNot          reduce using rule 88 (relational -> relational Less additive .)
    Not             reduce using rule 88 (relational -> relational Less additive .)
    Integer         reduce using rule 88 (relational -> relational Less additive .)
    LParen          reduce using rule 88 (relational -> relational Less additive .)
    Plus            shift and go to state 53
    Minus           shift and go to state 54

  ! Minus           [ reduce using rule 88 (relational -> relational Less additive .) ]


state 79

    (89) relational -> relational Greater additive .
    (92) additive -> additive . Plus multiplicative
    (93) additive -> additive . Minus multiplicative

  ! shift/reduce conflict for Minus resolved as shift
    Less            reduce using rule 89 (relational -> relational Greater additive .)
    Greater         reduce using rule 89 (relational -> relational Greater additive .)
    LessEqual       reduce using rule 89 (relational -> relational Greater additive .)
    GreaterEqual    reduce using rule 89 (relational -> relational Greater additive .)
    NotEqual        reduce using rule 89 (relational -> relational Greater additive .)
    Equal           reduce using rule 89 (relational -> relational Greater additive .)
    BitAnd          reduce using rule 89 (relational -> relational Greater additive .)
    Xor             reduce using rule 89 (relational -> relational Greater additive .)
    BitOr           reduce using rule 89 (relational -> relational Greater additive .)
    And             reduce using rule 89 (relational -> relational Greater additive .)
    Question        reduce using rule 89 (relational -> relational Greater additive .)
    Or              reduce using rule 89 (relational -> relational Greater additive .)
    Semi            reduce using rule 89 (relational -> relational Greater additive .)
    RParen          reduce using rule 89 (relational -> relational Greater additive .)
    Comma           reduce using rule 89 (relational -> relational Greater additive .)
    Int             reduce using rule 89 (relational -> relational Greater additive .)
    Colon           reduce using rule 89 (relational -> relational Greater additive .)
    Identifier      reduce using rule 89 (relational -> relational Greater additive .)
    BitNot          reduce using rule 89 (relational -> relational Greater additive .)
    Not             reduce using rule 89 (relational -> relational Greater additive .)
    Integer         reduce using rule 89 (relational -> relational Greater additive .)
    LParen          reduce using rule 89 (relational -> relational Greater additive .)
    Plus            shift and go to state 53
    Minus           shift and go to state 54

  ! Minus           [ reduce using rule 89 (relational -> relational Greater additive .) ]


state 80

    (90) relational -> relational LessEqual additive .
    (92) additive -> additive . Plus multiplicative
    (93) additive -> additive . Minus multiplicative

  ! shift/reduce conflict for Minus resolved as shift
    Less            reduce using rule 90 (relational -> relational LessEqual additive .)
    Greater         reduce using rule 90 (relational -> relational LessEqual additive .)
    LessEqual       reduce using rule 90 (relational -> relational LessEqual additive .)
    GreaterEqual    reduce using rule 90 (relational -> relational LessEqual additive .)
    NotEqual        reduce using rule 90 (relational -> relational LessEqual additive .)
    Equal           reduce using rule 90 (relational -> relational LessEqual additive .)
    BitAnd          reduce using rule 90 (relational -> relational LessEqual additive .)
    Xor             reduce using rule 90 (relational -> relational LessEqual additive .)
    BitOr           reduce using rule 90 (relational -> relational LessEqual additive .)
    And             reduce using rule 90 (relational -> relational LessEqual additive .)
    Question        reduce using rule 90 (relational -> relational LessEqual additive .)
    Or              reduce using rule 90 (relational -> relational LessEqual additive .)
    Semi            reduce using rule 90 (relational -> relational LessEqual additive .)
    RParen          reduce using rule 90 (relational -> relational LessEqual additive .)
    Comma           reduce using rule 90 (relational -> relational LessEqual additive .)
    Int             reduce using rule 90 (relational -> relational LessEqual additive .)
    Colon           reduce using rule 90 (relational -> relational LessEqual additive .)
    Identifier      reduce using rule 90 (relational -> relational LessEqual additive .)
    BitNot          reduce using rule 90 (relational -> relational LessEqual additive .)
    Not             reduce using rule 90 (relational -> relational LessEqual additive .)
    Integer         reduce using rule 90 (relational -> relational LessEqual additive .)
    LParen          reduce using rule 90 (relational -> relational LessEqual additive .)
    Plus            shift and go to state 53
    Minus           shift and go to state 54

  ! Minus           [ reduce using rule 90 (relational -> relational LessEqual additive .) ]


state 81

    (91) relational -> relational GreaterEqual additive .
    (92) additive -> additive . Plus multiplicative
    (93) additive -> additive . Minus multiplicative

  ! shift/reduce conflict for Minus resolved as shift
    Less            reduce using rule 91 (relational -> relational GreaterEqual additive .)
    Greater         reduce using rule 91 (relational -> relational GreaterEqual additive .)
    LessEqual       reduce using rule 91 (relational -> relational GreaterEqual additive .)
    GreaterEqual    reduce using rule 91 (relational -> relational GreaterEqual additive .)
    NotEqual        reduce using rule 91 (relational -> relational GreaterEqual additive .)
    Equal           reduce using rule 91 (relational -> relational GreaterEqual additive .)
    BitAnd          reduce using rule 91 (relational -> relational GreaterEqual additive .)
    Xor             reduce using rule 91 (relational -> relational GreaterEqual additive .)
    BitOr           reduce using rule 91 (relational -> relational GreaterEqual additive .)
    And             reduce using rule 91 (relational -> relational GreaterEqual additive .)
    Question        reduce using rule 91 (relational -> relational GreaterEqual additive .)
    Or              reduce using rule 91 (relational -> relational GreaterEqual additive .)
    Semi            reduce using rule 91 (relational -> relational GreaterEqual additive .)
    RParen          reduce using rule 91 (relational -> relational GreaterEqual additive .)
    Comma           reduce using rule 91 (relational -> relational GreaterEqual additive .)
    Int             reduce using rule 91 (relational -> relational GreaterEqual additive .)
    Colon           reduce using rule 91 (relational -> relational GreaterEqual additive .)
    Identifier      reduce using rule 91 (relational -> relational GreaterEqual additive .)
    BitNot          reduce using rule 91 (relational -> relational GreaterEqual additive .)
    Not             reduce using rule 91 (relational -> relational GreaterEqual additive .)
    Integer         reduce using rule 91 (relational -> relational GreaterEqual additive .)
    LParen          reduce using rule 91 (relational -> relational GreaterEqual additive .)
    Plus            shift and go to state 53
    Minus           shift and go to state 54

  ! Minus           [ reduce using rule 91 (relational -> relational GreaterEqual additive .) ]


state 82

    (92) additive -> additive Plus multiplicative .
    (94) multiplicative -> multiplicative . Mul unary
    (95) multiplicative -> multiplicative . Div unary
    (96) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 92 (additive -> additive Plus multiplicative .)
    Minus           reduce using rule 92 (additive -> additive Plus multiplicative .)
    Less            reduce using rule 92 (additive -> additive Plus multiplicative .)
    Greater         reduce using rule 92 (additive -> additive Plus multiplicative .)
    LessEqual       reduce using rule 92 (additive -> additive Plus multiplicative .)
    GreaterEqual    reduce using rule 92 (additive -> additive Plus multiplicative .)
    NotEqual        reduce using rule 92 (additive -> additive Plus multiplicative .)
    Equal           reduce using rule 92 (additive -> additive Plus multiplicative .)
    BitAnd          reduce using rule 92 (additive -> additive Plus multiplicative .)
    Xor             reduce using rule 92 (additive -> additive Plus multiplicative .)
    BitOr           reduce using rule 92 (additive -> additive Plus multiplicative .)
    And             reduce using rule 92 (additive -> additive Plus multiplicative .)
    Question        reduce using rule 92 (additive -> additive Plus multiplicative .)
    Or              reduce using rule 92 (additive -> additive Plus multiplicative .)
    Semi            reduce using rule 92 (additive -> additive Plus multiplicative .)
    RParen          reduce using rule 92 (additive -> additive Plus multiplicative .)
    Comma           reduce using rule 92 (additive -> additive Plus multiplicative .)
    Int             reduce using rule 92 (additive -> additive Plus multiplicative .)
    Colon           reduce using rule 92 (additive -> additive Plus multiplicative .)
    Identifier      reduce using rule 92 (additive -> additive Plus multiplicative .)
    BitNot          reduce using rule 92 (additive -> additive Plus multiplicative .)
    Not             reduce using rule 92 (additive -> additive Plus multiplicative .)
    Integer         reduce using rule 92 (additive -> additive Plus multiplicative .)
    LParen          reduce using rule 92 (additive -> additive Plus multiplicative .)
    Mul             shift and go to state 55
    Div             shift and go to state 56
    Mod             shift and go to state 57


state 83

    (93) additive -> additive Minus multiplicative .
    (94) multiplicative -> multiplicative . Mul unary
    (95) multiplicative -> multiplicative . Div unary
    (96) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 93 (additive -> additive Minus multiplicative .)
    Minus           reduce using rule 93 (additive -> additive Minus multiplicative .)
    Less            reduce using rule 93 (additive -> additive Minus multiplicative .)
    Greater         reduce using rule 93 (additive -> additive Minus multiplicative .)
    LessEqual       reduce using rule 93 (additive -> additive Minus multiplicative .)
    GreaterEqual    reduce using rule 93 (additive -> additive Minus multiplicative .)
    NotEqual        reduce using rule 93 (additive -> additive Minus multiplicative .)
    Equal           reduce using rule 93 (additive -> additive Minus multiplicative .)
    BitAnd          reduce using rule 93 (additive -> additive Minus multiplicative .)
    Xor             reduce using rule 93 (additive -> additive Minus multiplicative .)
    BitOr           reduce using rule 93 (additive -> additive Minus multiplicative .)
    And             reduce using rule 93 (additive -> additive Minus multiplicative .)
    Question        reduce using rule 93 (additive -> additive Minus multiplicative .)
    Or              reduce using rule 93 (additive -> additive Minus multiplicative .)
    Semi            reduce using rule 93 (additive -> additive Minus multiplicative .)
    RParen          reduce using rule 93 (additive -> additive Minus multiplicative .)
    Comma           reduce using rule 93 (additive -> additive Minus multiplicative .)
    Int             reduce using rule 93 (additive -> additive Minus multiplicative .)
    Colon           reduce using rule 93 (additive -> additive Minus multiplicative .)
    Identifier      reduce using rule 93 (additive -> additive Minus multiplicative .)
    BitNot          reduce using rule 93 (additive -> additive Minus multiplicative .)
    Not             reduce using rule 93 (additive -> additive Minus multiplicative .)
    Integer         reduce using rule 93 (additive -> additive Minus multiplicative .)
    LParen          reduce using rule 93 (additive -> additive Minus multiplicative .)
    Mul             shift and go to state 55
    Div             shift and go to state 56
    Mod             shift and go to state 57


state 84

    (94) multiplicative -> multiplicative Mul unary .

    Mul             reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    Div             reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    Mod             reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    Plus            reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    Minus           reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    Less            reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    Greater         reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    LessEqual       reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    GreaterEqual    reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    NotEqual        reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    Equal           reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    BitAnd          reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    Xor             reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    BitOr           reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    And             reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    Question        reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    Or              reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    Semi            reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    RParen          reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    Comma           reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    Int             reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    Colon           reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    Identifier      reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    BitNot          reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    Not             reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    Integer         reduce using rule 94 (multiplicative -> multiplicative Mul unary .)
    LParen          reduce using rule 94 (multiplicative -> multiplicative Mul unary .)


state 85

    (95) multiplicative -> multiplicative Div unary .

    Mul             reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    Div             reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    Mod             reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    Plus            reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    Minus           reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    Less            reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    Greater         reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    LessEqual       reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    GreaterEqual    reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    NotEqual        reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    Equal           reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    BitAnd          reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    Xor             reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    BitOr           reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    And             reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    Question        reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    Or              reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    Semi            reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    RParen          reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    Comma           reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    Int             reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    Colon           reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    Identifier      reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    BitNot          reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    Not             reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    Integer         reduce using rule 95 (multiplicative -> multiplicative Div unary .)
    LParen          reduce using rule 95 (multiplicative -> multiplicative Div unary .)


state 86

    (96) multiplicative -> multiplicative Mod unary .

    Mul             reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    Div             reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    Mod             reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    Plus            reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    Minus           reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    Less            reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    Greater         reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    LessEqual       reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    GreaterEqual    reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    NotEqual        reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    Equal           reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    BitAnd          reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    Xor             reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    BitOr           reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    And             reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    Question        reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    Or              reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    Semi            reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    RParen          reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    Comma           reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    Int             reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    Colon           reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    Identifier      reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    BitNot          reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    Not             reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    Integer         reduce using rule 96 (multiplicative -> multiplicative Mod unary .)
    LParen          reduce using rule 96 (multiplicative -> multiplicative Mod unary .)


state 87

    (100) primary -> LParen expression RParen .

    Mul             reduce using rule 100 (primary -> LParen expression RParen .)
    Div             reduce using rule 100 (primary -> LParen expression RParen .)
    Mod             reduce using rule 100 (primary -> LParen expression RParen .)
    Plus            reduce using rule 100 (primary -> LParen expression RParen .)
    Minus           reduce using rule 100 (primary -> LParen expression RParen .)
    Less            reduce using rule 100 (primary -> LParen expression RParen .)
    Greater         reduce using rule 100 (primary -> LParen expression RParen .)
    LessEqual       reduce using rule 100 (primary -> LParen expression RParen .)
    GreaterEqual    reduce using rule 100 (primary -> LParen expression RParen .)
    NotEqual        reduce using rule 100 (primary -> LParen expression RParen .)
    Equal           reduce using rule 100 (primary -> LParen expression RParen .)
    BitAnd          reduce using rule 100 (primary -> LParen expression RParen .)
    Xor             reduce using rule 100 (primary -> LParen expression RParen .)
    BitOr           reduce using rule 100 (primary -> LParen expression RParen .)
    And             reduce using rule 100 (primary -> LParen expression RParen .)
    Question        reduce using rule 100 (primary -> LParen expression RParen .)
    Or              reduce using rule 100 (primary -> LParen expression RParen .)
    Semi            reduce using rule 100 (primary -> LParen expression RParen .)
    RParen          reduce using rule 100 (primary -> LParen expression RParen .)
    Comma           reduce using rule 100 (primary -> LParen expression RParen .)
    Int             reduce using rule 100 (primary -> LParen expression RParen .)
    Colon           reduce using rule 100 (primary -> LParen expression RParen .)
    Identifier      reduce using rule 100 (primary -> LParen expression RParen .)
    BitNot          reduce using rule 100 (primary -> LParen expression RParen .)
    Not             reduce using rule 100 (primary -> LParen expression RParen .)
    Integer         reduce using rule 100 (primary -> LParen expression RParen .)
    LParen          reduce using rule 100 (primary -> LParen expression RParen .)


state 88

    (7) function -> type Identifier LParen params RParen LBrace block . RBrace
    (12) block -> block . block_item
    (14) block_item -> . statement
    (15) block_item -> . declaration Semi
    (16) statement -> . statement_matched
    (17) statement -> . statement_unmatched
    (56) declaration -> . type Identifier
    (57) declaration -> . type Identifier Assign expression
    (18) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (21) statement_matched -> . While LParen expression RParen statement_matched
    (23) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (24) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (34) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (38) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (47) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (49) statement_matched -> . Return expression Semi
    (50) statement_matched -> . opt_expression Semi
    (51) statement_matched -> . LBrace block RBrace
    (52) statement_matched -> . Break Semi
    (53) statement_matched -> . Continue Semi
    (19) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (20) statement_unmatched -> . If LParen expression RParen statement
    (22) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (36) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (48) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (5) type -> . Int
    (54) opt_expression -> . expression
    (55) opt_expression -> . empty
    (58) expression -> . assignment
    (1) empty -> .
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    RBrace          shift and go to state 96
    If              shift and go to state 103
    While           shift and go to state 104
    For             shift and go to state 105
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 95
    Break           shift and go to state 109
    Continue        shift and go to state 110
    Int             shift and go to state 6
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    type                           shift and go to state 34
    block_item                     shift and go to state 97
    statement                      shift and go to state 98
    declaration                    shift and go to state 99
    statement_matched              shift and go to state 100
    statement_unmatched            shift and go to state 101
    expression                     shift and go to state 102
    opt_expression                 shift and go to state 108
    empty                          shift and go to state 111
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 89

    (13) block -> empty .

    RBrace          reduce using rule 13 (block -> empty .)
    If              reduce using rule 13 (block -> empty .)
    While           reduce using rule 13 (block -> empty .)
    For             reduce using rule 13 (block -> empty .)
    Do              reduce using rule 13 (block -> empty .)
    Return          reduce using rule 13 (block -> empty .)
    LBrace          reduce using rule 13 (block -> empty .)
    Break           reduce using rule 13 (block -> empty .)
    Continue        reduce using rule 13 (block -> empty .)
    Int             reduce using rule 13 (block -> empty .)
    Identifier      reduce using rule 13 (block -> empty .)
    Minus           reduce using rule 13 (block -> empty .)
    BitNot          reduce using rule 13 (block -> empty .)
    Not             reduce using rule 13 (block -> empty .)
    Integer         reduce using rule 13 (block -> empty .)
    LParen          reduce using rule 13 (block -> empty .)
    Semi            reduce using rule 13 (block -> empty .)


state 90

    (75) postfix -> Identifier LParen arguments RParen .

    Mul             reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    Div             reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    Mod             reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    Plus            reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    Minus           reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    Less            reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    Greater         reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    LessEqual       reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    GreaterEqual    reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    NotEqual        reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    Equal           reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    BitAnd          reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    Xor             reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    BitOr           reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    And             reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    Question        reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    Or              reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    Semi            reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    RParen          reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    Comma           reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    Int             reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    Colon           reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    Identifier      reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    BitNot          reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    Not             reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    Integer         reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)
    LParen          reduce using rule 75 (postfix -> Identifier LParen arguments RParen .)


state 91

    (77) arguments -> arguments argument_item .

    RParen          reduce using rule 77 (arguments -> arguments argument_item .)
    Comma           reduce using rule 77 (arguments -> arguments argument_item .)
    Identifier      reduce using rule 77 (arguments -> arguments argument_item .)
    Minus           reduce using rule 77 (arguments -> arguments argument_item .)
    BitNot          reduce using rule 77 (arguments -> arguments argument_item .)
    Not             reduce using rule 77 (arguments -> arguments argument_item .)
    Integer         reduce using rule 77 (arguments -> arguments argument_item .)
    LParen          reduce using rule 77 (arguments -> arguments argument_item .)


state 92

    (78) argument_item -> Comma . expression
    (58) expression -> . assignment
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 112
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 93

    (79) argument_item -> expression .

    RParen          reduce using rule 79 (argument_item -> expression .)
    Comma           reduce using rule 79 (argument_item -> expression .)
    Identifier      reduce using rule 79 (argument_item -> expression .)
    Minus           reduce using rule 79 (argument_item -> expression .)
    BitNot          reduce using rule 79 (argument_item -> expression .)
    Not             reduce using rule 79 (argument_item -> expression .)
    Integer         reduce using rule 79 (argument_item -> expression .)
    LParen          reduce using rule 79 (argument_item -> expression .)


state 94

    (97) conditional -> logical_or Question expression Colon . conditional
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 59
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    logical_or                     shift and go to state 17
    conditional                    shift and go to state 113
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 95

    (51) statement_matched -> LBrace . block RBrace
    (12) block -> . block block_item
    (13) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 114
    empty                          shift and go to state 89

state 96

    (7) function -> type Identifier LParen params RParen LBrace block RBrace .

    Int             reduce using rule 7 (function -> type Identifier LParen params RParen LBrace block RBrace .)
    $end            reduce using rule 7 (function -> type Identifier LParen params RParen LBrace block RBrace .)


state 97

    (12) block -> block block_item .

    RBrace          reduce using rule 12 (block -> block block_item .)
    If              reduce using rule 12 (block -> block block_item .)
    While           reduce using rule 12 (block -> block block_item .)
    For             reduce using rule 12 (block -> block block_item .)
    Do              reduce using rule 12 (block -> block block_item .)
    Return          reduce using rule 12 (block -> block block_item .)
    LBrace          reduce using rule 12 (block -> block block_item .)
    Break           reduce using rule 12 (block -> block block_item .)
    Continue        reduce using rule 12 (block -> block block_item .)
    Int             reduce using rule 12 (block -> block block_item .)
    Identifier      reduce using rule 12 (block -> block block_item .)
    Minus           reduce using rule 12 (block -> block block_item .)
    BitNot          reduce using rule 12 (block -> block block_item .)
    Not             reduce using rule 12 (block -> block block_item .)
    Integer         reduce using rule 12 (block -> block block_item .)
    LParen          reduce using rule 12 (block -> block block_item .)
    Semi            reduce using rule 12 (block -> block block_item .)


state 98

    (14) block_item -> statement .

    RBrace          reduce using rule 14 (block_item -> statement .)
    If              reduce using rule 14 (block_item -> statement .)
    While           reduce using rule 14 (block_item -> statement .)
    For             reduce using rule 14 (block_item -> statement .)
    Do              reduce using rule 14 (block_item -> statement .)
    Return          reduce using rule 14 (block_item -> statement .)
    LBrace          reduce using rule 14 (block_item -> statement .)
    Break           reduce using rule 14 (block_item -> statement .)
    Continue        reduce using rule 14 (block_item -> statement .)
    Int             reduce using rule 14 (block_item -> statement .)
    Identifier      reduce using rule 14 (block_item -> statement .)
    Minus           reduce using rule 14 (block_item -> statement .)
    BitNot          reduce using rule 14 (block_item -> statement .)
    Not             reduce using rule 14 (block_item -> statement .)
    Integer         reduce using rule 14 (block_item -> statement .)
    LParen          reduce using rule 14 (block_item -> statement .)
    Semi            reduce using rule 14 (block_item -> statement .)


state 99

    (15) block_item -> declaration . Semi

    Semi            shift and go to state 115


state 100

    (16) statement -> statement_matched .

    RBrace          reduce using rule 16 (statement -> statement_matched .)
    If              reduce using rule 16 (statement -> statement_matched .)
    While           reduce using rule 16 (statement -> statement_matched .)
    For             reduce using rule 16 (statement -> statement_matched .)
    Do              reduce using rule 16 (statement -> statement_matched .)
    Return          reduce using rule 16 (statement -> statement_matched .)
    LBrace          reduce using rule 16 (statement -> statement_matched .)
    Break           reduce using rule 16 (statement -> statement_matched .)
    Continue        reduce using rule 16 (statement -> statement_matched .)
    Int             reduce using rule 16 (statement -> statement_matched .)
    Identifier      reduce using rule 16 (statement -> statement_matched .)
    Minus           reduce using rule 16 (statement -> statement_matched .)
    BitNot          reduce using rule 16 (statement -> statement_matched .)
    Not             reduce using rule 16 (statement -> statement_matched .)
    Integer         reduce using rule 16 (statement -> statement_matched .)
    LParen          reduce using rule 16 (statement -> statement_matched .)
    Semi            reduce using rule 16 (statement -> statement_matched .)


state 101

    (17) statement -> statement_unmatched .

    RBrace          reduce using rule 17 (statement -> statement_unmatched .)
    If              reduce using rule 17 (statement -> statement_unmatched .)
    While           reduce using rule 17 (statement -> statement_unmatched .)
    For             reduce using rule 17 (statement -> statement_unmatched .)
    Do              reduce using rule 17 (statement -> statement_unmatched .)
    Return          reduce using rule 17 (statement -> statement_unmatched .)
    LBrace          reduce using rule 17 (statement -> statement_unmatched .)
    Break           reduce using rule 17 (statement -> statement_unmatched .)
    Continue        reduce using rule 17 (statement -> statement_unmatched .)
    Int             reduce using rule 17 (statement -> statement_unmatched .)
    Identifier      reduce using rule 17 (statement -> statement_unmatched .)
    Minus           reduce using rule 17 (statement -> statement_unmatched .)
    BitNot          reduce using rule 17 (statement -> statement_unmatched .)
    Not             reduce using rule 17 (statement -> statement_unmatched .)
    Integer         reduce using rule 17 (statement -> statement_unmatched .)
    LParen          reduce using rule 17 (statement -> statement_unmatched .)
    Semi            reduce using rule 17 (statement -> statement_unmatched .)


state 102

    (54) opt_expression -> expression .

    Semi            reduce using rule 54 (opt_expression -> expression .)


state 103

    (18) statement_matched -> If . LParen expression RParen statement_matched Else statement_matched
    (19) statement_unmatched -> If . LParen expression RParen statement_matched Else statement_unmatched
    (20) statement_unmatched -> If . LParen expression RParen statement

    LParen          shift and go to state 116


state 104

    (21) statement_matched -> While . LParen expression RParen statement_matched
    (22) statement_unmatched -> While . LParen expression RParen statement_unmatched

    LParen          shift and go to state 117


state 105

    (23) statement_matched -> For . LParen expression Semi expression Semi expression RParen statement_matched
    (24) statement_matched -> For . LParen declaration Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> For . LParen Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> For . LParen expression Semi Semi expression RParen statement_matched
    (30) statement_matched -> For . LParen declaration Semi Semi expression RParen statement_matched
    (33) statement_matched -> For . LParen expression Semi expression Semi RParen statement_matched
    (34) statement_matched -> For . LParen declaration Semi expression Semi RParen statement_matched
    (37) statement_matched -> For . LParen expression Semi Semi RParen statement_matched
    (38) statement_matched -> For . LParen declaration Semi Semi RParen statement_matched
    (41) statement_matched -> For . LParen Semi expression Semi RParen statement_matched
    (43) statement_matched -> For . LParen Semi Semi expression RParen statement_matched
    (45) statement_matched -> For . LParen Semi Semi RParen statement_matched
    (25) statement_unmatched -> For . LParen expression Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> For . LParen declaration Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> For . LParen Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> For . LParen expression Semi Semi expression RParen statement_unmatched
    (32) statement_unmatched -> For . LParen declaration Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> For . LParen expression Semi expression Semi RParen statement_unmatched
    (36) statement_unmatched -> For . LParen declaration Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> For . LParen expression Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> For . LParen declaration Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> For . LParen Semi expression Semi RParen statement_unmatched
    (44) statement_unmatched -> For . LParen Semi Semi expression RParen statement_unmatched
    (46) statement_unmatched -> For . LParen Semi Semi RParen statement_unmatched

    LParen          shift and go to state 118


state 106

    (47) statement_matched -> Do . statement_matched While LParen expression RParen Semi
    (48) statement_unmatched -> Do . statement_unmatched While LParen expression RParen Semi
    (18) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (21) statement_matched -> . While LParen expression RParen statement_matched
    (23) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (24) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (34) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (38) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (47) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (49) statement_matched -> . Return expression Semi
    (50) statement_matched -> . opt_expression Semi
    (51) statement_matched -> . LBrace block RBrace
    (52) statement_matched -> . Break Semi
    (53) statement_matched -> . Continue Semi
    (19) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (20) statement_unmatched -> . If LParen expression RParen statement
    (22) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (36) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (48) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (54) opt_expression -> . expression
    (55) opt_expression -> . empty
    (58) expression -> . assignment
    (1) empty -> .
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    If              shift and go to state 103
    While           shift and go to state 104
    For             shift and go to state 105
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 95
    Break           shift and go to state 109
    Continue        shift and go to state 110
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    statement_matched              shift and go to state 119
    expression                     shift and go to state 102
    statement_unmatched            shift and go to state 120
    opt_expression                 shift and go to state 108
    empty                          shift and go to state 111
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 107

    (49) statement_matched -> Return . expression Semi
    (58) expression -> . assignment
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 121
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 108

    (50) statement_matched -> opt_expression . Semi

    Semi            shift and go to state 122


state 109

    (52) statement_matched -> Break . Semi

    Semi            shift and go to state 123


state 110

    (53) statement_matched -> Continue . Semi

    Semi            shift and go to state 124


state 111

    (55) opt_expression -> empty .

    Semi            reduce using rule 55 (opt_expression -> empty .)


state 112

    (78) argument_item -> Comma expression .

    RParen          reduce using rule 78 (argument_item -> Comma expression .)
    Comma           reduce using rule 78 (argument_item -> Comma expression .)
    Identifier      reduce using rule 78 (argument_item -> Comma expression .)
    Minus           reduce using rule 78 (argument_item -> Comma expression .)
    BitNot          reduce using rule 78 (argument_item -> Comma expression .)
    Not             reduce using rule 78 (argument_item -> Comma expression .)
    Integer         reduce using rule 78 (argument_item -> Comma expression .)
    LParen          reduce using rule 78 (argument_item -> Comma expression .)


state 113

    (97) conditional -> logical_or Question expression Colon conditional .

    Semi            reduce using rule 97 (conditional -> logical_or Question expression Colon conditional .)
    RParen          reduce using rule 97 (conditional -> logical_or Question expression Colon conditional .)
    Comma           reduce using rule 97 (conditional -> logical_or Question expression Colon conditional .)
    Int             reduce using rule 97 (conditional -> logical_or Question expression Colon conditional .)
    Colon           reduce using rule 97 (conditional -> logical_or Question expression Colon conditional .)
    Identifier      reduce using rule 97 (conditional -> logical_or Question expression Colon conditional .)
    Minus           reduce using rule 97 (conditional -> logical_or Question expression Colon conditional .)
    BitNot          reduce using rule 97 (conditional -> logical_or Question expression Colon conditional .)
    Not             reduce using rule 97 (conditional -> logical_or Question expression Colon conditional .)
    Integer         reduce using rule 97 (conditional -> logical_or Question expression Colon conditional .)
    LParen          reduce using rule 97 (conditional -> logical_or Question expression Colon conditional .)


state 114

    (51) statement_matched -> LBrace block . RBrace
    (12) block -> block . block_item
    (14) block_item -> . statement
    (15) block_item -> . declaration Semi
    (16) statement -> . statement_matched
    (17) statement -> . statement_unmatched
    (56) declaration -> . type Identifier
    (57) declaration -> . type Identifier Assign expression
    (18) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (21) statement_matched -> . While LParen expression RParen statement_matched
    (23) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (24) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (34) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (38) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (47) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (49) statement_matched -> . Return expression Semi
    (50) statement_matched -> . opt_expression Semi
    (51) statement_matched -> . LBrace block RBrace
    (52) statement_matched -> . Break Semi
    (53) statement_matched -> . Continue Semi
    (19) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (20) statement_unmatched -> . If LParen expression RParen statement
    (22) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (36) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (48) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (5) type -> . Int
    (54) opt_expression -> . expression
    (55) opt_expression -> . empty
    (58) expression -> . assignment
    (1) empty -> .
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    RBrace          shift and go to state 125
    If              shift and go to state 103
    While           shift and go to state 104
    For             shift and go to state 105
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 95
    Break           shift and go to state 109
    Continue        shift and go to state 110
    Int             shift and go to state 6
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    block_item                     shift and go to state 97
    statement                      shift and go to state 98
    declaration                    shift and go to state 99
    statement_matched              shift and go to state 100
    statement_unmatched            shift and go to state 101
    type                           shift and go to state 34
    expression                     shift and go to state 102
    opt_expression                 shift and go to state 108
    empty                          shift and go to state 111
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 115

    (15) block_item -> declaration Semi .

    RBrace          reduce using rule 15 (block_item -> declaration Semi .)
    If              reduce using rule 15 (block_item -> declaration Semi .)
    While           reduce using rule 15 (block_item -> declaration Semi .)
    For             reduce using rule 15 (block_item -> declaration Semi .)
    Do              reduce using rule 15 (block_item -> declaration Semi .)
    Return          reduce using rule 15 (block_item -> declaration Semi .)
    LBrace          reduce using rule 15 (block_item -> declaration Semi .)
    Break           reduce using rule 15 (block_item -> declaration Semi .)
    Continue        reduce using rule 15 (block_item -> declaration Semi .)
    Int             reduce using rule 15 (block_item -> declaration Semi .)
    Identifier      reduce using rule 15 (block_item -> declaration Semi .)
    Minus           reduce using rule 15 (block_item -> declaration Semi .)
    BitNot          reduce using rule 15 (block_item -> declaration Semi .)
    Not             reduce using rule 15 (block_item -> declaration Semi .)
    Integer         reduce using rule 15 (block_item -> declaration Semi .)
    LParen          reduce using rule 15 (block_item -> declaration Semi .)
    Semi            reduce using rule 15 (block_item -> declaration Semi .)


state 116

    (18) statement_matched -> If LParen . expression RParen statement_matched Else statement_matched
    (19) statement_unmatched -> If LParen . expression RParen statement_matched Else statement_unmatched
    (20) statement_unmatched -> If LParen . expression RParen statement
    (58) expression -> . assignment
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 126
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 117

    (21) statement_matched -> While LParen . expression RParen statement_matched
    (22) statement_unmatched -> While LParen . expression RParen statement_unmatched
    (58) expression -> . assignment
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 127
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 118

    (23) statement_matched -> For LParen . expression Semi expression Semi expression RParen statement_matched
    (24) statement_matched -> For LParen . declaration Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> For LParen . Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> For LParen . expression Semi Semi expression RParen statement_matched
    (30) statement_matched -> For LParen . declaration Semi Semi expression RParen statement_matched
    (33) statement_matched -> For LParen . expression Semi expression Semi RParen statement_matched
    (34) statement_matched -> For LParen . declaration Semi expression Semi RParen statement_matched
    (37) statement_matched -> For LParen . expression Semi Semi RParen statement_matched
    (38) statement_matched -> For LParen . declaration Semi Semi RParen statement_matched
    (41) statement_matched -> For LParen . Semi expression Semi RParen statement_matched
    (43) statement_matched -> For LParen . Semi Semi expression RParen statement_matched
    (45) statement_matched -> For LParen . Semi Semi RParen statement_matched
    (25) statement_unmatched -> For LParen . expression Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> For LParen . declaration Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> For LParen . Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> For LParen . expression Semi Semi expression RParen statement_unmatched
    (32) statement_unmatched -> For LParen . declaration Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> For LParen . expression Semi expression Semi RParen statement_unmatched
    (36) statement_unmatched -> For LParen . declaration Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> For LParen . expression Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> For LParen . declaration Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> For LParen . Semi expression Semi RParen statement_unmatched
    (44) statement_unmatched -> For LParen . Semi Semi expression RParen statement_unmatched
    (46) statement_unmatched -> For LParen . Semi Semi RParen statement_unmatched
    (58) expression -> . assignment
    (56) declaration -> . type Identifier
    (57) declaration -> . type Identifier Assign expression
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (5) type -> . Int
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Semi            shift and go to state 129
    Identifier      shift and go to state 13
    Int             shift and go to state 6
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 128
    declaration                    shift and go to state 130
    assignment                     shift and go to state 15
    type                           shift and go to state 34
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 119

    (47) statement_matched -> Do statement_matched . While LParen expression RParen Semi

    While           shift and go to state 131


state 120

    (48) statement_unmatched -> Do statement_unmatched . While LParen expression RParen Semi

    While           shift and go to state 132


state 121

    (49) statement_matched -> Return expression . Semi

    Semi            shift and go to state 133


state 122

    (50) statement_matched -> opt_expression Semi .

    RBrace          reduce using rule 50 (statement_matched -> opt_expression Semi .)
    If              reduce using rule 50 (statement_matched -> opt_expression Semi .)
    While           reduce using rule 50 (statement_matched -> opt_expression Semi .)
    For             reduce using rule 50 (statement_matched -> opt_expression Semi .)
    Do              reduce using rule 50 (statement_matched -> opt_expression Semi .)
    Return          reduce using rule 50 (statement_matched -> opt_expression Semi .)
    LBrace          reduce using rule 50 (statement_matched -> opt_expression Semi .)
    Break           reduce using rule 50 (statement_matched -> opt_expression Semi .)
    Continue        reduce using rule 50 (statement_matched -> opt_expression Semi .)
    Int             reduce using rule 50 (statement_matched -> opt_expression Semi .)
    Identifier      reduce using rule 50 (statement_matched -> opt_expression Semi .)
    Minus           reduce using rule 50 (statement_matched -> opt_expression Semi .)
    BitNot          reduce using rule 50 (statement_matched -> opt_expression Semi .)
    Not             reduce using rule 50 (statement_matched -> opt_expression Semi .)
    Integer         reduce using rule 50 (statement_matched -> opt_expression Semi .)
    LParen          reduce using rule 50 (statement_matched -> opt_expression Semi .)
    Semi            reduce using rule 50 (statement_matched -> opt_expression Semi .)
    Else            reduce using rule 50 (statement_matched -> opt_expression Semi .)


state 123

    (52) statement_matched -> Break Semi .

    RBrace          reduce using rule 52 (statement_matched -> Break Semi .)
    If              reduce using rule 52 (statement_matched -> Break Semi .)
    While           reduce using rule 52 (statement_matched -> Break Semi .)
    For             reduce using rule 52 (statement_matched -> Break Semi .)
    Do              reduce using rule 52 (statement_matched -> Break Semi .)
    Return          reduce using rule 52 (statement_matched -> Break Semi .)
    LBrace          reduce using rule 52 (statement_matched -> Break Semi .)
    Break           reduce using rule 52 (statement_matched -> Break Semi .)
    Continue        reduce using rule 52 (statement_matched -> Break Semi .)
    Int             reduce using rule 52 (statement_matched -> Break Semi .)
    Identifier      reduce using rule 52 (statement_matched -> Break Semi .)
    Minus           reduce using rule 52 (statement_matched -> Break Semi .)
    BitNot          reduce using rule 52 (statement_matched -> Break Semi .)
    Not             reduce using rule 52 (statement_matched -> Break Semi .)
    Integer         reduce using rule 52 (statement_matched -> Break Semi .)
    LParen          reduce using rule 52 (statement_matched -> Break Semi .)
    Semi            reduce using rule 52 (statement_matched -> Break Semi .)
    Else            reduce using rule 52 (statement_matched -> Break Semi .)


state 124

    (53) statement_matched -> Continue Semi .

    RBrace          reduce using rule 53 (statement_matched -> Continue Semi .)
    If              reduce using rule 53 (statement_matched -> Continue Semi .)
    While           reduce using rule 53 (statement_matched -> Continue Semi .)
    For             reduce using rule 53 (statement_matched -> Continue Semi .)
    Do              reduce using rule 53 (statement_matched -> Continue Semi .)
    Return          reduce using rule 53 (statement_matched -> Continue Semi .)
    LBrace          reduce using rule 53 (statement_matched -> Continue Semi .)
    Break           reduce using rule 53 (statement_matched -> Continue Semi .)
    Continue        reduce using rule 53 (statement_matched -> Continue Semi .)
    Int             reduce using rule 53 (statement_matched -> Continue Semi .)
    Identifier      reduce using rule 53 (statement_matched -> Continue Semi .)
    Minus           reduce using rule 53 (statement_matched -> Continue Semi .)
    BitNot          reduce using rule 53 (statement_matched -> Continue Semi .)
    Not             reduce using rule 53 (statement_matched -> Continue Semi .)
    Integer         reduce using rule 53 (statement_matched -> Continue Semi .)
    LParen          reduce using rule 53 (statement_matched -> Continue Semi .)
    Semi            reduce using rule 53 (statement_matched -> Continue Semi .)
    Else            reduce using rule 53 (statement_matched -> Continue Semi .)


state 125

    (51) statement_matched -> LBrace block RBrace .

    RBrace          reduce using rule 51 (statement_matched -> LBrace block RBrace .)
    If              reduce using rule 51 (statement_matched -> LBrace block RBrace .)
    While           reduce using rule 51 (statement_matched -> LBrace block RBrace .)
    For             reduce using rule 51 (statement_matched -> LBrace block RBrace .)
    Do              reduce using rule 51 (statement_matched -> LBrace block RBrace .)
    Return          reduce using rule 51 (statement_matched -> LBrace block RBrace .)
    LBrace          reduce using rule 51 (statement_matched -> LBrace block RBrace .)
    Break           reduce using rule 51 (statement_matched -> LBrace block RBrace .)
    Continue        reduce using rule 51 (statement_matched -> LBrace block RBrace .)
    Int             reduce using rule 51 (statement_matched -> LBrace block RBrace .)
    Identifier      reduce using rule 51 (statement_matched -> LBrace block RBrace .)
    Minus           reduce using rule 51 (statement_matched -> LBrace block RBrace .)
    BitNot          reduce using rule 51 (statement_matched -> LBrace block RBrace .)
    Not             reduce using rule 51 (statement_matched -> LBrace block RBrace .)
    Integer         reduce using rule 51 (statement_matched -> LBrace block RBrace .)
    LParen          reduce using rule 51 (statement_matched -> LBrace block RBrace .)
    Semi            reduce using rule 51 (statement_matched -> LBrace block RBrace .)
    Else            reduce using rule 51 (statement_matched -> LBrace block RBrace .)


state 126

    (18) statement_matched -> If LParen expression . RParen statement_matched Else statement_matched
    (19) statement_unmatched -> If LParen expression . RParen statement_matched Else statement_unmatched
    (20) statement_unmatched -> If LParen expression . RParen statement

    RParen          shift and go to state 134


state 127

    (21) statement_matched -> While LParen expression . RParen statement_matched
    (22) statement_unmatched -> While LParen expression . RParen statement_unmatched

    RParen          shift and go to state 135


state 128

    (23) statement_matched -> For LParen expression . Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> For LParen expression . Semi Semi expression RParen statement_matched
    (33) statement_matched -> For LParen expression . Semi expression Semi RParen statement_matched
    (37) statement_matched -> For LParen expression . Semi Semi RParen statement_matched
    (25) statement_unmatched -> For LParen expression . Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> For LParen expression . Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> For LParen expression . Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> For LParen expression . Semi Semi RParen statement_unmatched

    Semi            shift and go to state 136


state 129

    (27) statement_matched -> For LParen Semi . expression Semi expression RParen statement_matched
    (41) statement_matched -> For LParen Semi . expression Semi RParen statement_matched
    (43) statement_matched -> For LParen Semi . Semi expression RParen statement_matched
    (45) statement_matched -> For LParen Semi . Semi RParen statement_matched
    (28) statement_unmatched -> For LParen Semi . expression Semi expression RParen statement_unmatched
    (42) statement_unmatched -> For LParen Semi . expression Semi RParen statement_unmatched
    (44) statement_unmatched -> For LParen Semi . Semi expression RParen statement_unmatched
    (46) statement_unmatched -> For LParen Semi . Semi RParen statement_unmatched
    (58) expression -> . assignment
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Semi            shift and go to state 137
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 138
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 130

    (24) statement_matched -> For LParen declaration . Semi expression Semi expression RParen statement_matched
    (30) statement_matched -> For LParen declaration . Semi Semi expression RParen statement_matched
    (34) statement_matched -> For LParen declaration . Semi expression Semi RParen statement_matched
    (38) statement_matched -> For LParen declaration . Semi Semi RParen statement_matched
    (26) statement_unmatched -> For LParen declaration . Semi expression Semi expression RParen statement_unmatched
    (32) statement_unmatched -> For LParen declaration . Semi Semi expression RParen statement_unmatched
    (36) statement_unmatched -> For LParen declaration . Semi expression Semi RParen statement_unmatched
    (40) statement_unmatched -> For LParen declaration . Semi Semi RParen statement_unmatched

    Semi            shift and go to state 139


state 131

    (47) statement_matched -> Do statement_matched While . LParen expression RParen Semi

    LParen          shift and go to state 140


state 132

    (48) statement_unmatched -> Do statement_unmatched While . LParen expression RParen Semi

    LParen          shift and go to state 141


state 133

    (49) statement_matched -> Return expression Semi .

    RBrace          reduce using rule 49 (statement_matched -> Return expression Semi .)
    If              reduce using rule 49 (statement_matched -> Return expression Semi .)
    While           reduce using rule 49 (statement_matched -> Return expression Semi .)
    For             reduce using rule 49 (statement_matched -> Return expression Semi .)
    Do              reduce using rule 49 (statement_matched -> Return expression Semi .)
    Return          reduce using rule 49 (statement_matched -> Return expression Semi .)
    LBrace          reduce using rule 49 (statement_matched -> Return expression Semi .)
    Break           reduce using rule 49 (statement_matched -> Return expression Semi .)
    Continue        reduce using rule 49 (statement_matched -> Return expression Semi .)
    Int             reduce using rule 49 (statement_matched -> Return expression Semi .)
    Identifier      reduce using rule 49 (statement_matched -> Return expression Semi .)
    Minus           reduce using rule 49 (statement_matched -> Return expression Semi .)
    BitNot          reduce using rule 49 (statement_matched -> Return expression Semi .)
    Not             reduce using rule 49 (statement_matched -> Return expression Semi .)
    Integer         reduce using rule 49 (statement_matched -> Return expression Semi .)
    LParen          reduce using rule 49 (statement_matched -> Return expression Semi .)
    Semi            reduce using rule 49 (statement_matched -> Return expression Semi .)
    Else            reduce using rule 49 (statement_matched -> Return expression Semi .)


state 134

    (18) statement_matched -> If LParen expression RParen . statement_matched Else statement_matched
    (19) statement_unmatched -> If LParen expression RParen . statement_matched Else statement_unmatched
    (20) statement_unmatched -> If LParen expression RParen . statement
    (18) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (21) statement_matched -> . While LParen expression RParen statement_matched
    (23) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (24) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (34) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (38) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (47) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (49) statement_matched -> . Return expression Semi
    (50) statement_matched -> . opt_expression Semi
    (51) statement_matched -> . LBrace block RBrace
    (52) statement_matched -> . Break Semi
    (53) statement_matched -> . Continue Semi
    (16) statement -> . statement_matched
    (17) statement -> . statement_unmatched
    (54) opt_expression -> . expression
    (55) opt_expression -> . empty
    (19) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (20) statement_unmatched -> . If LParen expression RParen statement
    (22) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (36) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (48) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (58) expression -> . assignment
    (1) empty -> .
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    If              shift and go to state 103
    While           shift and go to state 104
    For             shift and go to state 105
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 95
    Break           shift and go to state 109
    Continue        shift and go to state 110
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 102
    statement_matched              shift and go to state 142
    statement_unmatched            shift and go to state 101
    statement                      shift and go to state 143
    opt_expression                 shift and go to state 108
    empty                          shift and go to state 111
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 135

    (21) statement_matched -> While LParen expression RParen . statement_matched
    (22) statement_unmatched -> While LParen expression RParen . statement_unmatched
    (18) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (21) statement_matched -> . While LParen expression RParen statement_matched
    (23) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (24) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (34) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (38) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (47) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (49) statement_matched -> . Return expression Semi
    (50) statement_matched -> . opt_expression Semi
    (51) statement_matched -> . LBrace block RBrace
    (52) statement_matched -> . Break Semi
    (53) statement_matched -> . Continue Semi
    (19) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (20) statement_unmatched -> . If LParen expression RParen statement
    (22) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (36) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (48) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (54) opt_expression -> . expression
    (55) opt_expression -> . empty
    (58) expression -> . assignment
    (1) empty -> .
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    If              shift and go to state 103
    While           shift and go to state 104
    For             shift and go to state 105
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 95
    Break           shift and go to state 109
    Continue        shift and go to state 110
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 102
    statement_matched              shift and go to state 144
    statement_unmatched            shift and go to state 145
    opt_expression                 shift and go to state 108
    empty                          shift and go to state 111
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 136

    (23) statement_matched -> For LParen expression Semi . expression Semi expression RParen statement_matched
    (29) statement_matched -> For LParen expression Semi . Semi expression RParen statement_matched
    (33) statement_matched -> For LParen expression Semi . expression Semi RParen statement_matched
    (37) statement_matched -> For LParen expression Semi . Semi RParen statement_matched
    (25) statement_unmatched -> For LParen expression Semi . expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> For LParen expression Semi . Semi expression RParen statement_unmatched
    (35) statement_unmatched -> For LParen expression Semi . expression Semi RParen statement_unmatched
    (39) statement_unmatched -> For LParen expression Semi . Semi RParen statement_unmatched
    (58) expression -> . assignment
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Semi            shift and go to state 147
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 146
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 137

    (43) statement_matched -> For LParen Semi Semi . expression RParen statement_matched
    (45) statement_matched -> For LParen Semi Semi . RParen statement_matched
    (44) statement_unmatched -> For LParen Semi Semi . expression RParen statement_unmatched
    (46) statement_unmatched -> For LParen Semi Semi . RParen statement_unmatched
    (58) expression -> . assignment
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    RParen          shift and go to state 149
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 148
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 138

    (27) statement_matched -> For LParen Semi expression . Semi expression RParen statement_matched
    (41) statement_matched -> For LParen Semi expression . Semi RParen statement_matched
    (28) statement_unmatched -> For LParen Semi expression . Semi expression RParen statement_unmatched
    (42) statement_unmatched -> For LParen Semi expression . Semi RParen statement_unmatched

    Semi            shift and go to state 150


state 139

    (24) statement_matched -> For LParen declaration Semi . expression Semi expression RParen statement_matched
    (30) statement_matched -> For LParen declaration Semi . Semi expression RParen statement_matched
    (34) statement_matched -> For LParen declaration Semi . expression Semi RParen statement_matched
    (38) statement_matched -> For LParen declaration Semi . Semi RParen statement_matched
    (26) statement_unmatched -> For LParen declaration Semi . expression Semi expression RParen statement_unmatched
    (32) statement_unmatched -> For LParen declaration Semi . Semi expression RParen statement_unmatched
    (36) statement_unmatched -> For LParen declaration Semi . expression Semi RParen statement_unmatched
    (40) statement_unmatched -> For LParen declaration Semi . Semi RParen statement_unmatched
    (58) expression -> . assignment
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Semi            shift and go to state 151
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 152
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 140

    (47) statement_matched -> Do statement_matched While LParen . expression RParen Semi
    (58) expression -> . assignment
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 153
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 141

    (48) statement_unmatched -> Do statement_unmatched While LParen . expression RParen Semi
    (58) expression -> . assignment
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 154
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 142

    (18) statement_matched -> If LParen expression RParen statement_matched . Else statement_matched
    (19) statement_unmatched -> If LParen expression RParen statement_matched . Else statement_unmatched
    (16) statement -> statement_matched .

    Else            shift and go to state 155
    RBrace          reduce using rule 16 (statement -> statement_matched .)
    If              reduce using rule 16 (statement -> statement_matched .)
    While           reduce using rule 16 (statement -> statement_matched .)
    For             reduce using rule 16 (statement -> statement_matched .)
    Do              reduce using rule 16 (statement -> statement_matched .)
    Return          reduce using rule 16 (statement -> statement_matched .)
    LBrace          reduce using rule 16 (statement -> statement_matched .)
    Break           reduce using rule 16 (statement -> statement_matched .)
    Continue        reduce using rule 16 (statement -> statement_matched .)
    Int             reduce using rule 16 (statement -> statement_matched .)
    Identifier      reduce using rule 16 (statement -> statement_matched .)
    Minus           reduce using rule 16 (statement -> statement_matched .)
    BitNot          reduce using rule 16 (statement -> statement_matched .)
    Not             reduce using rule 16 (statement -> statement_matched .)
    Integer         reduce using rule 16 (statement -> statement_matched .)
    LParen          reduce using rule 16 (statement -> statement_matched .)
    Semi            reduce using rule 16 (statement -> statement_matched .)


state 143

    (20) statement_unmatched -> If LParen expression RParen statement .

    RBrace          reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement .)
    If              reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement .)
    While           reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement .)
    For             reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement .)
    Do              reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement .)
    Return          reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement .)
    LBrace          reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement .)
    Break           reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement .)
    Continue        reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement .)
    Int             reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement .)
    Identifier      reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement .)
    Minus           reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement .)
    BitNot          reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement .)
    Not             reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement .)
    Integer         reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement .)
    LParen          reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement .)
    Semi            reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement .)


state 144

    (21) statement_matched -> While LParen expression RParen statement_matched .

    RBrace          reduce using rule 21 (statement_matched -> While LParen expression RParen statement_matched .)
    If              reduce using rule 21 (statement_matched -> While LParen expression RParen statement_matched .)
    While           reduce using rule 21 (statement_matched -> While LParen expression RParen statement_matched .)
    For             reduce using rule 21 (statement_matched -> While LParen expression RParen statement_matched .)
    Do              reduce using rule 21 (statement_matched -> While LParen expression RParen statement_matched .)
    Return          reduce using rule 21 (statement_matched -> While LParen expression RParen statement_matched .)
    LBrace          reduce using rule 21 (statement_matched -> While LParen expression RParen statement_matched .)
    Break           reduce using rule 21 (statement_matched -> While LParen expression RParen statement_matched .)
    Continue        reduce using rule 21 (statement_matched -> While LParen expression RParen statement_matched .)
    Int             reduce using rule 21 (statement_matched -> While LParen expression RParen statement_matched .)
    Identifier      reduce using rule 21 (statement_matched -> While LParen expression RParen statement_matched .)
    Minus           reduce using rule 21 (statement_matched -> While LParen expression RParen statement_matched .)
    BitNot          reduce using rule 21 (statement_matched -> While LParen expression RParen statement_matched .)
    Not             reduce using rule 21 (statement_matched -> While LParen expression RParen statement_matched .)
    Integer         reduce using rule 21 (statement_matched -> While LParen expression RParen statement_matched .)
    LParen          reduce using rule 21 (statement_matched -> While LParen expression RParen statement_matched .)
    Semi            reduce using rule 21 (statement_matched -> While LParen expression RParen statement_matched .)
    Else            reduce using rule 21 (statement_matched -> While LParen expression RParen statement_matched .)


state 145

    (22) statement_unmatched -> While LParen expression RParen statement_unmatched .

    RBrace          reduce using rule 22 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    If              reduce using rule 22 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    While           reduce using rule 22 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    For             reduce using rule 22 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Do              reduce using rule 22 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Return          reduce using rule 22 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LBrace          reduce using rule 22 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Break           reduce using rule 22 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Continue        reduce using rule 22 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Int             reduce using rule 22 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Identifier      reduce using rule 22 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Minus           reduce using rule 22 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    BitNot          reduce using rule 22 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Not             reduce using rule 22 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Integer         reduce using rule 22 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LParen          reduce using rule 22 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Semi            reduce using rule 22 (statement_unmatched -> While LParen expression RParen statement_unmatched .)


state 146

    (23) statement_matched -> For LParen expression Semi expression . Semi expression RParen statement_matched
    (33) statement_matched -> For LParen expression Semi expression . Semi RParen statement_matched
    (25) statement_unmatched -> For LParen expression Semi expression . Semi expression RParen statement_unmatched
    (35) statement_unmatched -> For LParen expression Semi expression . Semi RParen statement_unmatched

    Semi            shift and go to state 156


state 147

    (29) statement_matched -> For LParen expression Semi Semi . expression RParen statement_matched
    (37) statement_matched -> For LParen expression Semi Semi . RParen statement_matched
    (31) statement_unmatched -> For LParen expression Semi Semi . expression RParen statement_unmatched
    (39) statement_unmatched -> For LParen expression Semi Semi . RParen statement_unmatched
    (58) expression -> . assignment
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    RParen          shift and go to state 158
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 157
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 148

    (43) statement_matched -> For LParen Semi Semi expression . RParen statement_matched
    (44) statement_unmatched -> For LParen Semi Semi expression . RParen statement_unmatched

    RParen          shift and go to state 159


state 149

    (45) statement_matched -> For LParen Semi Semi RParen . statement_matched
    (46) statement_unmatched -> For LParen Semi Semi RParen . statement_unmatched
    (18) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (21) statement_matched -> . While LParen expression RParen statement_matched
    (23) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (24) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (34) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (38) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (47) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (49) statement_matched -> . Return expression Semi
    (50) statement_matched -> . opt_expression Semi
    (51) statement_matched -> . LBrace block RBrace
    (52) statement_matched -> . Break Semi
    (53) statement_matched -> . Continue Semi
    (19) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (20) statement_unmatched -> . If LParen expression RParen statement
    (22) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (36) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (48) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (54) opt_expression -> . expression
    (55) opt_expression -> . empty
    (58) expression -> . assignment
    (1) empty -> .
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    If              shift and go to state 103
    While           shift and go to state 104
    For             shift and go to state 105
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 95
    Break           shift and go to state 109
    Continue        shift and go to state 110
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    statement_matched              shift and go to state 160
    statement_unmatched            shift and go to state 161
    expression                     shift and go to state 102
    opt_expression                 shift and go to state 108
    empty                          shift and go to state 111
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 150

    (27) statement_matched -> For LParen Semi expression Semi . expression RParen statement_matched
    (41) statement_matched -> For LParen Semi expression Semi . RParen statement_matched
    (28) statement_unmatched -> For LParen Semi expression Semi . expression RParen statement_unmatched
    (42) statement_unmatched -> For LParen Semi expression Semi . RParen statement_unmatched
    (58) expression -> . assignment
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    RParen          shift and go to state 163
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 162
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 151

    (30) statement_matched -> For LParen declaration Semi Semi . expression RParen statement_matched
    (38) statement_matched -> For LParen declaration Semi Semi . RParen statement_matched
    (32) statement_unmatched -> For LParen declaration Semi Semi . expression RParen statement_unmatched
    (40) statement_unmatched -> For LParen declaration Semi Semi . RParen statement_unmatched
    (58) expression -> . assignment
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    RParen          shift and go to state 165
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 164
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 152

    (24) statement_matched -> For LParen declaration Semi expression . Semi expression RParen statement_matched
    (34) statement_matched -> For LParen declaration Semi expression . Semi RParen statement_matched
    (26) statement_unmatched -> For LParen declaration Semi expression . Semi expression RParen statement_unmatched
    (36) statement_unmatched -> For LParen declaration Semi expression . Semi RParen statement_unmatched

    Semi            shift and go to state 166


state 153

    (47) statement_matched -> Do statement_matched While LParen expression . RParen Semi

    RParen          shift and go to state 167


state 154

    (48) statement_unmatched -> Do statement_unmatched While LParen expression . RParen Semi

    RParen          shift and go to state 168


state 155

    (18) statement_matched -> If LParen expression RParen statement_matched Else . statement_matched
    (19) statement_unmatched -> If LParen expression RParen statement_matched Else . statement_unmatched
    (18) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (21) statement_matched -> . While LParen expression RParen statement_matched
    (23) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (24) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (34) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (38) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (47) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (49) statement_matched -> . Return expression Semi
    (50) statement_matched -> . opt_expression Semi
    (51) statement_matched -> . LBrace block RBrace
    (52) statement_matched -> . Break Semi
    (53) statement_matched -> . Continue Semi
    (19) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (20) statement_unmatched -> . If LParen expression RParen statement
    (22) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (36) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (48) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (54) opt_expression -> . expression
    (55) opt_expression -> . empty
    (58) expression -> . assignment
    (1) empty -> .
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    If              shift and go to state 103
    While           shift and go to state 104
    For             shift and go to state 105
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 95
    Break           shift and go to state 109
    Continue        shift and go to state 110
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 102
    statement_matched              shift and go to state 169
    statement_unmatched            shift and go to state 170
    opt_expression                 shift and go to state 108
    empty                          shift and go to state 111
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 156

    (23) statement_matched -> For LParen expression Semi expression Semi . expression RParen statement_matched
    (33) statement_matched -> For LParen expression Semi expression Semi . RParen statement_matched
    (25) statement_unmatched -> For LParen expression Semi expression Semi . expression RParen statement_unmatched
    (35) statement_unmatched -> For LParen expression Semi expression Semi . RParen statement_unmatched
    (58) expression -> . assignment
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    RParen          shift and go to state 172
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 171
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 157

    (29) statement_matched -> For LParen expression Semi Semi expression . RParen statement_matched
    (31) statement_unmatched -> For LParen expression Semi Semi expression . RParen statement_unmatched

    RParen          shift and go to state 173


state 158

    (37) statement_matched -> For LParen expression Semi Semi RParen . statement_matched
    (39) statement_unmatched -> For LParen expression Semi Semi RParen . statement_unmatched
    (18) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (21) statement_matched -> . While LParen expression RParen statement_matched
    (23) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (24) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (34) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (38) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (47) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (49) statement_matched -> . Return expression Semi
    (50) statement_matched -> . opt_expression Semi
    (51) statement_matched -> . LBrace block RBrace
    (52) statement_matched -> . Break Semi
    (53) statement_matched -> . Continue Semi
    (19) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (20) statement_unmatched -> . If LParen expression RParen statement
    (22) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (36) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (48) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (54) opt_expression -> . expression
    (55) opt_expression -> . empty
    (58) expression -> . assignment
    (1) empty -> .
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    If              shift and go to state 103
    While           shift and go to state 104
    For             shift and go to state 105
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 95
    Break           shift and go to state 109
    Continue        shift and go to state 110
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 102
    statement_matched              shift and go to state 174
    statement_unmatched            shift and go to state 175
    opt_expression                 shift and go to state 108
    empty                          shift and go to state 111
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 159

    (43) statement_matched -> For LParen Semi Semi expression RParen . statement_matched
    (44) statement_unmatched -> For LParen Semi Semi expression RParen . statement_unmatched
    (18) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (21) statement_matched -> . While LParen expression RParen statement_matched
    (23) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (24) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (34) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (38) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (47) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (49) statement_matched -> . Return expression Semi
    (50) statement_matched -> . opt_expression Semi
    (51) statement_matched -> . LBrace block RBrace
    (52) statement_matched -> . Break Semi
    (53) statement_matched -> . Continue Semi
    (19) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (20) statement_unmatched -> . If LParen expression RParen statement
    (22) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (36) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (48) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (54) opt_expression -> . expression
    (55) opt_expression -> . empty
    (58) expression -> . assignment
    (1) empty -> .
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    If              shift and go to state 103
    While           shift and go to state 104
    For             shift and go to state 105
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 95
    Break           shift and go to state 109
    Continue        shift and go to state 110
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 102
    statement_matched              shift and go to state 176
    statement_unmatched            shift and go to state 177
    opt_expression                 shift and go to state 108
    empty                          shift and go to state 111
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 160

    (45) statement_matched -> For LParen Semi Semi RParen statement_matched .

    RBrace          reduce using rule 45 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    If              reduce using rule 45 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    While           reduce using rule 45 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    For             reduce using rule 45 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Do              reduce using rule 45 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Return          reduce using rule 45 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    LBrace          reduce using rule 45 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Break           reduce using rule 45 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Continue        reduce using rule 45 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Int             reduce using rule 45 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Identifier      reduce using rule 45 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Minus           reduce using rule 45 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    BitNot          reduce using rule 45 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Not             reduce using rule 45 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Integer         reduce using rule 45 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    LParen          reduce using rule 45 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Semi            reduce using rule 45 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Else            reduce using rule 45 (statement_matched -> For LParen Semi Semi RParen statement_matched .)


state 161

    (46) statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .

    RBrace          reduce using rule 46 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    If              reduce using rule 46 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    While           reduce using rule 46 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    For             reduce using rule 46 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Do              reduce using rule 46 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Return          reduce using rule 46 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    LBrace          reduce using rule 46 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Break           reduce using rule 46 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Continue        reduce using rule 46 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Int             reduce using rule 46 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Identifier      reduce using rule 46 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Minus           reduce using rule 46 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    BitNot          reduce using rule 46 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Not             reduce using rule 46 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Integer         reduce using rule 46 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    LParen          reduce using rule 46 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Semi            reduce using rule 46 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)


state 162

    (27) statement_matched -> For LParen Semi expression Semi expression . RParen statement_matched
    (28) statement_unmatched -> For LParen Semi expression Semi expression . RParen statement_unmatched

    RParen          shift and go to state 178


state 163

    (41) statement_matched -> For LParen Semi expression Semi RParen . statement_matched
    (42) statement_unmatched -> For LParen Semi expression Semi RParen . statement_unmatched
    (18) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (21) statement_matched -> . While LParen expression RParen statement_matched
    (23) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (24) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (34) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (38) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (47) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (49) statement_matched -> . Return expression Semi
    (50) statement_matched -> . opt_expression Semi
    (51) statement_matched -> . LBrace block RBrace
    (52) statement_matched -> . Break Semi
    (53) statement_matched -> . Continue Semi
    (19) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (20) statement_unmatched -> . If LParen expression RParen statement
    (22) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (36) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (48) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (54) opt_expression -> . expression
    (55) opt_expression -> . empty
    (58) expression -> . assignment
    (1) empty -> .
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    If              shift and go to state 103
    While           shift and go to state 104
    For             shift and go to state 105
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 95
    Break           shift and go to state 109
    Continue        shift and go to state 110
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 102
    statement_matched              shift and go to state 179
    statement_unmatched            shift and go to state 180
    opt_expression                 shift and go to state 108
    empty                          shift and go to state 111
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 164

    (30) statement_matched -> For LParen declaration Semi Semi expression . RParen statement_matched
    (32) statement_unmatched -> For LParen declaration Semi Semi expression . RParen statement_unmatched

    RParen          shift and go to state 181


state 165

    (38) statement_matched -> For LParen declaration Semi Semi RParen . statement_matched
    (40) statement_unmatched -> For LParen declaration Semi Semi RParen . statement_unmatched
    (18) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (21) statement_matched -> . While LParen expression RParen statement_matched
    (23) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (24) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (34) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (38) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (47) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (49) statement_matched -> . Return expression Semi
    (50) statement_matched -> . opt_expression Semi
    (51) statement_matched -> . LBrace block RBrace
    (52) statement_matched -> . Break Semi
    (53) statement_matched -> . Continue Semi
    (19) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (20) statement_unmatched -> . If LParen expression RParen statement
    (22) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (36) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (48) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (54) opt_expression -> . expression
    (55) opt_expression -> . empty
    (58) expression -> . assignment
    (1) empty -> .
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    If              shift and go to state 103
    While           shift and go to state 104
    For             shift and go to state 105
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 95
    Break           shift and go to state 109
    Continue        shift and go to state 110
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    statement_matched              shift and go to state 182
    statement_unmatched            shift and go to state 183
    expression                     shift and go to state 102
    opt_expression                 shift and go to state 108
    empty                          shift and go to state 111
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 166

    (24) statement_matched -> For LParen declaration Semi expression Semi . expression RParen statement_matched
    (34) statement_matched -> For LParen declaration Semi expression Semi . RParen statement_matched
    (26) statement_unmatched -> For LParen declaration Semi expression Semi . expression RParen statement_unmatched
    (36) statement_unmatched -> For LParen declaration Semi expression Semi . RParen statement_unmatched
    (58) expression -> . assignment
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    RParen          shift and go to state 185
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 184
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 167

    (47) statement_matched -> Do statement_matched While LParen expression RParen . Semi

    Semi            shift and go to state 186


state 168

    (48) statement_unmatched -> Do statement_unmatched While LParen expression RParen . Semi

    Semi            shift and go to state 187


state 169

    (18) statement_matched -> If LParen expression RParen statement_matched Else statement_matched .

    RBrace          reduce using rule 18 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    If              reduce using rule 18 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    While           reduce using rule 18 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    For             reduce using rule 18 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Do              reduce using rule 18 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Return          reduce using rule 18 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LBrace          reduce using rule 18 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Break           reduce using rule 18 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Continue        reduce using rule 18 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Int             reduce using rule 18 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Identifier      reduce using rule 18 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Minus           reduce using rule 18 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    BitNot          reduce using rule 18 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Not             reduce using rule 18 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Integer         reduce using rule 18 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LParen          reduce using rule 18 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Semi            reduce using rule 18 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Else            reduce using rule 18 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)


state 170

    (19) statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .

    RBrace          reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    If              reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    While           reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    For             reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Do              reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Return          reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LBrace          reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Break           reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Continue        reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Int             reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Identifier      reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Minus           reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    BitNot          reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Not             reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Integer         reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LParen          reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Semi            reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)


state 171

    (23) statement_matched -> For LParen expression Semi expression Semi expression . RParen statement_matched
    (25) statement_unmatched -> For LParen expression Semi expression Semi expression . RParen statement_unmatched

    RParen          shift and go to state 188


state 172

    (33) statement_matched -> For LParen expression Semi expression Semi RParen . statement_matched
    (35) statement_unmatched -> For LParen expression Semi expression Semi RParen . statement_unmatched
    (18) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (21) statement_matched -> . While LParen expression RParen statement_matched
    (23) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (24) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (34) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (38) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (47) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (49) statement_matched -> . Return expression Semi
    (50) statement_matched -> . opt_expression Semi
    (51) statement_matched -> . LBrace block RBrace
    (52) statement_matched -> . Break Semi
    (53) statement_matched -> . Continue Semi
    (19) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (20) statement_unmatched -> . If LParen expression RParen statement
    (22) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (36) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (48) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (54) opt_expression -> . expression
    (55) opt_expression -> . empty
    (58) expression -> . assignment
    (1) empty -> .
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    If              shift and go to state 103
    While           shift and go to state 104
    For             shift and go to state 105
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 95
    Break           shift and go to state 109
    Continue        shift and go to state 110
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 102
    statement_matched              shift and go to state 189
    statement_unmatched            shift and go to state 190
    opt_expression                 shift and go to state 108
    empty                          shift and go to state 111
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 173

    (29) statement_matched -> For LParen expression Semi Semi expression RParen . statement_matched
    (31) statement_unmatched -> For LParen expression Semi Semi expression RParen . statement_unmatched
    (18) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (21) statement_matched -> . While LParen expression RParen statement_matched
    (23) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (24) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (34) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (38) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (47) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (49) statement_matched -> . Return expression Semi
    (50) statement_matched -> . opt_expression Semi
    (51) statement_matched -> . LBrace block RBrace
    (52) statement_matched -> . Break Semi
    (53) statement_matched -> . Continue Semi
    (19) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (20) statement_unmatched -> . If LParen expression RParen statement
    (22) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (36) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (48) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (54) opt_expression -> . expression
    (55) opt_expression -> . empty
    (58) expression -> . assignment
    (1) empty -> .
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    If              shift and go to state 103
    While           shift and go to state 104
    For             shift and go to state 105
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 95
    Break           shift and go to state 109
    Continue        shift and go to state 110
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 102
    statement_matched              shift and go to state 191
    statement_unmatched            shift and go to state 192
    opt_expression                 shift and go to state 108
    empty                          shift and go to state 111
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 174

    (37) statement_matched -> For LParen expression Semi Semi RParen statement_matched .

    RBrace          reduce using rule 37 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    If              reduce using rule 37 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    While           reduce using rule 37 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    For             reduce using rule 37 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Do              reduce using rule 37 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Return          reduce using rule 37 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    LBrace          reduce using rule 37 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Break           reduce using rule 37 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Continue        reduce using rule 37 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Int             reduce using rule 37 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Identifier      reduce using rule 37 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Minus           reduce using rule 37 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    BitNot          reduce using rule 37 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Not             reduce using rule 37 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Integer         reduce using rule 37 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    LParen          reduce using rule 37 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Semi            reduce using rule 37 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Else            reduce using rule 37 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)


state 175

    (39) statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .

    RBrace          reduce using rule 39 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    If              reduce using rule 39 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    While           reduce using rule 39 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    For             reduce using rule 39 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Do              reduce using rule 39 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Return          reduce using rule 39 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    LBrace          reduce using rule 39 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Break           reduce using rule 39 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Continue        reduce using rule 39 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Int             reduce using rule 39 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Identifier      reduce using rule 39 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Minus           reduce using rule 39 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    BitNot          reduce using rule 39 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Not             reduce using rule 39 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Integer         reduce using rule 39 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    LParen          reduce using rule 39 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Semi            reduce using rule 39 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)


state 176

    (43) statement_matched -> For LParen Semi Semi expression RParen statement_matched .

    RBrace          reduce using rule 43 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    If              reduce using rule 43 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    While           reduce using rule 43 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    For             reduce using rule 43 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Do              reduce using rule 43 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Return          reduce using rule 43 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    LBrace          reduce using rule 43 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Break           reduce using rule 43 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Continue        reduce using rule 43 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Int             reduce using rule 43 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Identifier      reduce using rule 43 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Minus           reduce using rule 43 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    BitNot          reduce using rule 43 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Not             reduce using rule 43 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Integer         reduce using rule 43 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    LParen          reduce using rule 43 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Semi            reduce using rule 43 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Else            reduce using rule 43 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)


state 177

    (44) statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 44 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    If              reduce using rule 44 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    While           reduce using rule 44 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    For             reduce using rule 44 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Do              reduce using rule 44 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Return          reduce using rule 44 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 44 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Break           reduce using rule 44 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 44 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Int             reduce using rule 44 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 44 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 44 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 44 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Not             reduce using rule 44 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 44 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 44 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 44 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)


state 178

    (27) statement_matched -> For LParen Semi expression Semi expression RParen . statement_matched
    (28) statement_unmatched -> For LParen Semi expression Semi expression RParen . statement_unmatched
    (18) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (21) statement_matched -> . While LParen expression RParen statement_matched
    (23) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (24) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (34) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (38) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (47) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (49) statement_matched -> . Return expression Semi
    (50) statement_matched -> . opt_expression Semi
    (51) statement_matched -> . LBrace block RBrace
    (52) statement_matched -> . Break Semi
    (53) statement_matched -> . Continue Semi
    (19) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (20) statement_unmatched -> . If LParen expression RParen statement
    (22) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (36) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (48) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (54) opt_expression -> . expression
    (55) opt_expression -> . empty
    (58) expression -> . assignment
    (1) empty -> .
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    If              shift and go to state 103
    While           shift and go to state 104
    For             shift and go to state 105
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 95
    Break           shift and go to state 109
    Continue        shift and go to state 110
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 102
    statement_matched              shift and go to state 193
    statement_unmatched            shift and go to state 194
    opt_expression                 shift and go to state 108
    empty                          shift and go to state 111
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 179

    (41) statement_matched -> For LParen Semi expression Semi RParen statement_matched .

    RBrace          reduce using rule 41 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    If              reduce using rule 41 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    While           reduce using rule 41 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    For             reduce using rule 41 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Do              reduce using rule 41 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Return          reduce using rule 41 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    LBrace          reduce using rule 41 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Break           reduce using rule 41 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Continue        reduce using rule 41 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Int             reduce using rule 41 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Identifier      reduce using rule 41 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Minus           reduce using rule 41 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    BitNot          reduce using rule 41 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Not             reduce using rule 41 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Integer         reduce using rule 41 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    LParen          reduce using rule 41 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Semi            reduce using rule 41 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Else            reduce using rule 41 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)


state 180

    (42) statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .

    RBrace          reduce using rule 42 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    If              reduce using rule 42 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    While           reduce using rule 42 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    For             reduce using rule 42 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Do              reduce using rule 42 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Return          reduce using rule 42 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    LBrace          reduce using rule 42 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Break           reduce using rule 42 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Continue        reduce using rule 42 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Int             reduce using rule 42 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Identifier      reduce using rule 42 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Minus           reduce using rule 42 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    BitNot          reduce using rule 42 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Not             reduce using rule 42 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Integer         reduce using rule 42 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    LParen          reduce using rule 42 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Semi            reduce using rule 42 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)


state 181

    (30) statement_matched -> For LParen declaration Semi Semi expression RParen . statement_matched
    (32) statement_unmatched -> For LParen declaration Semi Semi expression RParen . statement_unmatched
    (18) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (21) statement_matched -> . While LParen expression RParen statement_matched
    (23) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (24) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (34) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (38) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (47) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (49) statement_matched -> . Return expression Semi
    (50) statement_matched -> . opt_expression Semi
    (51) statement_matched -> . LBrace block RBrace
    (52) statement_matched -> . Break Semi
    (53) statement_matched -> . Continue Semi
    (19) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (20) statement_unmatched -> . If LParen expression RParen statement
    (22) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (36) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (48) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (54) opt_expression -> . expression
    (55) opt_expression -> . empty
    (58) expression -> . assignment
    (1) empty -> .
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    If              shift and go to state 103
    While           shift and go to state 104
    For             shift and go to state 105
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 95
    Break           shift and go to state 109
    Continue        shift and go to state 110
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 102
    statement_matched              shift and go to state 195
    statement_unmatched            shift and go to state 196
    opt_expression                 shift and go to state 108
    empty                          shift and go to state 111
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 182

    (38) statement_matched -> For LParen declaration Semi Semi RParen statement_matched .

    RBrace          reduce using rule 38 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    If              reduce using rule 38 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    While           reduce using rule 38 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    For             reduce using rule 38 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Do              reduce using rule 38 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Return          reduce using rule 38 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    LBrace          reduce using rule 38 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Break           reduce using rule 38 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Continue        reduce using rule 38 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Int             reduce using rule 38 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Identifier      reduce using rule 38 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Minus           reduce using rule 38 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    BitNot          reduce using rule 38 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Not             reduce using rule 38 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Integer         reduce using rule 38 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    LParen          reduce using rule 38 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Semi            reduce using rule 38 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Else            reduce using rule 38 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)


state 183

    (40) statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .

    RBrace          reduce using rule 40 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    If              reduce using rule 40 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    While           reduce using rule 40 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    For             reduce using rule 40 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Do              reduce using rule 40 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Return          reduce using rule 40 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    LBrace          reduce using rule 40 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Break           reduce using rule 40 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Continue        reduce using rule 40 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Int             reduce using rule 40 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Identifier      reduce using rule 40 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Minus           reduce using rule 40 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    BitNot          reduce using rule 40 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Not             reduce using rule 40 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Integer         reduce using rule 40 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    LParen          reduce using rule 40 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Semi            reduce using rule 40 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)


state 184

    (24) statement_matched -> For LParen declaration Semi expression Semi expression . RParen statement_matched
    (26) statement_unmatched -> For LParen declaration Semi expression Semi expression . RParen statement_unmatched

    RParen          shift and go to state 197


state 185

    (34) statement_matched -> For LParen declaration Semi expression Semi RParen . statement_matched
    (36) statement_unmatched -> For LParen declaration Semi expression Semi RParen . statement_unmatched
    (18) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (21) statement_matched -> . While LParen expression RParen statement_matched
    (23) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (24) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (34) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (38) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (47) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (49) statement_matched -> . Return expression Semi
    (50) statement_matched -> . opt_expression Semi
    (51) statement_matched -> . LBrace block RBrace
    (52) statement_matched -> . Break Semi
    (53) statement_matched -> . Continue Semi
    (19) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (20) statement_unmatched -> . If LParen expression RParen statement
    (22) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (36) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (48) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (54) opt_expression -> . expression
    (55) opt_expression -> . empty
    (58) expression -> . assignment
    (1) empty -> .
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    If              shift and go to state 103
    While           shift and go to state 104
    For             shift and go to state 105
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 95
    Break           shift and go to state 109
    Continue        shift and go to state 110
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 102
    statement_matched              shift and go to state 198
    statement_unmatched            shift and go to state 199
    opt_expression                 shift and go to state 108
    empty                          shift and go to state 111
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 186

    (47) statement_matched -> Do statement_matched While LParen expression RParen Semi .

    RBrace          reduce using rule 47 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    If              reduce using rule 47 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    While           reduce using rule 47 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    For             reduce using rule 47 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Do              reduce using rule 47 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Return          reduce using rule 47 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LBrace          reduce using rule 47 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Break           reduce using rule 47 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Continue        reduce using rule 47 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Int             reduce using rule 47 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Identifier      reduce using rule 47 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Minus           reduce using rule 47 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    BitNot          reduce using rule 47 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Not             reduce using rule 47 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Integer         reduce using rule 47 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LParen          reduce using rule 47 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Semi            reduce using rule 47 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Else            reduce using rule 47 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)


state 187

    (48) statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .

    RBrace          reduce using rule 48 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    If              reduce using rule 48 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    While           reduce using rule 48 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    For             reduce using rule 48 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Do              reduce using rule 48 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Return          reduce using rule 48 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    LBrace          reduce using rule 48 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Break           reduce using rule 48 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Continue        reduce using rule 48 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Int             reduce using rule 48 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Identifier      reduce using rule 48 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Minus           reduce using rule 48 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    BitNot          reduce using rule 48 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Not             reduce using rule 48 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Integer         reduce using rule 48 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    LParen          reduce using rule 48 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Semi            reduce using rule 48 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)


state 188

    (23) statement_matched -> For LParen expression Semi expression Semi expression RParen . statement_matched
    (25) statement_unmatched -> For LParen expression Semi expression Semi expression RParen . statement_unmatched
    (18) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (21) statement_matched -> . While LParen expression RParen statement_matched
    (23) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (24) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (34) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (38) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (47) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (49) statement_matched -> . Return expression Semi
    (50) statement_matched -> . opt_expression Semi
    (51) statement_matched -> . LBrace block RBrace
    (52) statement_matched -> . Break Semi
    (53) statement_matched -> . Continue Semi
    (19) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (20) statement_unmatched -> . If LParen expression RParen statement
    (22) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (36) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (48) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (54) opt_expression -> . expression
    (55) opt_expression -> . empty
    (58) expression -> . assignment
    (1) empty -> .
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    If              shift and go to state 103
    While           shift and go to state 104
    For             shift and go to state 105
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 95
    Break           shift and go to state 109
    Continue        shift and go to state 110
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 102
    statement_matched              shift and go to state 200
    statement_unmatched            shift and go to state 201
    opt_expression                 shift and go to state 108
    empty                          shift and go to state 111
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 189

    (33) statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .

    RBrace          reduce using rule 33 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    If              reduce using rule 33 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    While           reduce using rule 33 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    For             reduce using rule 33 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Do              reduce using rule 33 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Return          reduce using rule 33 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    LBrace          reduce using rule 33 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Break           reduce using rule 33 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Continue        reduce using rule 33 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Int             reduce using rule 33 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Identifier      reduce using rule 33 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Minus           reduce using rule 33 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    BitNot          reduce using rule 33 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Not             reduce using rule 33 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Integer         reduce using rule 33 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    LParen          reduce using rule 33 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Semi            reduce using rule 33 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Else            reduce using rule 33 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)


state 190

    (35) statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .

    RBrace          reduce using rule 35 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    If              reduce using rule 35 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    While           reduce using rule 35 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    For             reduce using rule 35 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Do              reduce using rule 35 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Return          reduce using rule 35 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    LBrace          reduce using rule 35 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Break           reduce using rule 35 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Continue        reduce using rule 35 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Int             reduce using rule 35 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Identifier      reduce using rule 35 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Minus           reduce using rule 35 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    BitNot          reduce using rule 35 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Not             reduce using rule 35 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Integer         reduce using rule 35 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    LParen          reduce using rule 35 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Semi            reduce using rule 35 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)


state 191

    (29) statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .

    RBrace          reduce using rule 29 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    If              reduce using rule 29 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    While           reduce using rule 29 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    For             reduce using rule 29 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Do              reduce using rule 29 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Return          reduce using rule 29 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    LBrace          reduce using rule 29 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Break           reduce using rule 29 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Continue        reduce using rule 29 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Int             reduce using rule 29 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Identifier      reduce using rule 29 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Minus           reduce using rule 29 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    BitNot          reduce using rule 29 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Not             reduce using rule 29 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Integer         reduce using rule 29 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    LParen          reduce using rule 29 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Semi            reduce using rule 29 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Else            reduce using rule 29 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)


state 192

    (31) statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 31 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    If              reduce using rule 31 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    While           reduce using rule 31 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    For             reduce using rule 31 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Do              reduce using rule 31 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Return          reduce using rule 31 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 31 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Break           reduce using rule 31 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 31 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Int             reduce using rule 31 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 31 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 31 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 31 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Not             reduce using rule 31 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 31 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 31 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 31 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)


state 193

    (27) statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .

    RBrace          reduce using rule 27 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    If              reduce using rule 27 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    While           reduce using rule 27 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    For             reduce using rule 27 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Do              reduce using rule 27 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Return          reduce using rule 27 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    LBrace          reduce using rule 27 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Break           reduce using rule 27 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Continue        reduce using rule 27 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Int             reduce using rule 27 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Identifier      reduce using rule 27 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Minus           reduce using rule 27 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    BitNot          reduce using rule 27 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Not             reduce using rule 27 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Integer         reduce using rule 27 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    LParen          reduce using rule 27 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Semi            reduce using rule 27 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Else            reduce using rule 27 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)


state 194

    (28) statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 28 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    If              reduce using rule 28 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    While           reduce using rule 28 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    For             reduce using rule 28 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Do              reduce using rule 28 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Return          reduce using rule 28 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 28 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Break           reduce using rule 28 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 28 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Int             reduce using rule 28 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 28 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 28 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 28 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Not             reduce using rule 28 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 28 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 28 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 28 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)


state 195

    (30) statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .

    RBrace          reduce using rule 30 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    If              reduce using rule 30 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    While           reduce using rule 30 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    For             reduce using rule 30 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Do              reduce using rule 30 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Return          reduce using rule 30 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    LBrace          reduce using rule 30 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Break           reduce using rule 30 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Continue        reduce using rule 30 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Int             reduce using rule 30 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Identifier      reduce using rule 30 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Minus           reduce using rule 30 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    BitNot          reduce using rule 30 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Not             reduce using rule 30 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Integer         reduce using rule 30 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    LParen          reduce using rule 30 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Semi            reduce using rule 30 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Else            reduce using rule 30 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)


state 196

    (32) statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 32 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    If              reduce using rule 32 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    While           reduce using rule 32 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    For             reduce using rule 32 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Do              reduce using rule 32 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Return          reduce using rule 32 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 32 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Break           reduce using rule 32 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 32 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Int             reduce using rule 32 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 32 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 32 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 32 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Not             reduce using rule 32 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 32 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 32 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 32 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)


state 197

    (24) statement_matched -> For LParen declaration Semi expression Semi expression RParen . statement_matched
    (26) statement_unmatched -> For LParen declaration Semi expression Semi expression RParen . statement_unmatched
    (18) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (21) statement_matched -> . While LParen expression RParen statement_matched
    (23) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (24) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (34) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (38) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (47) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (49) statement_matched -> . Return expression Semi
    (50) statement_matched -> . opt_expression Semi
    (51) statement_matched -> . LBrace block RBrace
    (52) statement_matched -> . Break Semi
    (53) statement_matched -> . Continue Semi
    (19) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (20) statement_unmatched -> . If LParen expression RParen statement
    (22) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (36) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (48) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (54) opt_expression -> . expression
    (55) opt_expression -> . empty
    (58) expression -> . assignment
    (1) empty -> .
    (59) assignment -> . conditional
    (80) assignment -> . Identifier Assign expression
    (60) conditional -> . logical_or
    (97) conditional -> . logical_or Question expression Colon conditional
    (61) logical_or -> . logical_and
    (81) logical_or -> . logical_or Or logical_and
    (62) logical_and -> . bit_or
    (82) logical_and -> . logical_and And bit_or
    (63) bit_or -> . xor
    (83) bit_or -> . bit_or BitOr xor
    (64) xor -> . bit_and
    (84) xor -> . xor Xor bit_and
    (65) bit_and -> . equality
    (85) bit_and -> . bit_and BitAnd equality
    (66) equality -> . relational
    (86) equality -> . equality NotEqual relational
    (87) equality -> . equality Equal relational
    (67) relational -> . additive
    (88) relational -> . relational Less additive
    (89) relational -> . relational Greater additive
    (90) relational -> . relational LessEqual additive
    (91) relational -> . relational GreaterEqual additive
    (68) additive -> . multiplicative
    (92) additive -> . additive Plus multiplicative
    (93) additive -> . additive Minus multiplicative
    (69) multiplicative -> . unary
    (94) multiplicative -> . multiplicative Mul unary
    (95) multiplicative -> . multiplicative Div unary
    (96) multiplicative -> . multiplicative Mod unary
    (70) unary -> . postfix
    (72) unary -> . Minus unary
    (73) unary -> . BitNot unary
    (74) unary -> . Not unary
    (71) postfix -> . primary
    (75) postfix -> . Identifier LParen arguments RParen
    (98) primary -> . Integer
    (99) primary -> . Identifier
    (100) primary -> . LParen expression RParen

    If              shift and go to state 103
    While           shift and go to state 104
    For             shift and go to state 105
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 95
    Break           shift and go to state 109
    Continue        shift and go to state 110
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 102
    statement_matched              shift and go to state 202
    statement_unmatched            shift and go to state 203
    opt_expression                 shift and go to state 108
    empty                          shift and go to state 111
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 198

    (34) statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .

    RBrace          reduce using rule 34 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    If              reduce using rule 34 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    While           reduce using rule 34 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    For             reduce using rule 34 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Do              reduce using rule 34 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Return          reduce using rule 34 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    LBrace          reduce using rule 34 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Break           reduce using rule 34 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Continue        reduce using rule 34 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Int             reduce using rule 34 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Identifier      reduce using rule 34 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Minus           reduce using rule 34 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    BitNot          reduce using rule 34 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Not             reduce using rule 34 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Integer         reduce using rule 34 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    LParen          reduce using rule 34 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Semi            reduce using rule 34 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Else            reduce using rule 34 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)


state 199

    (36) statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .

    RBrace          reduce using rule 36 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    If              reduce using rule 36 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    While           reduce using rule 36 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    For             reduce using rule 36 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Do              reduce using rule 36 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Return          reduce using rule 36 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    LBrace          reduce using rule 36 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Break           reduce using rule 36 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Continue        reduce using rule 36 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Int             reduce using rule 36 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Identifier      reduce using rule 36 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Minus           reduce using rule 36 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    BitNot          reduce using rule 36 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Not             reduce using rule 36 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Integer         reduce using rule 36 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    LParen          reduce using rule 36 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Semi            reduce using rule 36 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)


state 200

    (23) statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .

    RBrace          reduce using rule 23 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    If              reduce using rule 23 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    While           reduce using rule 23 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    For             reduce using rule 23 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Do              reduce using rule 23 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Return          reduce using rule 23 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    LBrace          reduce using rule 23 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Break           reduce using rule 23 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Continue        reduce using rule 23 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Int             reduce using rule 23 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Identifier      reduce using rule 23 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Minus           reduce using rule 23 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    BitNot          reduce using rule 23 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Not             reduce using rule 23 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Integer         reduce using rule 23 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    LParen          reduce using rule 23 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Semi            reduce using rule 23 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Else            reduce using rule 23 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)


state 201

    (25) statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 25 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    If              reduce using rule 25 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    While           reduce using rule 25 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    For             reduce using rule 25 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Do              reduce using rule 25 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Return          reduce using rule 25 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 25 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Break           reduce using rule 25 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 25 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Int             reduce using rule 25 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 25 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 25 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 25 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Not             reduce using rule 25 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 25 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 25 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 25 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)


state 202

    (24) statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .

    RBrace          reduce using rule 24 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    If              reduce using rule 24 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    While           reduce using rule 24 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    For             reduce using rule 24 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Do              reduce using rule 24 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Return          reduce using rule 24 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    LBrace          reduce using rule 24 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Break           reduce using rule 24 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Continue        reduce using rule 24 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Int             reduce using rule 24 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Identifier      reduce using rule 24 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Minus           reduce using rule 24 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    BitNot          reduce using rule 24 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Not             reduce using rule 24 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Integer         reduce using rule 24 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    LParen          reduce using rule 24 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Semi            reduce using rule 24 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Else            reduce using rule 24 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)


state 203

    (26) statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 26 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    If              reduce using rule 26 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    While           reduce using rule 26 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    For             reduce using rule 26 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Do              reduce using rule 26 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Return          reduce using rule 26 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 26 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Break           reduce using rule 26 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 26 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Int             reduce using rule 26 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 26 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 26 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 26 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Not             reduce using rule 26 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 26 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 26 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 26 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LParen in state 13 resolved as shift
WARNING: shift/reduce conflict for Minus in state 24 resolved as shift
WARNING: shift/reduce conflict for LParen in state 59 resolved as shift
WARNING: shift/reduce conflict for Minus in state 78 resolved as shift
WARNING: shift/reduce conflict for Minus in state 79 resolved as shift
WARNING: shift/reduce conflict for Minus in state 80 resolved as shift
WARNING: shift/reduce conflict for Minus in state 81 resolved as shift
