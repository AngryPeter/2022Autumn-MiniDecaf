Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> program function
Rule 3     program -> empty
Rule 4     type -> Int
Rule 5     function -> type Identifier LParen params RParen LBrace block RBrace
Rule 6     params -> empty
Rule 7     params -> params param_item
Rule 8     param_item -> declaration
Rule 9     param_item -> Comma declaration
Rule 10    block -> block block_item
Rule 11    block -> empty
Rule 12    block_item -> statement
Rule 13    block_item -> declaration Semi
Rule 14    statement -> statement_matched
Rule 15    statement -> statement_unmatched
Rule 16    statement_matched -> If LParen expression RParen statement_matched Else statement_matched
Rule 17    statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched
Rule 18    statement_unmatched -> If LParen expression RParen statement
Rule 19    statement_matched -> While LParen expression RParen statement_matched
Rule 20    statement_unmatched -> While LParen expression RParen statement_unmatched
Rule 21    statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched
Rule 22    statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched
Rule 23    statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched
Rule 24    statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched
Rule 25    statement_matched -> For LParen Semi expression Semi expression RParen statement_matched
Rule 26    statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched
Rule 27    statement_matched -> For LParen expression Semi Semi expression RParen statement_matched
Rule 28    statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched
Rule 29    statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched
Rule 30    statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched
Rule 31    statement_matched -> For LParen expression Semi expression Semi RParen statement_matched
Rule 32    statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched
Rule 33    statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched
Rule 34    statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched
Rule 35    statement_matched -> For LParen expression Semi Semi RParen statement_matched
Rule 36    statement_matched -> For LParen declaration Semi Semi RParen statement_matched
Rule 37    statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched
Rule 38    statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched
Rule 39    statement_matched -> For LParen Semi expression Semi RParen statement_matched
Rule 40    statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched
Rule 41    statement_matched -> For LParen Semi Semi expression RParen statement_matched
Rule 42    statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched
Rule 43    statement_matched -> For LParen Semi Semi RParen statement_matched
Rule 44    statement_unmatched -> For LParen Semi Semi RParen statement_unmatched
Rule 45    statement_matched -> Do statement_matched While LParen expression RParen Semi
Rule 46    statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi
Rule 47    statement_matched -> Return expression Semi
Rule 48    statement_matched -> opt_expression Semi
Rule 49    statement_matched -> LBrace block RBrace
Rule 50    statement_matched -> Break Semi
Rule 51    statement_matched -> Continue Semi
Rule 52    opt_expression -> expression
Rule 53    opt_expression -> empty
Rule 54    declaration -> type Identifier
Rule 55    declaration -> type Identifier Assign expression
Rule 56    expression -> assignment
Rule 57    assignment -> conditional
Rule 58    conditional -> logical_or
Rule 59    logical_or -> logical_and
Rule 60    logical_and -> bit_or
Rule 61    bit_or -> xor
Rule 62    xor -> bit_and
Rule 63    bit_and -> equality
Rule 64    equality -> relational
Rule 65    relational -> additive
Rule 66    additive -> multiplicative
Rule 67    multiplicative -> unary
Rule 68    unary -> postfix
Rule 69    postfix -> primary
Rule 70    unary -> Minus unary
Rule 71    unary -> BitNot unary
Rule 72    unary -> Not unary
Rule 73    postfix -> Identifier LParen arguments RParen
Rule 74    arguments -> empty
Rule 75    arguments -> arguments argument_item
Rule 76    argument_item -> Comma expression
Rule 77    argument_item -> expression
Rule 78    assignment -> Identifier Assign expression
Rule 79    logical_or -> logical_or Or logical_and
Rule 80    logical_and -> logical_and And bit_or
Rule 81    bit_or -> bit_or BitOr xor
Rule 82    xor -> xor Xor bit_and
Rule 83    bit_and -> bit_and BitAnd equality
Rule 84    equality -> equality NotEqual relational
Rule 85    equality -> equality Equal relational
Rule 86    relational -> relational Less additive
Rule 87    relational -> relational Greater additive
Rule 88    relational -> relational LessEqual additive
Rule 89    relational -> relational GreaterEqual additive
Rule 90    additive -> additive Plus multiplicative
Rule 91    additive -> additive Minus multiplicative
Rule 92    multiplicative -> multiplicative Mul unary
Rule 93    multiplicative -> multiplicative Div unary
Rule 94    multiplicative -> multiplicative Mod unary
Rule 95    conditional -> logical_or Question expression Colon conditional
Rule 96    primary -> Integer
Rule 97    primary -> Identifier
Rule 98    primary -> LParen expression RParen

Terminals, with rules where they appear

And                  : 80
Assign               : 55 78
BitAnd               : 83
BitNot               : 71
BitOr                : 81
Break                : 50
Colon                : 95
Comma                : 9 76
Continue             : 51
Div                  : 93
Do                   : 45 46
Else                 : 16 17
Equal                : 85
For                  : 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44
Greater              : 87
GreaterEqual         : 89
Identifier           : 5 54 55 73 78 97
If                   : 16 17 18
Int                  : 4
Integer              : 96
LBrace               : 5 49
LParen               : 5 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 73 98
Less                 : 86
LessEqual            : 88
Minus                : 70 91
Mod                  : 94
Mul                  : 92
Not                  : 72
NotEqual             : 84
Or                   : 79
Plus                 : 90
Question             : 95
RBrace               : 5 49
RParen               : 5 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 73 98
Return               : 47
Semi                 : 13 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 46 47 48 50 51
While                : 19 20 45 46
Xor                  : 82
error                : 

Nonterminals, with rules where they appear

additive             : 65 86 87 88 89 90 91
argument_item        : 75
arguments            : 73 75
assignment           : 56
bit_and              : 62 82 83
bit_or               : 60 80 81
block                : 5 10 49
block_item           : 10
conditional          : 57 95
declaration          : 8 9 13 22 24 28 30 32 34 36 38
empty                : 3 6 11 53 74
equality             : 63 83 84 85
expression           : 16 17 18 19 20 21 21 21 22 22 23 23 23 24 24 25 25 26 26 27 27 28 29 29 30 31 31 32 33 33 34 35 37 39 40 41 42 45 46 47 52 55 76 77 78 95 98
function             : 2
logical_and          : 59 79 80
logical_or           : 58 79 95
multiplicative       : 66 90 91 92 93 94
opt_expression       : 48
param_item           : 7
params               : 5 7
postfix              : 68
primary              : 69
program              : 2 0
relational           : 64 84 85 86 87 88 89
statement            : 12 18
statement_matched    : 14 16 16 17 19 21 22 25 27 28 31 32 35 36 39 41 43 45
statement_unmatched  : 15 17 20 23 24 26 29 30 33 34 37 38 40 42 44 46
type                 : 5 54 55
unary                : 67 70 71 72 92 93 94
xor                  : 61 81 82

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . program function
    (3) program -> . empty
    (1) empty -> .

    Int             reduce using rule 1 (empty -> .)
    $end            reduce using rule 1 (empty -> .)

    program                        shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> program .
    (2) program -> program . function
    (5) function -> . type Identifier LParen params RParen LBrace block RBrace
    (4) type -> . Int

    Int             shift and go to state 5

    function                       shift and go to state 3
    type                           shift and go to state 4

state 2

    (3) program -> empty .

    Int             reduce using rule 3 (program -> empty .)
    $end            reduce using rule 3 (program -> empty .)


state 3

    (2) program -> program function .

    Int             reduce using rule 2 (program -> program function .)
    $end            reduce using rule 2 (program -> program function .)


state 4

    (5) function -> type . Identifier LParen params RParen LBrace block RBrace

    Identifier      shift and go to state 6


state 5

    (4) type -> Int .

    Identifier      reduce using rule 4 (type -> Int .)


state 6

    (5) function -> type Identifier . LParen params RParen LBrace block RBrace

    LParen          shift and go to state 7


state 7

    (5) function -> type Identifier LParen . params RParen LBrace block RBrace
    (6) params -> . empty
    (7) params -> . params param_item
    (1) empty -> .

    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)

    params                         shift and go to state 8
    empty                          shift and go to state 9

state 8

    (5) function -> type Identifier LParen params . RParen LBrace block RBrace
    (7) params -> params . param_item
    (8) param_item -> . declaration
    (9) param_item -> . Comma declaration
    (54) declaration -> . type Identifier
    (55) declaration -> . type Identifier Assign expression
    (4) type -> . Int

    RParen          shift and go to state 11
    Comma           shift and go to state 14
    Int             shift and go to state 5

    type                           shift and go to state 10
    param_item                     shift and go to state 12
    declaration                    shift and go to state 13

state 9

    (6) params -> empty .

    RParen          reduce using rule 6 (params -> empty .)
    Comma           reduce using rule 6 (params -> empty .)
    Int             reduce using rule 6 (params -> empty .)


state 10

    (54) declaration -> type . Identifier
    (55) declaration -> type . Identifier Assign expression

    Identifier      shift and go to state 15


state 11

    (5) function -> type Identifier LParen params RParen . LBrace block RBrace

    LBrace          shift and go to state 16


state 12

    (7) params -> params param_item .

    RParen          reduce using rule 7 (params -> params param_item .)
    Comma           reduce using rule 7 (params -> params param_item .)
    Int             reduce using rule 7 (params -> params param_item .)


state 13

    (8) param_item -> declaration .

    RParen          reduce using rule 8 (param_item -> declaration .)
    Comma           reduce using rule 8 (param_item -> declaration .)
    Int             reduce using rule 8 (param_item -> declaration .)


state 14

    (9) param_item -> Comma . declaration
    (54) declaration -> . type Identifier
    (55) declaration -> . type Identifier Assign expression
    (4) type -> . Int

    Int             shift and go to state 5

    declaration                    shift and go to state 17
    type                           shift and go to state 10

state 15

    (54) declaration -> type Identifier .
    (55) declaration -> type Identifier . Assign expression

    RParen          reduce using rule 54 (declaration -> type Identifier .)
    Comma           reduce using rule 54 (declaration -> type Identifier .)
    Int             reduce using rule 54 (declaration -> type Identifier .)
    Semi            reduce using rule 54 (declaration -> type Identifier .)
    Assign          shift and go to state 18


state 16

    (5) function -> type Identifier LParen params RParen LBrace . block RBrace
    (10) block -> . block block_item
    (11) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 19
    empty                          shift and go to state 20

state 17

    (9) param_item -> Comma declaration .

    RParen          reduce using rule 9 (param_item -> Comma declaration .)
    Comma           reduce using rule 9 (param_item -> Comma declaration .)
    Int             reduce using rule 9 (param_item -> Comma declaration .)


state 18

    (55) declaration -> type Identifier Assign . expression
    (56) expression -> . assignment
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 22
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 19

    (5) function -> type Identifier LParen params RParen LBrace block . RBrace
    (10) block -> block . block_item
    (12) block_item -> . statement
    (13) block_item -> . declaration Semi
    (14) statement -> . statement_matched
    (15) statement -> . statement_unmatched
    (54) declaration -> . type Identifier
    (55) declaration -> . type Identifier Assign expression
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (25) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (28) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (39) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (45) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (47) statement_matched -> . Return expression Semi
    (48) statement_matched -> . opt_expression Semi
    (49) statement_matched -> . LBrace block RBrace
    (50) statement_matched -> . Break Semi
    (51) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (46) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (4) type -> . Int
    (52) opt_expression -> . expression
    (53) opt_expression -> . empty
    (56) expression -> . assignment
    (1) empty -> .
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    RBrace          shift and go to state 43
    If              shift and go to state 50
    While           shift and go to state 51
    For             shift and go to state 52
    Do              shift and go to state 53
    Return          shift and go to state 54
    LBrace          shift and go to state 42
    Break           shift and go to state 56
    Continue        shift and go to state 57
    Int             shift and go to state 5
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    type                           shift and go to state 10
    block_item                     shift and go to state 44
    statement                      shift and go to state 45
    declaration                    shift and go to state 46
    statement_matched              shift and go to state 47
    statement_unmatched            shift and go to state 48
    expression                     shift and go to state 49
    opt_expression                 shift and go to state 55
    empty                          shift and go to state 58
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 20

    (11) block -> empty .

    RBrace          reduce using rule 11 (block -> empty .)
    If              reduce using rule 11 (block -> empty .)
    While           reduce using rule 11 (block -> empty .)
    For             reduce using rule 11 (block -> empty .)
    Do              reduce using rule 11 (block -> empty .)
    Return          reduce using rule 11 (block -> empty .)
    LBrace          reduce using rule 11 (block -> empty .)
    Break           reduce using rule 11 (block -> empty .)
    Continue        reduce using rule 11 (block -> empty .)
    Int             reduce using rule 11 (block -> empty .)
    Identifier      reduce using rule 11 (block -> empty .)
    Minus           reduce using rule 11 (block -> empty .)
    BitNot          reduce using rule 11 (block -> empty .)
    Not             reduce using rule 11 (block -> empty .)
    Integer         reduce using rule 11 (block -> empty .)
    LParen          reduce using rule 11 (block -> empty .)
    Semi            reduce using rule 11 (block -> empty .)


state 21

    (78) assignment -> Identifier . Assign expression
    (73) postfix -> Identifier . LParen arguments RParen
    (97) primary -> Identifier .

  ! shift/reduce conflict for LParen resolved as shift
    Assign          shift and go to state 59
    LParen          shift and go to state 60
    Mul             reduce using rule 97 (primary -> Identifier .)
    Div             reduce using rule 97 (primary -> Identifier .)
    Mod             reduce using rule 97 (primary -> Identifier .)
    Plus            reduce using rule 97 (primary -> Identifier .)
    Minus           reduce using rule 97 (primary -> Identifier .)
    Less            reduce using rule 97 (primary -> Identifier .)
    Greater         reduce using rule 97 (primary -> Identifier .)
    LessEqual       reduce using rule 97 (primary -> Identifier .)
    GreaterEqual    reduce using rule 97 (primary -> Identifier .)
    NotEqual        reduce using rule 97 (primary -> Identifier .)
    Equal           reduce using rule 97 (primary -> Identifier .)
    BitAnd          reduce using rule 97 (primary -> Identifier .)
    Xor             reduce using rule 97 (primary -> Identifier .)
    BitOr           reduce using rule 97 (primary -> Identifier .)
    And             reduce using rule 97 (primary -> Identifier .)
    Question        reduce using rule 97 (primary -> Identifier .)
    Or              reduce using rule 97 (primary -> Identifier .)
    RParen          reduce using rule 97 (primary -> Identifier .)
    Comma           reduce using rule 97 (primary -> Identifier .)
    Int             reduce using rule 97 (primary -> Identifier .)
    Semi            reduce using rule 97 (primary -> Identifier .)
    Colon           reduce using rule 97 (primary -> Identifier .)
    Identifier      reduce using rule 97 (primary -> Identifier .)
    BitNot          reduce using rule 97 (primary -> Identifier .)
    Not             reduce using rule 97 (primary -> Identifier .)
    Integer         reduce using rule 97 (primary -> Identifier .)

  ! LParen          [ reduce using rule 97 (primary -> Identifier .) ]


state 22

    (55) declaration -> type Identifier Assign expression .

    RParen          reduce using rule 55 (declaration -> type Identifier Assign expression .)
    Comma           reduce using rule 55 (declaration -> type Identifier Assign expression .)
    Int             reduce using rule 55 (declaration -> type Identifier Assign expression .)
    Semi            reduce using rule 55 (declaration -> type Identifier Assign expression .)


state 23

    (56) expression -> assignment .

    RParen          reduce using rule 56 (expression -> assignment .)
    Comma           reduce using rule 56 (expression -> assignment .)
    Int             reduce using rule 56 (expression -> assignment .)
    Semi            reduce using rule 56 (expression -> assignment .)
    Colon           reduce using rule 56 (expression -> assignment .)
    Identifier      reduce using rule 56 (expression -> assignment .)
    Minus           reduce using rule 56 (expression -> assignment .)
    BitNot          reduce using rule 56 (expression -> assignment .)
    Not             reduce using rule 56 (expression -> assignment .)
    Integer         reduce using rule 56 (expression -> assignment .)
    LParen          reduce using rule 56 (expression -> assignment .)


state 24

    (57) assignment -> conditional .

    RParen          reduce using rule 57 (assignment -> conditional .)
    Comma           reduce using rule 57 (assignment -> conditional .)
    Int             reduce using rule 57 (assignment -> conditional .)
    Semi            reduce using rule 57 (assignment -> conditional .)
    Colon           reduce using rule 57 (assignment -> conditional .)
    Identifier      reduce using rule 57 (assignment -> conditional .)
    Minus           reduce using rule 57 (assignment -> conditional .)
    BitNot          reduce using rule 57 (assignment -> conditional .)
    Not             reduce using rule 57 (assignment -> conditional .)
    Integer         reduce using rule 57 (assignment -> conditional .)
    LParen          reduce using rule 57 (assignment -> conditional .)


state 25

    (58) conditional -> logical_or .
    (95) conditional -> logical_or . Question expression Colon conditional
    (79) logical_or -> logical_or . Or logical_and

    RParen          reduce using rule 58 (conditional -> logical_or .)
    Comma           reduce using rule 58 (conditional -> logical_or .)
    Int             reduce using rule 58 (conditional -> logical_or .)
    Semi            reduce using rule 58 (conditional -> logical_or .)
    Colon           reduce using rule 58 (conditional -> logical_or .)
    Identifier      reduce using rule 58 (conditional -> logical_or .)
    Minus           reduce using rule 58 (conditional -> logical_or .)
    BitNot          reduce using rule 58 (conditional -> logical_or .)
    Not             reduce using rule 58 (conditional -> logical_or .)
    Integer         reduce using rule 58 (conditional -> logical_or .)
    LParen          reduce using rule 58 (conditional -> logical_or .)
    Question        shift and go to state 61
    Or              shift and go to state 62


state 26

    (59) logical_or -> logical_and .
    (80) logical_and -> logical_and . And bit_or

    Question        reduce using rule 59 (logical_or -> logical_and .)
    Or              reduce using rule 59 (logical_or -> logical_and .)
    RParen          reduce using rule 59 (logical_or -> logical_and .)
    Comma           reduce using rule 59 (logical_or -> logical_and .)
    Int             reduce using rule 59 (logical_or -> logical_and .)
    Semi            reduce using rule 59 (logical_or -> logical_and .)
    Colon           reduce using rule 59 (logical_or -> logical_and .)
    Identifier      reduce using rule 59 (logical_or -> logical_and .)
    Minus           reduce using rule 59 (logical_or -> logical_and .)
    BitNot          reduce using rule 59 (logical_or -> logical_and .)
    Not             reduce using rule 59 (logical_or -> logical_and .)
    Integer         reduce using rule 59 (logical_or -> logical_and .)
    LParen          reduce using rule 59 (logical_or -> logical_and .)
    And             shift and go to state 63


state 27

    (60) logical_and -> bit_or .
    (81) bit_or -> bit_or . BitOr xor

    And             reduce using rule 60 (logical_and -> bit_or .)
    Question        reduce using rule 60 (logical_and -> bit_or .)
    Or              reduce using rule 60 (logical_and -> bit_or .)
    RParen          reduce using rule 60 (logical_and -> bit_or .)
    Comma           reduce using rule 60 (logical_and -> bit_or .)
    Int             reduce using rule 60 (logical_and -> bit_or .)
    Semi            reduce using rule 60 (logical_and -> bit_or .)
    Colon           reduce using rule 60 (logical_and -> bit_or .)
    Identifier      reduce using rule 60 (logical_and -> bit_or .)
    Minus           reduce using rule 60 (logical_and -> bit_or .)
    BitNot          reduce using rule 60 (logical_and -> bit_or .)
    Not             reduce using rule 60 (logical_and -> bit_or .)
    Integer         reduce using rule 60 (logical_and -> bit_or .)
    LParen          reduce using rule 60 (logical_and -> bit_or .)
    BitOr           shift and go to state 64


state 28

    (61) bit_or -> xor .
    (82) xor -> xor . Xor bit_and

    BitOr           reduce using rule 61 (bit_or -> xor .)
    And             reduce using rule 61 (bit_or -> xor .)
    Question        reduce using rule 61 (bit_or -> xor .)
    Or              reduce using rule 61 (bit_or -> xor .)
    RParen          reduce using rule 61 (bit_or -> xor .)
    Comma           reduce using rule 61 (bit_or -> xor .)
    Int             reduce using rule 61 (bit_or -> xor .)
    Semi            reduce using rule 61 (bit_or -> xor .)
    Colon           reduce using rule 61 (bit_or -> xor .)
    Identifier      reduce using rule 61 (bit_or -> xor .)
    Minus           reduce using rule 61 (bit_or -> xor .)
    BitNot          reduce using rule 61 (bit_or -> xor .)
    Not             reduce using rule 61 (bit_or -> xor .)
    Integer         reduce using rule 61 (bit_or -> xor .)
    LParen          reduce using rule 61 (bit_or -> xor .)
    Xor             shift and go to state 65


state 29

    (62) xor -> bit_and .
    (83) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 62 (xor -> bit_and .)
    BitOr           reduce using rule 62 (xor -> bit_and .)
    And             reduce using rule 62 (xor -> bit_and .)
    Question        reduce using rule 62 (xor -> bit_and .)
    Or              reduce using rule 62 (xor -> bit_and .)
    RParen          reduce using rule 62 (xor -> bit_and .)
    Comma           reduce using rule 62 (xor -> bit_and .)
    Int             reduce using rule 62 (xor -> bit_and .)
    Semi            reduce using rule 62 (xor -> bit_and .)
    Colon           reduce using rule 62 (xor -> bit_and .)
    Identifier      reduce using rule 62 (xor -> bit_and .)
    Minus           reduce using rule 62 (xor -> bit_and .)
    BitNot          reduce using rule 62 (xor -> bit_and .)
    Not             reduce using rule 62 (xor -> bit_and .)
    Integer         reduce using rule 62 (xor -> bit_and .)
    LParen          reduce using rule 62 (xor -> bit_and .)
    BitAnd          shift and go to state 66


state 30

    (63) bit_and -> equality .
    (84) equality -> equality . NotEqual relational
    (85) equality -> equality . Equal relational

    BitAnd          reduce using rule 63 (bit_and -> equality .)
    Xor             reduce using rule 63 (bit_and -> equality .)
    BitOr           reduce using rule 63 (bit_and -> equality .)
    And             reduce using rule 63 (bit_and -> equality .)
    Question        reduce using rule 63 (bit_and -> equality .)
    Or              reduce using rule 63 (bit_and -> equality .)
    RParen          reduce using rule 63 (bit_and -> equality .)
    Comma           reduce using rule 63 (bit_and -> equality .)
    Int             reduce using rule 63 (bit_and -> equality .)
    Semi            reduce using rule 63 (bit_and -> equality .)
    Colon           reduce using rule 63 (bit_and -> equality .)
    Identifier      reduce using rule 63 (bit_and -> equality .)
    Minus           reduce using rule 63 (bit_and -> equality .)
    BitNot          reduce using rule 63 (bit_and -> equality .)
    Not             reduce using rule 63 (bit_and -> equality .)
    Integer         reduce using rule 63 (bit_and -> equality .)
    LParen          reduce using rule 63 (bit_and -> equality .)
    NotEqual        shift and go to state 67
    Equal           shift and go to state 68


state 31

    (64) equality -> relational .
    (86) relational -> relational . Less additive
    (87) relational -> relational . Greater additive
    (88) relational -> relational . LessEqual additive
    (89) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 64 (equality -> relational .)
    Equal           reduce using rule 64 (equality -> relational .)
    BitAnd          reduce using rule 64 (equality -> relational .)
    Xor             reduce using rule 64 (equality -> relational .)
    BitOr           reduce using rule 64 (equality -> relational .)
    And             reduce using rule 64 (equality -> relational .)
    Question        reduce using rule 64 (equality -> relational .)
    Or              reduce using rule 64 (equality -> relational .)
    RParen          reduce using rule 64 (equality -> relational .)
    Comma           reduce using rule 64 (equality -> relational .)
    Int             reduce using rule 64 (equality -> relational .)
    Semi            reduce using rule 64 (equality -> relational .)
    Colon           reduce using rule 64 (equality -> relational .)
    Identifier      reduce using rule 64 (equality -> relational .)
    Minus           reduce using rule 64 (equality -> relational .)
    BitNot          reduce using rule 64 (equality -> relational .)
    Not             reduce using rule 64 (equality -> relational .)
    Integer         reduce using rule 64 (equality -> relational .)
    LParen          reduce using rule 64 (equality -> relational .)
    Less            shift and go to state 69
    Greater         shift and go to state 70
    LessEqual       shift and go to state 71
    GreaterEqual    shift and go to state 72


state 32

    (65) relational -> additive .
    (90) additive -> additive . Plus multiplicative
    (91) additive -> additive . Minus multiplicative

  ! shift/reduce conflict for Minus resolved as shift
    Less            reduce using rule 65 (relational -> additive .)
    Greater         reduce using rule 65 (relational -> additive .)
    LessEqual       reduce using rule 65 (relational -> additive .)
    GreaterEqual    reduce using rule 65 (relational -> additive .)
    NotEqual        reduce using rule 65 (relational -> additive .)
    Equal           reduce using rule 65 (relational -> additive .)
    BitAnd          reduce using rule 65 (relational -> additive .)
    Xor             reduce using rule 65 (relational -> additive .)
    BitOr           reduce using rule 65 (relational -> additive .)
    And             reduce using rule 65 (relational -> additive .)
    Question        reduce using rule 65 (relational -> additive .)
    Or              reduce using rule 65 (relational -> additive .)
    RParen          reduce using rule 65 (relational -> additive .)
    Comma           reduce using rule 65 (relational -> additive .)
    Int             reduce using rule 65 (relational -> additive .)
    Semi            reduce using rule 65 (relational -> additive .)
    Colon           reduce using rule 65 (relational -> additive .)
    Identifier      reduce using rule 65 (relational -> additive .)
    BitNot          reduce using rule 65 (relational -> additive .)
    Not             reduce using rule 65 (relational -> additive .)
    Integer         reduce using rule 65 (relational -> additive .)
    LParen          reduce using rule 65 (relational -> additive .)
    Plus            shift and go to state 73
    Minus           shift and go to state 74

  ! Minus           [ reduce using rule 65 (relational -> additive .) ]


state 33

    (66) additive -> multiplicative .
    (92) multiplicative -> multiplicative . Mul unary
    (93) multiplicative -> multiplicative . Div unary
    (94) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 66 (additive -> multiplicative .)
    Minus           reduce using rule 66 (additive -> multiplicative .)
    Less            reduce using rule 66 (additive -> multiplicative .)
    Greater         reduce using rule 66 (additive -> multiplicative .)
    LessEqual       reduce using rule 66 (additive -> multiplicative .)
    GreaterEqual    reduce using rule 66 (additive -> multiplicative .)
    NotEqual        reduce using rule 66 (additive -> multiplicative .)
    Equal           reduce using rule 66 (additive -> multiplicative .)
    BitAnd          reduce using rule 66 (additive -> multiplicative .)
    Xor             reduce using rule 66 (additive -> multiplicative .)
    BitOr           reduce using rule 66 (additive -> multiplicative .)
    And             reduce using rule 66 (additive -> multiplicative .)
    Question        reduce using rule 66 (additive -> multiplicative .)
    Or              reduce using rule 66 (additive -> multiplicative .)
    RParen          reduce using rule 66 (additive -> multiplicative .)
    Comma           reduce using rule 66 (additive -> multiplicative .)
    Int             reduce using rule 66 (additive -> multiplicative .)
    Semi            reduce using rule 66 (additive -> multiplicative .)
    Colon           reduce using rule 66 (additive -> multiplicative .)
    Identifier      reduce using rule 66 (additive -> multiplicative .)
    BitNot          reduce using rule 66 (additive -> multiplicative .)
    Not             reduce using rule 66 (additive -> multiplicative .)
    Integer         reduce using rule 66 (additive -> multiplicative .)
    LParen          reduce using rule 66 (additive -> multiplicative .)
    Mul             shift and go to state 75
    Div             shift and go to state 76
    Mod             shift and go to state 77


state 34

    (70) unary -> Minus . unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 79
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    unary                          shift and go to state 78
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 35

    (67) multiplicative -> unary .

    Mul             reduce using rule 67 (multiplicative -> unary .)
    Div             reduce using rule 67 (multiplicative -> unary .)
    Mod             reduce using rule 67 (multiplicative -> unary .)
    Plus            reduce using rule 67 (multiplicative -> unary .)
    Minus           reduce using rule 67 (multiplicative -> unary .)
    Less            reduce using rule 67 (multiplicative -> unary .)
    Greater         reduce using rule 67 (multiplicative -> unary .)
    LessEqual       reduce using rule 67 (multiplicative -> unary .)
    GreaterEqual    reduce using rule 67 (multiplicative -> unary .)
    NotEqual        reduce using rule 67 (multiplicative -> unary .)
    Equal           reduce using rule 67 (multiplicative -> unary .)
    BitAnd          reduce using rule 67 (multiplicative -> unary .)
    Xor             reduce using rule 67 (multiplicative -> unary .)
    BitOr           reduce using rule 67 (multiplicative -> unary .)
    And             reduce using rule 67 (multiplicative -> unary .)
    Question        reduce using rule 67 (multiplicative -> unary .)
    Or              reduce using rule 67 (multiplicative -> unary .)
    RParen          reduce using rule 67 (multiplicative -> unary .)
    Comma           reduce using rule 67 (multiplicative -> unary .)
    Int             reduce using rule 67 (multiplicative -> unary .)
    Semi            reduce using rule 67 (multiplicative -> unary .)
    Colon           reduce using rule 67 (multiplicative -> unary .)
    Identifier      reduce using rule 67 (multiplicative -> unary .)
    BitNot          reduce using rule 67 (multiplicative -> unary .)
    Not             reduce using rule 67 (multiplicative -> unary .)
    Integer         reduce using rule 67 (multiplicative -> unary .)
    LParen          reduce using rule 67 (multiplicative -> unary .)


state 36

    (68) unary -> postfix .

    Mul             reduce using rule 68 (unary -> postfix .)
    Div             reduce using rule 68 (unary -> postfix .)
    Mod             reduce using rule 68 (unary -> postfix .)
    Plus            reduce using rule 68 (unary -> postfix .)
    Minus           reduce using rule 68 (unary -> postfix .)
    Less            reduce using rule 68 (unary -> postfix .)
    Greater         reduce using rule 68 (unary -> postfix .)
    LessEqual       reduce using rule 68 (unary -> postfix .)
    GreaterEqual    reduce using rule 68 (unary -> postfix .)
    NotEqual        reduce using rule 68 (unary -> postfix .)
    Equal           reduce using rule 68 (unary -> postfix .)
    BitAnd          reduce using rule 68 (unary -> postfix .)
    Xor             reduce using rule 68 (unary -> postfix .)
    BitOr           reduce using rule 68 (unary -> postfix .)
    And             reduce using rule 68 (unary -> postfix .)
    Question        reduce using rule 68 (unary -> postfix .)
    Or              reduce using rule 68 (unary -> postfix .)
    RParen          reduce using rule 68 (unary -> postfix .)
    Comma           reduce using rule 68 (unary -> postfix .)
    Int             reduce using rule 68 (unary -> postfix .)
    Semi            reduce using rule 68 (unary -> postfix .)
    Colon           reduce using rule 68 (unary -> postfix .)
    Identifier      reduce using rule 68 (unary -> postfix .)
    BitNot          reduce using rule 68 (unary -> postfix .)
    Not             reduce using rule 68 (unary -> postfix .)
    Integer         reduce using rule 68 (unary -> postfix .)
    LParen          reduce using rule 68 (unary -> postfix .)


state 37

    (71) unary -> BitNot . unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 79
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    unary                          shift and go to state 80
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 38

    (72) unary -> Not . unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 79
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    unary                          shift and go to state 81
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 39

    (69) postfix -> primary .

    Mul             reduce using rule 69 (postfix -> primary .)
    Div             reduce using rule 69 (postfix -> primary .)
    Mod             reduce using rule 69 (postfix -> primary .)
    Plus            reduce using rule 69 (postfix -> primary .)
    Minus           reduce using rule 69 (postfix -> primary .)
    Less            reduce using rule 69 (postfix -> primary .)
    Greater         reduce using rule 69 (postfix -> primary .)
    LessEqual       reduce using rule 69 (postfix -> primary .)
    GreaterEqual    reduce using rule 69 (postfix -> primary .)
    NotEqual        reduce using rule 69 (postfix -> primary .)
    Equal           reduce using rule 69 (postfix -> primary .)
    BitAnd          reduce using rule 69 (postfix -> primary .)
    Xor             reduce using rule 69 (postfix -> primary .)
    BitOr           reduce using rule 69 (postfix -> primary .)
    And             reduce using rule 69 (postfix -> primary .)
    Question        reduce using rule 69 (postfix -> primary .)
    Or              reduce using rule 69 (postfix -> primary .)
    RParen          reduce using rule 69 (postfix -> primary .)
    Comma           reduce using rule 69 (postfix -> primary .)
    Int             reduce using rule 69 (postfix -> primary .)
    Semi            reduce using rule 69 (postfix -> primary .)
    Colon           reduce using rule 69 (postfix -> primary .)
    Identifier      reduce using rule 69 (postfix -> primary .)
    BitNot          reduce using rule 69 (postfix -> primary .)
    Not             reduce using rule 69 (postfix -> primary .)
    Integer         reduce using rule 69 (postfix -> primary .)
    LParen          reduce using rule 69 (postfix -> primary .)


state 40

    (98) primary -> LParen . expression RParen
    (56) expression -> . assignment
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 82
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 41

    (96) primary -> Integer .

    Mul             reduce using rule 96 (primary -> Integer .)
    Div             reduce using rule 96 (primary -> Integer .)
    Mod             reduce using rule 96 (primary -> Integer .)
    Plus            reduce using rule 96 (primary -> Integer .)
    Minus           reduce using rule 96 (primary -> Integer .)
    Less            reduce using rule 96 (primary -> Integer .)
    Greater         reduce using rule 96 (primary -> Integer .)
    LessEqual       reduce using rule 96 (primary -> Integer .)
    GreaterEqual    reduce using rule 96 (primary -> Integer .)
    NotEqual        reduce using rule 96 (primary -> Integer .)
    Equal           reduce using rule 96 (primary -> Integer .)
    BitAnd          reduce using rule 96 (primary -> Integer .)
    Xor             reduce using rule 96 (primary -> Integer .)
    BitOr           reduce using rule 96 (primary -> Integer .)
    And             reduce using rule 96 (primary -> Integer .)
    Question        reduce using rule 96 (primary -> Integer .)
    Or              reduce using rule 96 (primary -> Integer .)
    RParen          reduce using rule 96 (primary -> Integer .)
    Comma           reduce using rule 96 (primary -> Integer .)
    Int             reduce using rule 96 (primary -> Integer .)
    Semi            reduce using rule 96 (primary -> Integer .)
    Colon           reduce using rule 96 (primary -> Integer .)
    Identifier      reduce using rule 96 (primary -> Integer .)
    BitNot          reduce using rule 96 (primary -> Integer .)
    Not             reduce using rule 96 (primary -> Integer .)
    Integer         reduce using rule 96 (primary -> Integer .)
    LParen          reduce using rule 96 (primary -> Integer .)


state 42

    (49) statement_matched -> LBrace . block RBrace
    (10) block -> . block block_item
    (11) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 83
    empty                          shift and go to state 20

state 43

    (5) function -> type Identifier LParen params RParen LBrace block RBrace .

    Int             reduce using rule 5 (function -> type Identifier LParen params RParen LBrace block RBrace .)
    $end            reduce using rule 5 (function -> type Identifier LParen params RParen LBrace block RBrace .)


state 44

    (10) block -> block block_item .

    RBrace          reduce using rule 10 (block -> block block_item .)
    If              reduce using rule 10 (block -> block block_item .)
    While           reduce using rule 10 (block -> block block_item .)
    For             reduce using rule 10 (block -> block block_item .)
    Do              reduce using rule 10 (block -> block block_item .)
    Return          reduce using rule 10 (block -> block block_item .)
    LBrace          reduce using rule 10 (block -> block block_item .)
    Break           reduce using rule 10 (block -> block block_item .)
    Continue        reduce using rule 10 (block -> block block_item .)
    Int             reduce using rule 10 (block -> block block_item .)
    Identifier      reduce using rule 10 (block -> block block_item .)
    Minus           reduce using rule 10 (block -> block block_item .)
    BitNot          reduce using rule 10 (block -> block block_item .)
    Not             reduce using rule 10 (block -> block block_item .)
    Integer         reduce using rule 10 (block -> block block_item .)
    LParen          reduce using rule 10 (block -> block block_item .)
    Semi            reduce using rule 10 (block -> block block_item .)


state 45

    (12) block_item -> statement .

    RBrace          reduce using rule 12 (block_item -> statement .)
    If              reduce using rule 12 (block_item -> statement .)
    While           reduce using rule 12 (block_item -> statement .)
    For             reduce using rule 12 (block_item -> statement .)
    Do              reduce using rule 12 (block_item -> statement .)
    Return          reduce using rule 12 (block_item -> statement .)
    LBrace          reduce using rule 12 (block_item -> statement .)
    Break           reduce using rule 12 (block_item -> statement .)
    Continue        reduce using rule 12 (block_item -> statement .)
    Int             reduce using rule 12 (block_item -> statement .)
    Identifier      reduce using rule 12 (block_item -> statement .)
    Minus           reduce using rule 12 (block_item -> statement .)
    BitNot          reduce using rule 12 (block_item -> statement .)
    Not             reduce using rule 12 (block_item -> statement .)
    Integer         reduce using rule 12 (block_item -> statement .)
    LParen          reduce using rule 12 (block_item -> statement .)
    Semi            reduce using rule 12 (block_item -> statement .)


state 46

    (13) block_item -> declaration . Semi

    Semi            shift and go to state 84


state 47

    (14) statement -> statement_matched .

    RBrace          reduce using rule 14 (statement -> statement_matched .)
    If              reduce using rule 14 (statement -> statement_matched .)
    While           reduce using rule 14 (statement -> statement_matched .)
    For             reduce using rule 14 (statement -> statement_matched .)
    Do              reduce using rule 14 (statement -> statement_matched .)
    Return          reduce using rule 14 (statement -> statement_matched .)
    LBrace          reduce using rule 14 (statement -> statement_matched .)
    Break           reduce using rule 14 (statement -> statement_matched .)
    Continue        reduce using rule 14 (statement -> statement_matched .)
    Int             reduce using rule 14 (statement -> statement_matched .)
    Identifier      reduce using rule 14 (statement -> statement_matched .)
    Minus           reduce using rule 14 (statement -> statement_matched .)
    BitNot          reduce using rule 14 (statement -> statement_matched .)
    Not             reduce using rule 14 (statement -> statement_matched .)
    Integer         reduce using rule 14 (statement -> statement_matched .)
    LParen          reduce using rule 14 (statement -> statement_matched .)
    Semi            reduce using rule 14 (statement -> statement_matched .)


state 48

    (15) statement -> statement_unmatched .

    RBrace          reduce using rule 15 (statement -> statement_unmatched .)
    If              reduce using rule 15 (statement -> statement_unmatched .)
    While           reduce using rule 15 (statement -> statement_unmatched .)
    For             reduce using rule 15 (statement -> statement_unmatched .)
    Do              reduce using rule 15 (statement -> statement_unmatched .)
    Return          reduce using rule 15 (statement -> statement_unmatched .)
    LBrace          reduce using rule 15 (statement -> statement_unmatched .)
    Break           reduce using rule 15 (statement -> statement_unmatched .)
    Continue        reduce using rule 15 (statement -> statement_unmatched .)
    Int             reduce using rule 15 (statement -> statement_unmatched .)
    Identifier      reduce using rule 15 (statement -> statement_unmatched .)
    Minus           reduce using rule 15 (statement -> statement_unmatched .)
    BitNot          reduce using rule 15 (statement -> statement_unmatched .)
    Not             reduce using rule 15 (statement -> statement_unmatched .)
    Integer         reduce using rule 15 (statement -> statement_unmatched .)
    LParen          reduce using rule 15 (statement -> statement_unmatched .)
    Semi            reduce using rule 15 (statement -> statement_unmatched .)


state 49

    (52) opt_expression -> expression .

    Semi            reduce using rule 52 (opt_expression -> expression .)


state 50

    (16) statement_matched -> If . LParen expression RParen statement_matched Else statement_matched
    (17) statement_unmatched -> If . LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> If . LParen expression RParen statement

    LParen          shift and go to state 85


state 51

    (19) statement_matched -> While . LParen expression RParen statement_matched
    (20) statement_unmatched -> While . LParen expression RParen statement_unmatched

    LParen          shift and go to state 86


state 52

    (21) statement_matched -> For . LParen expression Semi expression Semi expression RParen statement_matched
    (22) statement_matched -> For . LParen declaration Semi expression Semi expression RParen statement_matched
    (25) statement_matched -> For . LParen Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> For . LParen expression Semi Semi expression RParen statement_matched
    (28) statement_matched -> For . LParen declaration Semi Semi expression RParen statement_matched
    (31) statement_matched -> For . LParen expression Semi expression Semi RParen statement_matched
    (32) statement_matched -> For . LParen declaration Semi expression Semi RParen statement_matched
    (35) statement_matched -> For . LParen expression Semi Semi RParen statement_matched
    (36) statement_matched -> For . LParen declaration Semi Semi RParen statement_matched
    (39) statement_matched -> For . LParen Semi expression Semi RParen statement_matched
    (41) statement_matched -> For . LParen Semi Semi expression RParen statement_matched
    (43) statement_matched -> For . LParen Semi Semi RParen statement_matched
    (23) statement_unmatched -> For . LParen expression Semi expression Semi expression RParen statement_unmatched
    (24) statement_unmatched -> For . LParen declaration Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> For . LParen Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> For . LParen expression Semi Semi expression RParen statement_unmatched
    (30) statement_unmatched -> For . LParen declaration Semi Semi expression RParen statement_unmatched
    (33) statement_unmatched -> For . LParen expression Semi expression Semi RParen statement_unmatched
    (34) statement_unmatched -> For . LParen declaration Semi expression Semi RParen statement_unmatched
    (37) statement_unmatched -> For . LParen expression Semi Semi RParen statement_unmatched
    (38) statement_unmatched -> For . LParen declaration Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> For . LParen Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> For . LParen Semi Semi expression RParen statement_unmatched
    (44) statement_unmatched -> For . LParen Semi Semi RParen statement_unmatched

    LParen          shift and go to state 87


state 53

    (45) statement_matched -> Do . statement_matched While LParen expression RParen Semi
    (46) statement_unmatched -> Do . statement_unmatched While LParen expression RParen Semi
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (25) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (28) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (39) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (45) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (47) statement_matched -> . Return expression Semi
    (48) statement_matched -> . opt_expression Semi
    (49) statement_matched -> . LBrace block RBrace
    (50) statement_matched -> . Break Semi
    (51) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (46) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (52) opt_expression -> . expression
    (53) opt_expression -> . empty
    (56) expression -> . assignment
    (1) empty -> .
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 50
    While           shift and go to state 51
    For             shift and go to state 52
    Do              shift and go to state 53
    Return          shift and go to state 54
    LBrace          shift and go to state 42
    Break           shift and go to state 56
    Continue        shift and go to state 57
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    statement_matched              shift and go to state 88
    expression                     shift and go to state 49
    statement_unmatched            shift and go to state 89
    opt_expression                 shift and go to state 55
    empty                          shift and go to state 58
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 54

    (47) statement_matched -> Return . expression Semi
    (56) expression -> . assignment
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 90
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 55

    (48) statement_matched -> opt_expression . Semi

    Semi            shift and go to state 91


state 56

    (50) statement_matched -> Break . Semi

    Semi            shift and go to state 92


state 57

    (51) statement_matched -> Continue . Semi

    Semi            shift and go to state 93


state 58

    (53) opt_expression -> empty .

    Semi            reduce using rule 53 (opt_expression -> empty .)


state 59

    (78) assignment -> Identifier Assign . expression
    (56) expression -> . assignment
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 94
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 60

    (73) postfix -> Identifier LParen . arguments RParen
    (74) arguments -> . empty
    (75) arguments -> . arguments argument_item
    (1) empty -> .

    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)

    arguments                      shift and go to state 95
    empty                          shift and go to state 96

state 61

    (95) conditional -> logical_or Question . expression Colon conditional
    (56) expression -> . assignment
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    logical_or                     shift and go to state 25
    expression                     shift and go to state 97
    conditional                    shift and go to state 24
    assignment                     shift and go to state 23
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 62

    (79) logical_or -> logical_or Or . logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 79
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    logical_and                    shift and go to state 98
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 63

    (80) logical_and -> logical_and And . bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 79
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    bit_or                         shift and go to state 99
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 64

    (81) bit_or -> bit_or BitOr . xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 79
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    xor                            shift and go to state 100
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 65

    (82) xor -> xor Xor . bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 79
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    bit_and                        shift and go to state 101
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 66

    (83) bit_and -> bit_and BitAnd . equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 79
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    equality                       shift and go to state 102
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 67

    (84) equality -> equality NotEqual . relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 79
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    relational                     shift and go to state 103
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 68

    (85) equality -> equality Equal . relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 79
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    relational                     shift and go to state 104
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 69

    (86) relational -> relational Less . additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 79
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    additive                       shift and go to state 105
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 70

    (87) relational -> relational Greater . additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 79
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    additive                       shift and go to state 106
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 71

    (88) relational -> relational LessEqual . additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 79
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    additive                       shift and go to state 107
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 72

    (89) relational -> relational GreaterEqual . additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 79
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    additive                       shift and go to state 108
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 73

    (90) additive -> additive Plus . multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 79
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    multiplicative                 shift and go to state 109
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 74

    (91) additive -> additive Minus . multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 79
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    multiplicative                 shift and go to state 110
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 75

    (92) multiplicative -> multiplicative Mul . unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 79
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    unary                          shift and go to state 111
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 76

    (93) multiplicative -> multiplicative Div . unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 79
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    unary                          shift and go to state 112
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 77

    (94) multiplicative -> multiplicative Mod . unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 79
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    unary                          shift and go to state 113
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 78

    (70) unary -> Minus unary .

    Mul             reduce using rule 70 (unary -> Minus unary .)
    Div             reduce using rule 70 (unary -> Minus unary .)
    Mod             reduce using rule 70 (unary -> Minus unary .)
    Plus            reduce using rule 70 (unary -> Minus unary .)
    Minus           reduce using rule 70 (unary -> Minus unary .)
    Less            reduce using rule 70 (unary -> Minus unary .)
    Greater         reduce using rule 70 (unary -> Minus unary .)
    LessEqual       reduce using rule 70 (unary -> Minus unary .)
    GreaterEqual    reduce using rule 70 (unary -> Minus unary .)
    NotEqual        reduce using rule 70 (unary -> Minus unary .)
    Equal           reduce using rule 70 (unary -> Minus unary .)
    BitAnd          reduce using rule 70 (unary -> Minus unary .)
    Xor             reduce using rule 70 (unary -> Minus unary .)
    BitOr           reduce using rule 70 (unary -> Minus unary .)
    And             reduce using rule 70 (unary -> Minus unary .)
    Question        reduce using rule 70 (unary -> Minus unary .)
    Or              reduce using rule 70 (unary -> Minus unary .)
    RParen          reduce using rule 70 (unary -> Minus unary .)
    Comma           reduce using rule 70 (unary -> Minus unary .)
    Int             reduce using rule 70 (unary -> Minus unary .)
    Semi            reduce using rule 70 (unary -> Minus unary .)
    Colon           reduce using rule 70 (unary -> Minus unary .)
    Identifier      reduce using rule 70 (unary -> Minus unary .)
    BitNot          reduce using rule 70 (unary -> Minus unary .)
    Not             reduce using rule 70 (unary -> Minus unary .)
    Integer         reduce using rule 70 (unary -> Minus unary .)
    LParen          reduce using rule 70 (unary -> Minus unary .)


state 79

    (73) postfix -> Identifier . LParen arguments RParen
    (97) primary -> Identifier .

  ! shift/reduce conflict for LParen resolved as shift
    LParen          shift and go to state 60
    Mul             reduce using rule 97 (primary -> Identifier .)
    Div             reduce using rule 97 (primary -> Identifier .)
    Mod             reduce using rule 97 (primary -> Identifier .)
    Plus            reduce using rule 97 (primary -> Identifier .)
    Minus           reduce using rule 97 (primary -> Identifier .)
    Less            reduce using rule 97 (primary -> Identifier .)
    Greater         reduce using rule 97 (primary -> Identifier .)
    LessEqual       reduce using rule 97 (primary -> Identifier .)
    GreaterEqual    reduce using rule 97 (primary -> Identifier .)
    NotEqual        reduce using rule 97 (primary -> Identifier .)
    Equal           reduce using rule 97 (primary -> Identifier .)
    BitAnd          reduce using rule 97 (primary -> Identifier .)
    Xor             reduce using rule 97 (primary -> Identifier .)
    BitOr           reduce using rule 97 (primary -> Identifier .)
    And             reduce using rule 97 (primary -> Identifier .)
    Question        reduce using rule 97 (primary -> Identifier .)
    Or              reduce using rule 97 (primary -> Identifier .)
    RParen          reduce using rule 97 (primary -> Identifier .)
    Comma           reduce using rule 97 (primary -> Identifier .)
    Int             reduce using rule 97 (primary -> Identifier .)
    Semi            reduce using rule 97 (primary -> Identifier .)
    Colon           reduce using rule 97 (primary -> Identifier .)
    Identifier      reduce using rule 97 (primary -> Identifier .)
    BitNot          reduce using rule 97 (primary -> Identifier .)
    Not             reduce using rule 97 (primary -> Identifier .)
    Integer         reduce using rule 97 (primary -> Identifier .)

  ! LParen          [ reduce using rule 97 (primary -> Identifier .) ]


state 80

    (71) unary -> BitNot unary .

    Mul             reduce using rule 71 (unary -> BitNot unary .)
    Div             reduce using rule 71 (unary -> BitNot unary .)
    Mod             reduce using rule 71 (unary -> BitNot unary .)
    Plus            reduce using rule 71 (unary -> BitNot unary .)
    Minus           reduce using rule 71 (unary -> BitNot unary .)
    Less            reduce using rule 71 (unary -> BitNot unary .)
    Greater         reduce using rule 71 (unary -> BitNot unary .)
    LessEqual       reduce using rule 71 (unary -> BitNot unary .)
    GreaterEqual    reduce using rule 71 (unary -> BitNot unary .)
    NotEqual        reduce using rule 71 (unary -> BitNot unary .)
    Equal           reduce using rule 71 (unary -> BitNot unary .)
    BitAnd          reduce using rule 71 (unary -> BitNot unary .)
    Xor             reduce using rule 71 (unary -> BitNot unary .)
    BitOr           reduce using rule 71 (unary -> BitNot unary .)
    And             reduce using rule 71 (unary -> BitNot unary .)
    Question        reduce using rule 71 (unary -> BitNot unary .)
    Or              reduce using rule 71 (unary -> BitNot unary .)
    RParen          reduce using rule 71 (unary -> BitNot unary .)
    Comma           reduce using rule 71 (unary -> BitNot unary .)
    Int             reduce using rule 71 (unary -> BitNot unary .)
    Semi            reduce using rule 71 (unary -> BitNot unary .)
    Colon           reduce using rule 71 (unary -> BitNot unary .)
    Identifier      reduce using rule 71 (unary -> BitNot unary .)
    BitNot          reduce using rule 71 (unary -> BitNot unary .)
    Not             reduce using rule 71 (unary -> BitNot unary .)
    Integer         reduce using rule 71 (unary -> BitNot unary .)
    LParen          reduce using rule 71 (unary -> BitNot unary .)


state 81

    (72) unary -> Not unary .

    Mul             reduce using rule 72 (unary -> Not unary .)
    Div             reduce using rule 72 (unary -> Not unary .)
    Mod             reduce using rule 72 (unary -> Not unary .)
    Plus            reduce using rule 72 (unary -> Not unary .)
    Minus           reduce using rule 72 (unary -> Not unary .)
    Less            reduce using rule 72 (unary -> Not unary .)
    Greater         reduce using rule 72 (unary -> Not unary .)
    LessEqual       reduce using rule 72 (unary -> Not unary .)
    GreaterEqual    reduce using rule 72 (unary -> Not unary .)
    NotEqual        reduce using rule 72 (unary -> Not unary .)
    Equal           reduce using rule 72 (unary -> Not unary .)
    BitAnd          reduce using rule 72 (unary -> Not unary .)
    Xor             reduce using rule 72 (unary -> Not unary .)
    BitOr           reduce using rule 72 (unary -> Not unary .)
    And             reduce using rule 72 (unary -> Not unary .)
    Question        reduce using rule 72 (unary -> Not unary .)
    Or              reduce using rule 72 (unary -> Not unary .)
    RParen          reduce using rule 72 (unary -> Not unary .)
    Comma           reduce using rule 72 (unary -> Not unary .)
    Int             reduce using rule 72 (unary -> Not unary .)
    Semi            reduce using rule 72 (unary -> Not unary .)
    Colon           reduce using rule 72 (unary -> Not unary .)
    Identifier      reduce using rule 72 (unary -> Not unary .)
    BitNot          reduce using rule 72 (unary -> Not unary .)
    Not             reduce using rule 72 (unary -> Not unary .)
    Integer         reduce using rule 72 (unary -> Not unary .)
    LParen          reduce using rule 72 (unary -> Not unary .)


state 82

    (98) primary -> LParen expression . RParen

    RParen          shift and go to state 114


state 83

    (49) statement_matched -> LBrace block . RBrace
    (10) block -> block . block_item
    (12) block_item -> . statement
    (13) block_item -> . declaration Semi
    (14) statement -> . statement_matched
    (15) statement -> . statement_unmatched
    (54) declaration -> . type Identifier
    (55) declaration -> . type Identifier Assign expression
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (25) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (28) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (39) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (45) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (47) statement_matched -> . Return expression Semi
    (48) statement_matched -> . opt_expression Semi
    (49) statement_matched -> . LBrace block RBrace
    (50) statement_matched -> . Break Semi
    (51) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (46) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (4) type -> . Int
    (52) opt_expression -> . expression
    (53) opt_expression -> . empty
    (56) expression -> . assignment
    (1) empty -> .
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    RBrace          shift and go to state 115
    If              shift and go to state 50
    While           shift and go to state 51
    For             shift and go to state 52
    Do              shift and go to state 53
    Return          shift and go to state 54
    LBrace          shift and go to state 42
    Break           shift and go to state 56
    Continue        shift and go to state 57
    Int             shift and go to state 5
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    block_item                     shift and go to state 44
    statement                      shift and go to state 45
    declaration                    shift and go to state 46
    statement_matched              shift and go to state 47
    statement_unmatched            shift and go to state 48
    type                           shift and go to state 10
    expression                     shift and go to state 49
    opt_expression                 shift and go to state 55
    empty                          shift and go to state 58
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 84

    (13) block_item -> declaration Semi .

    RBrace          reduce using rule 13 (block_item -> declaration Semi .)
    If              reduce using rule 13 (block_item -> declaration Semi .)
    While           reduce using rule 13 (block_item -> declaration Semi .)
    For             reduce using rule 13 (block_item -> declaration Semi .)
    Do              reduce using rule 13 (block_item -> declaration Semi .)
    Return          reduce using rule 13 (block_item -> declaration Semi .)
    LBrace          reduce using rule 13 (block_item -> declaration Semi .)
    Break           reduce using rule 13 (block_item -> declaration Semi .)
    Continue        reduce using rule 13 (block_item -> declaration Semi .)
    Int             reduce using rule 13 (block_item -> declaration Semi .)
    Identifier      reduce using rule 13 (block_item -> declaration Semi .)
    Minus           reduce using rule 13 (block_item -> declaration Semi .)
    BitNot          reduce using rule 13 (block_item -> declaration Semi .)
    Not             reduce using rule 13 (block_item -> declaration Semi .)
    Integer         reduce using rule 13 (block_item -> declaration Semi .)
    LParen          reduce using rule 13 (block_item -> declaration Semi .)
    Semi            reduce using rule 13 (block_item -> declaration Semi .)


state 85

    (16) statement_matched -> If LParen . expression RParen statement_matched Else statement_matched
    (17) statement_unmatched -> If LParen . expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> If LParen . expression RParen statement
    (56) expression -> . assignment
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 116
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 86

    (19) statement_matched -> While LParen . expression RParen statement_matched
    (20) statement_unmatched -> While LParen . expression RParen statement_unmatched
    (56) expression -> . assignment
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 117
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 87

    (21) statement_matched -> For LParen . expression Semi expression Semi expression RParen statement_matched
    (22) statement_matched -> For LParen . declaration Semi expression Semi expression RParen statement_matched
    (25) statement_matched -> For LParen . Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> For LParen . expression Semi Semi expression RParen statement_matched
    (28) statement_matched -> For LParen . declaration Semi Semi expression RParen statement_matched
    (31) statement_matched -> For LParen . expression Semi expression Semi RParen statement_matched
    (32) statement_matched -> For LParen . declaration Semi expression Semi RParen statement_matched
    (35) statement_matched -> For LParen . expression Semi Semi RParen statement_matched
    (36) statement_matched -> For LParen . declaration Semi Semi RParen statement_matched
    (39) statement_matched -> For LParen . Semi expression Semi RParen statement_matched
    (41) statement_matched -> For LParen . Semi Semi expression RParen statement_matched
    (43) statement_matched -> For LParen . Semi Semi RParen statement_matched
    (23) statement_unmatched -> For LParen . expression Semi expression Semi expression RParen statement_unmatched
    (24) statement_unmatched -> For LParen . declaration Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> For LParen . Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> For LParen . expression Semi Semi expression RParen statement_unmatched
    (30) statement_unmatched -> For LParen . declaration Semi Semi expression RParen statement_unmatched
    (33) statement_unmatched -> For LParen . expression Semi expression Semi RParen statement_unmatched
    (34) statement_unmatched -> For LParen . declaration Semi expression Semi RParen statement_unmatched
    (37) statement_unmatched -> For LParen . expression Semi Semi RParen statement_unmatched
    (38) statement_unmatched -> For LParen . declaration Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> For LParen . Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> For LParen . Semi Semi expression RParen statement_unmatched
    (44) statement_unmatched -> For LParen . Semi Semi RParen statement_unmatched
    (56) expression -> . assignment
    (54) declaration -> . type Identifier
    (55) declaration -> . type Identifier Assign expression
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (4) type -> . Int
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Semi            shift and go to state 119
    Identifier      shift and go to state 21
    Int             shift and go to state 5
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 118
    declaration                    shift and go to state 120
    assignment                     shift and go to state 23
    type                           shift and go to state 10
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 88

    (45) statement_matched -> Do statement_matched . While LParen expression RParen Semi

    While           shift and go to state 121


state 89

    (46) statement_unmatched -> Do statement_unmatched . While LParen expression RParen Semi

    While           shift and go to state 122


state 90

    (47) statement_matched -> Return expression . Semi

    Semi            shift and go to state 123


state 91

    (48) statement_matched -> opt_expression Semi .

    RBrace          reduce using rule 48 (statement_matched -> opt_expression Semi .)
    If              reduce using rule 48 (statement_matched -> opt_expression Semi .)
    While           reduce using rule 48 (statement_matched -> opt_expression Semi .)
    For             reduce using rule 48 (statement_matched -> opt_expression Semi .)
    Do              reduce using rule 48 (statement_matched -> opt_expression Semi .)
    Return          reduce using rule 48 (statement_matched -> opt_expression Semi .)
    LBrace          reduce using rule 48 (statement_matched -> opt_expression Semi .)
    Break           reduce using rule 48 (statement_matched -> opt_expression Semi .)
    Continue        reduce using rule 48 (statement_matched -> opt_expression Semi .)
    Int             reduce using rule 48 (statement_matched -> opt_expression Semi .)
    Identifier      reduce using rule 48 (statement_matched -> opt_expression Semi .)
    Minus           reduce using rule 48 (statement_matched -> opt_expression Semi .)
    BitNot          reduce using rule 48 (statement_matched -> opt_expression Semi .)
    Not             reduce using rule 48 (statement_matched -> opt_expression Semi .)
    Integer         reduce using rule 48 (statement_matched -> opt_expression Semi .)
    LParen          reduce using rule 48 (statement_matched -> opt_expression Semi .)
    Semi            reduce using rule 48 (statement_matched -> opt_expression Semi .)
    Else            reduce using rule 48 (statement_matched -> opt_expression Semi .)


state 92

    (50) statement_matched -> Break Semi .

    RBrace          reduce using rule 50 (statement_matched -> Break Semi .)
    If              reduce using rule 50 (statement_matched -> Break Semi .)
    While           reduce using rule 50 (statement_matched -> Break Semi .)
    For             reduce using rule 50 (statement_matched -> Break Semi .)
    Do              reduce using rule 50 (statement_matched -> Break Semi .)
    Return          reduce using rule 50 (statement_matched -> Break Semi .)
    LBrace          reduce using rule 50 (statement_matched -> Break Semi .)
    Break           reduce using rule 50 (statement_matched -> Break Semi .)
    Continue        reduce using rule 50 (statement_matched -> Break Semi .)
    Int             reduce using rule 50 (statement_matched -> Break Semi .)
    Identifier      reduce using rule 50 (statement_matched -> Break Semi .)
    Minus           reduce using rule 50 (statement_matched -> Break Semi .)
    BitNot          reduce using rule 50 (statement_matched -> Break Semi .)
    Not             reduce using rule 50 (statement_matched -> Break Semi .)
    Integer         reduce using rule 50 (statement_matched -> Break Semi .)
    LParen          reduce using rule 50 (statement_matched -> Break Semi .)
    Semi            reduce using rule 50 (statement_matched -> Break Semi .)
    Else            reduce using rule 50 (statement_matched -> Break Semi .)


state 93

    (51) statement_matched -> Continue Semi .

    RBrace          reduce using rule 51 (statement_matched -> Continue Semi .)
    If              reduce using rule 51 (statement_matched -> Continue Semi .)
    While           reduce using rule 51 (statement_matched -> Continue Semi .)
    For             reduce using rule 51 (statement_matched -> Continue Semi .)
    Do              reduce using rule 51 (statement_matched -> Continue Semi .)
    Return          reduce using rule 51 (statement_matched -> Continue Semi .)
    LBrace          reduce using rule 51 (statement_matched -> Continue Semi .)
    Break           reduce using rule 51 (statement_matched -> Continue Semi .)
    Continue        reduce using rule 51 (statement_matched -> Continue Semi .)
    Int             reduce using rule 51 (statement_matched -> Continue Semi .)
    Identifier      reduce using rule 51 (statement_matched -> Continue Semi .)
    Minus           reduce using rule 51 (statement_matched -> Continue Semi .)
    BitNot          reduce using rule 51 (statement_matched -> Continue Semi .)
    Not             reduce using rule 51 (statement_matched -> Continue Semi .)
    Integer         reduce using rule 51 (statement_matched -> Continue Semi .)
    LParen          reduce using rule 51 (statement_matched -> Continue Semi .)
    Semi            reduce using rule 51 (statement_matched -> Continue Semi .)
    Else            reduce using rule 51 (statement_matched -> Continue Semi .)


state 94

    (78) assignment -> Identifier Assign expression .

    RParen          reduce using rule 78 (assignment -> Identifier Assign expression .)
    Comma           reduce using rule 78 (assignment -> Identifier Assign expression .)
    Int             reduce using rule 78 (assignment -> Identifier Assign expression .)
    Semi            reduce using rule 78 (assignment -> Identifier Assign expression .)
    Colon           reduce using rule 78 (assignment -> Identifier Assign expression .)
    Identifier      reduce using rule 78 (assignment -> Identifier Assign expression .)
    Minus           reduce using rule 78 (assignment -> Identifier Assign expression .)
    BitNot          reduce using rule 78 (assignment -> Identifier Assign expression .)
    Not             reduce using rule 78 (assignment -> Identifier Assign expression .)
    Integer         reduce using rule 78 (assignment -> Identifier Assign expression .)
    LParen          reduce using rule 78 (assignment -> Identifier Assign expression .)


state 95

    (73) postfix -> Identifier LParen arguments . RParen
    (75) arguments -> arguments . argument_item
    (76) argument_item -> . Comma expression
    (77) argument_item -> . expression
    (56) expression -> . assignment
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    RParen          shift and go to state 124
    Comma           shift and go to state 126
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    argument_item                  shift and go to state 125
    expression                     shift and go to state 127
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 96

    (74) arguments -> empty .

    RParen          reduce using rule 74 (arguments -> empty .)
    Comma           reduce using rule 74 (arguments -> empty .)
    Identifier      reduce using rule 74 (arguments -> empty .)
    Minus           reduce using rule 74 (arguments -> empty .)
    BitNot          reduce using rule 74 (arguments -> empty .)
    Not             reduce using rule 74 (arguments -> empty .)
    Integer         reduce using rule 74 (arguments -> empty .)
    LParen          reduce using rule 74 (arguments -> empty .)


state 97

    (95) conditional -> logical_or Question expression . Colon conditional

    Colon           shift and go to state 128


state 98

    (79) logical_or -> logical_or Or logical_and .
    (80) logical_and -> logical_and . And bit_or

    Question        reduce using rule 79 (logical_or -> logical_or Or logical_and .)
    Or              reduce using rule 79 (logical_or -> logical_or Or logical_and .)
    RParen          reduce using rule 79 (logical_or -> logical_or Or logical_and .)
    Comma           reduce using rule 79 (logical_or -> logical_or Or logical_and .)
    Int             reduce using rule 79 (logical_or -> logical_or Or logical_and .)
    Semi            reduce using rule 79 (logical_or -> logical_or Or logical_and .)
    Colon           reduce using rule 79 (logical_or -> logical_or Or logical_and .)
    Identifier      reduce using rule 79 (logical_or -> logical_or Or logical_and .)
    Minus           reduce using rule 79 (logical_or -> logical_or Or logical_and .)
    BitNot          reduce using rule 79 (logical_or -> logical_or Or logical_and .)
    Not             reduce using rule 79 (logical_or -> logical_or Or logical_and .)
    Integer         reduce using rule 79 (logical_or -> logical_or Or logical_and .)
    LParen          reduce using rule 79 (logical_or -> logical_or Or logical_and .)
    And             shift and go to state 63


state 99

    (80) logical_and -> logical_and And bit_or .
    (81) bit_or -> bit_or . BitOr xor

    And             reduce using rule 80 (logical_and -> logical_and And bit_or .)
    Question        reduce using rule 80 (logical_and -> logical_and And bit_or .)
    Or              reduce using rule 80 (logical_and -> logical_and And bit_or .)
    RParen          reduce using rule 80 (logical_and -> logical_and And bit_or .)
    Comma           reduce using rule 80 (logical_and -> logical_and And bit_or .)
    Int             reduce using rule 80 (logical_and -> logical_and And bit_or .)
    Semi            reduce using rule 80 (logical_and -> logical_and And bit_or .)
    Colon           reduce using rule 80 (logical_and -> logical_and And bit_or .)
    Identifier      reduce using rule 80 (logical_and -> logical_and And bit_or .)
    Minus           reduce using rule 80 (logical_and -> logical_and And bit_or .)
    BitNot          reduce using rule 80 (logical_and -> logical_and And bit_or .)
    Not             reduce using rule 80 (logical_and -> logical_and And bit_or .)
    Integer         reduce using rule 80 (logical_and -> logical_and And bit_or .)
    LParen          reduce using rule 80 (logical_and -> logical_and And bit_or .)
    BitOr           shift and go to state 64


state 100

    (81) bit_or -> bit_or BitOr xor .
    (82) xor -> xor . Xor bit_and

    BitOr           reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    And             reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    Question        reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    Or              reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    RParen          reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    Comma           reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    Int             reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    Semi            reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    Colon           reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    Identifier      reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    Minus           reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    BitNot          reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    Not             reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    Integer         reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    LParen          reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    Xor             shift and go to state 65


state 101

    (82) xor -> xor Xor bit_and .
    (83) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 82 (xor -> xor Xor bit_and .)
    BitOr           reduce using rule 82 (xor -> xor Xor bit_and .)
    And             reduce using rule 82 (xor -> xor Xor bit_and .)
    Question        reduce using rule 82 (xor -> xor Xor bit_and .)
    Or              reduce using rule 82 (xor -> xor Xor bit_and .)
    RParen          reduce using rule 82 (xor -> xor Xor bit_and .)
    Comma           reduce using rule 82 (xor -> xor Xor bit_and .)
    Int             reduce using rule 82 (xor -> xor Xor bit_and .)
    Semi            reduce using rule 82 (xor -> xor Xor bit_and .)
    Colon           reduce using rule 82 (xor -> xor Xor bit_and .)
    Identifier      reduce using rule 82 (xor -> xor Xor bit_and .)
    Minus           reduce using rule 82 (xor -> xor Xor bit_and .)
    BitNot          reduce using rule 82 (xor -> xor Xor bit_and .)
    Not             reduce using rule 82 (xor -> xor Xor bit_and .)
    Integer         reduce using rule 82 (xor -> xor Xor bit_and .)
    LParen          reduce using rule 82 (xor -> xor Xor bit_and .)
    BitAnd          shift and go to state 66


state 102

    (83) bit_and -> bit_and BitAnd equality .
    (84) equality -> equality . NotEqual relational
    (85) equality -> equality . Equal relational

    BitAnd          reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    Xor             reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    BitOr           reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    And             reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    Question        reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    Or              reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    RParen          reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    Comma           reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    Int             reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    Semi            reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    Colon           reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    Identifier      reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    Minus           reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    BitNot          reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    Not             reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    Integer         reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    LParen          reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    NotEqual        shift and go to state 67
    Equal           shift and go to state 68


state 103

    (84) equality -> equality NotEqual relational .
    (86) relational -> relational . Less additive
    (87) relational -> relational . Greater additive
    (88) relational -> relational . LessEqual additive
    (89) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 84 (equality -> equality NotEqual relational .)
    Equal           reduce using rule 84 (equality -> equality NotEqual relational .)
    BitAnd          reduce using rule 84 (equality -> equality NotEqual relational .)
    Xor             reduce using rule 84 (equality -> equality NotEqual relational .)
    BitOr           reduce using rule 84 (equality -> equality NotEqual relational .)
    And             reduce using rule 84 (equality -> equality NotEqual relational .)
    Question        reduce using rule 84 (equality -> equality NotEqual relational .)
    Or              reduce using rule 84 (equality -> equality NotEqual relational .)
    RParen          reduce using rule 84 (equality -> equality NotEqual relational .)
    Comma           reduce using rule 84 (equality -> equality NotEqual relational .)
    Int             reduce using rule 84 (equality -> equality NotEqual relational .)
    Semi            reduce using rule 84 (equality -> equality NotEqual relational .)
    Colon           reduce using rule 84 (equality -> equality NotEqual relational .)
    Identifier      reduce using rule 84 (equality -> equality NotEqual relational .)
    Minus           reduce using rule 84 (equality -> equality NotEqual relational .)
    BitNot          reduce using rule 84 (equality -> equality NotEqual relational .)
    Not             reduce using rule 84 (equality -> equality NotEqual relational .)
    Integer         reduce using rule 84 (equality -> equality NotEqual relational .)
    LParen          reduce using rule 84 (equality -> equality NotEqual relational .)
    Less            shift and go to state 69
    Greater         shift and go to state 70
    LessEqual       shift and go to state 71
    GreaterEqual    shift and go to state 72


state 104

    (85) equality -> equality Equal relational .
    (86) relational -> relational . Less additive
    (87) relational -> relational . Greater additive
    (88) relational -> relational . LessEqual additive
    (89) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 85 (equality -> equality Equal relational .)
    Equal           reduce using rule 85 (equality -> equality Equal relational .)
    BitAnd          reduce using rule 85 (equality -> equality Equal relational .)
    Xor             reduce using rule 85 (equality -> equality Equal relational .)
    BitOr           reduce using rule 85 (equality -> equality Equal relational .)
    And             reduce using rule 85 (equality -> equality Equal relational .)
    Question        reduce using rule 85 (equality -> equality Equal relational .)
    Or              reduce using rule 85 (equality -> equality Equal relational .)
    RParen          reduce using rule 85 (equality -> equality Equal relational .)
    Comma           reduce using rule 85 (equality -> equality Equal relational .)
    Int             reduce using rule 85 (equality -> equality Equal relational .)
    Semi            reduce using rule 85 (equality -> equality Equal relational .)
    Colon           reduce using rule 85 (equality -> equality Equal relational .)
    Identifier      reduce using rule 85 (equality -> equality Equal relational .)
    Minus           reduce using rule 85 (equality -> equality Equal relational .)
    BitNot          reduce using rule 85 (equality -> equality Equal relational .)
    Not             reduce using rule 85 (equality -> equality Equal relational .)
    Integer         reduce using rule 85 (equality -> equality Equal relational .)
    LParen          reduce using rule 85 (equality -> equality Equal relational .)
    Less            shift and go to state 69
    Greater         shift and go to state 70
    LessEqual       shift and go to state 71
    GreaterEqual    shift and go to state 72


state 105

    (86) relational -> relational Less additive .
    (90) additive -> additive . Plus multiplicative
    (91) additive -> additive . Minus multiplicative

  ! shift/reduce conflict for Minus resolved as shift
    Less            reduce using rule 86 (relational -> relational Less additive .)
    Greater         reduce using rule 86 (relational -> relational Less additive .)
    LessEqual       reduce using rule 86 (relational -> relational Less additive .)
    GreaterEqual    reduce using rule 86 (relational -> relational Less additive .)
    NotEqual        reduce using rule 86 (relational -> relational Less additive .)
    Equal           reduce using rule 86 (relational -> relational Less additive .)
    BitAnd          reduce using rule 86 (relational -> relational Less additive .)
    Xor             reduce using rule 86 (relational -> relational Less additive .)
    BitOr           reduce using rule 86 (relational -> relational Less additive .)
    And             reduce using rule 86 (relational -> relational Less additive .)
    Question        reduce using rule 86 (relational -> relational Less additive .)
    Or              reduce using rule 86 (relational -> relational Less additive .)
    RParen          reduce using rule 86 (relational -> relational Less additive .)
    Comma           reduce using rule 86 (relational -> relational Less additive .)
    Int             reduce using rule 86 (relational -> relational Less additive .)
    Semi            reduce using rule 86 (relational -> relational Less additive .)
    Colon           reduce using rule 86 (relational -> relational Less additive .)
    Identifier      reduce using rule 86 (relational -> relational Less additive .)
    BitNot          reduce using rule 86 (relational -> relational Less additive .)
    Not             reduce using rule 86 (relational -> relational Less additive .)
    Integer         reduce using rule 86 (relational -> relational Less additive .)
    LParen          reduce using rule 86 (relational -> relational Less additive .)
    Plus            shift and go to state 73
    Minus           shift and go to state 74

  ! Minus           [ reduce using rule 86 (relational -> relational Less additive .) ]


state 106

    (87) relational -> relational Greater additive .
    (90) additive -> additive . Plus multiplicative
    (91) additive -> additive . Minus multiplicative

  ! shift/reduce conflict for Minus resolved as shift
    Less            reduce using rule 87 (relational -> relational Greater additive .)
    Greater         reduce using rule 87 (relational -> relational Greater additive .)
    LessEqual       reduce using rule 87 (relational -> relational Greater additive .)
    GreaterEqual    reduce using rule 87 (relational -> relational Greater additive .)
    NotEqual        reduce using rule 87 (relational -> relational Greater additive .)
    Equal           reduce using rule 87 (relational -> relational Greater additive .)
    BitAnd          reduce using rule 87 (relational -> relational Greater additive .)
    Xor             reduce using rule 87 (relational -> relational Greater additive .)
    BitOr           reduce using rule 87 (relational -> relational Greater additive .)
    And             reduce using rule 87 (relational -> relational Greater additive .)
    Question        reduce using rule 87 (relational -> relational Greater additive .)
    Or              reduce using rule 87 (relational -> relational Greater additive .)
    RParen          reduce using rule 87 (relational -> relational Greater additive .)
    Comma           reduce using rule 87 (relational -> relational Greater additive .)
    Int             reduce using rule 87 (relational -> relational Greater additive .)
    Semi            reduce using rule 87 (relational -> relational Greater additive .)
    Colon           reduce using rule 87 (relational -> relational Greater additive .)
    Identifier      reduce using rule 87 (relational -> relational Greater additive .)
    BitNot          reduce using rule 87 (relational -> relational Greater additive .)
    Not             reduce using rule 87 (relational -> relational Greater additive .)
    Integer         reduce using rule 87 (relational -> relational Greater additive .)
    LParen          reduce using rule 87 (relational -> relational Greater additive .)
    Plus            shift and go to state 73
    Minus           shift and go to state 74

  ! Minus           [ reduce using rule 87 (relational -> relational Greater additive .) ]


state 107

    (88) relational -> relational LessEqual additive .
    (90) additive -> additive . Plus multiplicative
    (91) additive -> additive . Minus multiplicative

  ! shift/reduce conflict for Minus resolved as shift
    Less            reduce using rule 88 (relational -> relational LessEqual additive .)
    Greater         reduce using rule 88 (relational -> relational LessEqual additive .)
    LessEqual       reduce using rule 88 (relational -> relational LessEqual additive .)
    GreaterEqual    reduce using rule 88 (relational -> relational LessEqual additive .)
    NotEqual        reduce using rule 88 (relational -> relational LessEqual additive .)
    Equal           reduce using rule 88 (relational -> relational LessEqual additive .)
    BitAnd          reduce using rule 88 (relational -> relational LessEqual additive .)
    Xor             reduce using rule 88 (relational -> relational LessEqual additive .)
    BitOr           reduce using rule 88 (relational -> relational LessEqual additive .)
    And             reduce using rule 88 (relational -> relational LessEqual additive .)
    Question        reduce using rule 88 (relational -> relational LessEqual additive .)
    Or              reduce using rule 88 (relational -> relational LessEqual additive .)
    RParen          reduce using rule 88 (relational -> relational LessEqual additive .)
    Comma           reduce using rule 88 (relational -> relational LessEqual additive .)
    Int             reduce using rule 88 (relational -> relational LessEqual additive .)
    Semi            reduce using rule 88 (relational -> relational LessEqual additive .)
    Colon           reduce using rule 88 (relational -> relational LessEqual additive .)
    Identifier      reduce using rule 88 (relational -> relational LessEqual additive .)
    BitNot          reduce using rule 88 (relational -> relational LessEqual additive .)
    Not             reduce using rule 88 (relational -> relational LessEqual additive .)
    Integer         reduce using rule 88 (relational -> relational LessEqual additive .)
    LParen          reduce using rule 88 (relational -> relational LessEqual additive .)
    Plus            shift and go to state 73
    Minus           shift and go to state 74

  ! Minus           [ reduce using rule 88 (relational -> relational LessEqual additive .) ]


state 108

    (89) relational -> relational GreaterEqual additive .
    (90) additive -> additive . Plus multiplicative
    (91) additive -> additive . Minus multiplicative

  ! shift/reduce conflict for Minus resolved as shift
    Less            reduce using rule 89 (relational -> relational GreaterEqual additive .)
    Greater         reduce using rule 89 (relational -> relational GreaterEqual additive .)
    LessEqual       reduce using rule 89 (relational -> relational GreaterEqual additive .)
    GreaterEqual    reduce using rule 89 (relational -> relational GreaterEqual additive .)
    NotEqual        reduce using rule 89 (relational -> relational GreaterEqual additive .)
    Equal           reduce using rule 89 (relational -> relational GreaterEqual additive .)
    BitAnd          reduce using rule 89 (relational -> relational GreaterEqual additive .)
    Xor             reduce using rule 89 (relational -> relational GreaterEqual additive .)
    BitOr           reduce using rule 89 (relational -> relational GreaterEqual additive .)
    And             reduce using rule 89 (relational -> relational GreaterEqual additive .)
    Question        reduce using rule 89 (relational -> relational GreaterEqual additive .)
    Or              reduce using rule 89 (relational -> relational GreaterEqual additive .)
    RParen          reduce using rule 89 (relational -> relational GreaterEqual additive .)
    Comma           reduce using rule 89 (relational -> relational GreaterEqual additive .)
    Int             reduce using rule 89 (relational -> relational GreaterEqual additive .)
    Semi            reduce using rule 89 (relational -> relational GreaterEqual additive .)
    Colon           reduce using rule 89 (relational -> relational GreaterEqual additive .)
    Identifier      reduce using rule 89 (relational -> relational GreaterEqual additive .)
    BitNot          reduce using rule 89 (relational -> relational GreaterEqual additive .)
    Not             reduce using rule 89 (relational -> relational GreaterEqual additive .)
    Integer         reduce using rule 89 (relational -> relational GreaterEqual additive .)
    LParen          reduce using rule 89 (relational -> relational GreaterEqual additive .)
    Plus            shift and go to state 73
    Minus           shift and go to state 74

  ! Minus           [ reduce using rule 89 (relational -> relational GreaterEqual additive .) ]


state 109

    (90) additive -> additive Plus multiplicative .
    (92) multiplicative -> multiplicative . Mul unary
    (93) multiplicative -> multiplicative . Div unary
    (94) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 90 (additive -> additive Plus multiplicative .)
    Minus           reduce using rule 90 (additive -> additive Plus multiplicative .)
    Less            reduce using rule 90 (additive -> additive Plus multiplicative .)
    Greater         reduce using rule 90 (additive -> additive Plus multiplicative .)
    LessEqual       reduce using rule 90 (additive -> additive Plus multiplicative .)
    GreaterEqual    reduce using rule 90 (additive -> additive Plus multiplicative .)
    NotEqual        reduce using rule 90 (additive -> additive Plus multiplicative .)
    Equal           reduce using rule 90 (additive -> additive Plus multiplicative .)
    BitAnd          reduce using rule 90 (additive -> additive Plus multiplicative .)
    Xor             reduce using rule 90 (additive -> additive Plus multiplicative .)
    BitOr           reduce using rule 90 (additive -> additive Plus multiplicative .)
    And             reduce using rule 90 (additive -> additive Plus multiplicative .)
    Question        reduce using rule 90 (additive -> additive Plus multiplicative .)
    Or              reduce using rule 90 (additive -> additive Plus multiplicative .)
    RParen          reduce using rule 90 (additive -> additive Plus multiplicative .)
    Comma           reduce using rule 90 (additive -> additive Plus multiplicative .)
    Int             reduce using rule 90 (additive -> additive Plus multiplicative .)
    Semi            reduce using rule 90 (additive -> additive Plus multiplicative .)
    Colon           reduce using rule 90 (additive -> additive Plus multiplicative .)
    Identifier      reduce using rule 90 (additive -> additive Plus multiplicative .)
    BitNot          reduce using rule 90 (additive -> additive Plus multiplicative .)
    Not             reduce using rule 90 (additive -> additive Plus multiplicative .)
    Integer         reduce using rule 90 (additive -> additive Plus multiplicative .)
    LParen          reduce using rule 90 (additive -> additive Plus multiplicative .)
    Mul             shift and go to state 75
    Div             shift and go to state 76
    Mod             shift and go to state 77


state 110

    (91) additive -> additive Minus multiplicative .
    (92) multiplicative -> multiplicative . Mul unary
    (93) multiplicative -> multiplicative . Div unary
    (94) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 91 (additive -> additive Minus multiplicative .)
    Minus           reduce using rule 91 (additive -> additive Minus multiplicative .)
    Less            reduce using rule 91 (additive -> additive Minus multiplicative .)
    Greater         reduce using rule 91 (additive -> additive Minus multiplicative .)
    LessEqual       reduce using rule 91 (additive -> additive Minus multiplicative .)
    GreaterEqual    reduce using rule 91 (additive -> additive Minus multiplicative .)
    NotEqual        reduce using rule 91 (additive -> additive Minus multiplicative .)
    Equal           reduce using rule 91 (additive -> additive Minus multiplicative .)
    BitAnd          reduce using rule 91 (additive -> additive Minus multiplicative .)
    Xor             reduce using rule 91 (additive -> additive Minus multiplicative .)
    BitOr           reduce using rule 91 (additive -> additive Minus multiplicative .)
    And             reduce using rule 91 (additive -> additive Minus multiplicative .)
    Question        reduce using rule 91 (additive -> additive Minus multiplicative .)
    Or              reduce using rule 91 (additive -> additive Minus multiplicative .)
    RParen          reduce using rule 91 (additive -> additive Minus multiplicative .)
    Comma           reduce using rule 91 (additive -> additive Minus multiplicative .)
    Int             reduce using rule 91 (additive -> additive Minus multiplicative .)
    Semi            reduce using rule 91 (additive -> additive Minus multiplicative .)
    Colon           reduce using rule 91 (additive -> additive Minus multiplicative .)
    Identifier      reduce using rule 91 (additive -> additive Minus multiplicative .)
    BitNot          reduce using rule 91 (additive -> additive Minus multiplicative .)
    Not             reduce using rule 91 (additive -> additive Minus multiplicative .)
    Integer         reduce using rule 91 (additive -> additive Minus multiplicative .)
    LParen          reduce using rule 91 (additive -> additive Minus multiplicative .)
    Mul             shift and go to state 75
    Div             shift and go to state 76
    Mod             shift and go to state 77


state 111

    (92) multiplicative -> multiplicative Mul unary .

    Mul             reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Div             reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Mod             reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Plus            reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Minus           reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Less            reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Greater         reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    LessEqual       reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    GreaterEqual    reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    NotEqual        reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Equal           reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    BitAnd          reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Xor             reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    BitOr           reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    And             reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Question        reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Or              reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    RParen          reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Comma           reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Int             reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Semi            reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Colon           reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Identifier      reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    BitNot          reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Not             reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Integer         reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    LParen          reduce using rule 92 (multiplicative -> multiplicative Mul unary .)


state 112

    (93) multiplicative -> multiplicative Div unary .

    Mul             reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Div             reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Mod             reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Plus            reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Minus           reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Less            reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Greater         reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    LessEqual       reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    GreaterEqual    reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    NotEqual        reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Equal           reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    BitAnd          reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Xor             reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    BitOr           reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    And             reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Question        reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Or              reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    RParen          reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Comma           reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Int             reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Semi            reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Colon           reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Identifier      reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    BitNot          reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Not             reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Integer         reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    LParen          reduce using rule 93 (multiplicative -> multiplicative Div unary .)


state 113

    (94) multiplicative -> multiplicative Mod unary .

    Mul             reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Div             reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Mod             reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Plus            reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Minus           reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Less            reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Greater         reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    LessEqual       reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    GreaterEqual    reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    NotEqual        reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Equal           reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    BitAnd          reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Xor             reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    BitOr           reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    And             reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Question        reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Or              reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    RParen          reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Comma           reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Int             reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Semi            reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Colon           reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Identifier      reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    BitNot          reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Not             reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Integer         reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    LParen          reduce using rule 94 (multiplicative -> multiplicative Mod unary .)


state 114

    (98) primary -> LParen expression RParen .

    Mul             reduce using rule 98 (primary -> LParen expression RParen .)
    Div             reduce using rule 98 (primary -> LParen expression RParen .)
    Mod             reduce using rule 98 (primary -> LParen expression RParen .)
    Plus            reduce using rule 98 (primary -> LParen expression RParen .)
    Minus           reduce using rule 98 (primary -> LParen expression RParen .)
    Less            reduce using rule 98 (primary -> LParen expression RParen .)
    Greater         reduce using rule 98 (primary -> LParen expression RParen .)
    LessEqual       reduce using rule 98 (primary -> LParen expression RParen .)
    GreaterEqual    reduce using rule 98 (primary -> LParen expression RParen .)
    NotEqual        reduce using rule 98 (primary -> LParen expression RParen .)
    Equal           reduce using rule 98 (primary -> LParen expression RParen .)
    BitAnd          reduce using rule 98 (primary -> LParen expression RParen .)
    Xor             reduce using rule 98 (primary -> LParen expression RParen .)
    BitOr           reduce using rule 98 (primary -> LParen expression RParen .)
    And             reduce using rule 98 (primary -> LParen expression RParen .)
    Question        reduce using rule 98 (primary -> LParen expression RParen .)
    Or              reduce using rule 98 (primary -> LParen expression RParen .)
    RParen          reduce using rule 98 (primary -> LParen expression RParen .)
    Comma           reduce using rule 98 (primary -> LParen expression RParen .)
    Int             reduce using rule 98 (primary -> LParen expression RParen .)
    Semi            reduce using rule 98 (primary -> LParen expression RParen .)
    Colon           reduce using rule 98 (primary -> LParen expression RParen .)
    Identifier      reduce using rule 98 (primary -> LParen expression RParen .)
    BitNot          reduce using rule 98 (primary -> LParen expression RParen .)
    Not             reduce using rule 98 (primary -> LParen expression RParen .)
    Integer         reduce using rule 98 (primary -> LParen expression RParen .)
    LParen          reduce using rule 98 (primary -> LParen expression RParen .)


state 115

    (49) statement_matched -> LBrace block RBrace .

    RBrace          reduce using rule 49 (statement_matched -> LBrace block RBrace .)
    If              reduce using rule 49 (statement_matched -> LBrace block RBrace .)
    While           reduce using rule 49 (statement_matched -> LBrace block RBrace .)
    For             reduce using rule 49 (statement_matched -> LBrace block RBrace .)
    Do              reduce using rule 49 (statement_matched -> LBrace block RBrace .)
    Return          reduce using rule 49 (statement_matched -> LBrace block RBrace .)
    LBrace          reduce using rule 49 (statement_matched -> LBrace block RBrace .)
    Break           reduce using rule 49 (statement_matched -> LBrace block RBrace .)
    Continue        reduce using rule 49 (statement_matched -> LBrace block RBrace .)
    Int             reduce using rule 49 (statement_matched -> LBrace block RBrace .)
    Identifier      reduce using rule 49 (statement_matched -> LBrace block RBrace .)
    Minus           reduce using rule 49 (statement_matched -> LBrace block RBrace .)
    BitNot          reduce using rule 49 (statement_matched -> LBrace block RBrace .)
    Not             reduce using rule 49 (statement_matched -> LBrace block RBrace .)
    Integer         reduce using rule 49 (statement_matched -> LBrace block RBrace .)
    LParen          reduce using rule 49 (statement_matched -> LBrace block RBrace .)
    Semi            reduce using rule 49 (statement_matched -> LBrace block RBrace .)
    Else            reduce using rule 49 (statement_matched -> LBrace block RBrace .)


state 116

    (16) statement_matched -> If LParen expression . RParen statement_matched Else statement_matched
    (17) statement_unmatched -> If LParen expression . RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> If LParen expression . RParen statement

    RParen          shift and go to state 129


state 117

    (19) statement_matched -> While LParen expression . RParen statement_matched
    (20) statement_unmatched -> While LParen expression . RParen statement_unmatched

    RParen          shift and go to state 130


state 118

    (21) statement_matched -> For LParen expression . Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> For LParen expression . Semi Semi expression RParen statement_matched
    (31) statement_matched -> For LParen expression . Semi expression Semi RParen statement_matched
    (35) statement_matched -> For LParen expression . Semi Semi RParen statement_matched
    (23) statement_unmatched -> For LParen expression . Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> For LParen expression . Semi Semi expression RParen statement_unmatched
    (33) statement_unmatched -> For LParen expression . Semi expression Semi RParen statement_unmatched
    (37) statement_unmatched -> For LParen expression . Semi Semi RParen statement_unmatched

    Semi            shift and go to state 131


state 119

    (25) statement_matched -> For LParen Semi . expression Semi expression RParen statement_matched
    (39) statement_matched -> For LParen Semi . expression Semi RParen statement_matched
    (41) statement_matched -> For LParen Semi . Semi expression RParen statement_matched
    (43) statement_matched -> For LParen Semi . Semi RParen statement_matched
    (26) statement_unmatched -> For LParen Semi . expression Semi expression RParen statement_unmatched
    (40) statement_unmatched -> For LParen Semi . expression Semi RParen statement_unmatched
    (42) statement_unmatched -> For LParen Semi . Semi expression RParen statement_unmatched
    (44) statement_unmatched -> For LParen Semi . Semi RParen statement_unmatched
    (56) expression -> . assignment
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Semi            shift and go to state 132
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 133
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 120

    (22) statement_matched -> For LParen declaration . Semi expression Semi expression RParen statement_matched
    (28) statement_matched -> For LParen declaration . Semi Semi expression RParen statement_matched
    (32) statement_matched -> For LParen declaration . Semi expression Semi RParen statement_matched
    (36) statement_matched -> For LParen declaration . Semi Semi RParen statement_matched
    (24) statement_unmatched -> For LParen declaration . Semi expression Semi expression RParen statement_unmatched
    (30) statement_unmatched -> For LParen declaration . Semi Semi expression RParen statement_unmatched
    (34) statement_unmatched -> For LParen declaration . Semi expression Semi RParen statement_unmatched
    (38) statement_unmatched -> For LParen declaration . Semi Semi RParen statement_unmatched

    Semi            shift and go to state 134


state 121

    (45) statement_matched -> Do statement_matched While . LParen expression RParen Semi

    LParen          shift and go to state 135


state 122

    (46) statement_unmatched -> Do statement_unmatched While . LParen expression RParen Semi

    LParen          shift and go to state 136


state 123

    (47) statement_matched -> Return expression Semi .

    RBrace          reduce using rule 47 (statement_matched -> Return expression Semi .)
    If              reduce using rule 47 (statement_matched -> Return expression Semi .)
    While           reduce using rule 47 (statement_matched -> Return expression Semi .)
    For             reduce using rule 47 (statement_matched -> Return expression Semi .)
    Do              reduce using rule 47 (statement_matched -> Return expression Semi .)
    Return          reduce using rule 47 (statement_matched -> Return expression Semi .)
    LBrace          reduce using rule 47 (statement_matched -> Return expression Semi .)
    Break           reduce using rule 47 (statement_matched -> Return expression Semi .)
    Continue        reduce using rule 47 (statement_matched -> Return expression Semi .)
    Int             reduce using rule 47 (statement_matched -> Return expression Semi .)
    Identifier      reduce using rule 47 (statement_matched -> Return expression Semi .)
    Minus           reduce using rule 47 (statement_matched -> Return expression Semi .)
    BitNot          reduce using rule 47 (statement_matched -> Return expression Semi .)
    Not             reduce using rule 47 (statement_matched -> Return expression Semi .)
    Integer         reduce using rule 47 (statement_matched -> Return expression Semi .)
    LParen          reduce using rule 47 (statement_matched -> Return expression Semi .)
    Semi            reduce using rule 47 (statement_matched -> Return expression Semi .)
    Else            reduce using rule 47 (statement_matched -> Return expression Semi .)


state 124

    (73) postfix -> Identifier LParen arguments RParen .

    Mul             reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    Div             reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    Mod             reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    Plus            reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    Minus           reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    Less            reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    Greater         reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    LessEqual       reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    GreaterEqual    reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    NotEqual        reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    Equal           reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    BitAnd          reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    Xor             reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    BitOr           reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    And             reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    Question        reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    Or              reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    RParen          reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    Comma           reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    Int             reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    Semi            reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    Colon           reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    Identifier      reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    BitNot          reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    Not             reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    Integer         reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)
    LParen          reduce using rule 73 (postfix -> Identifier LParen arguments RParen .)


state 125

    (75) arguments -> arguments argument_item .

    RParen          reduce using rule 75 (arguments -> arguments argument_item .)
    Comma           reduce using rule 75 (arguments -> arguments argument_item .)
    Identifier      reduce using rule 75 (arguments -> arguments argument_item .)
    Minus           reduce using rule 75 (arguments -> arguments argument_item .)
    BitNot          reduce using rule 75 (arguments -> arguments argument_item .)
    Not             reduce using rule 75 (arguments -> arguments argument_item .)
    Integer         reduce using rule 75 (arguments -> arguments argument_item .)
    LParen          reduce using rule 75 (arguments -> arguments argument_item .)


state 126

    (76) argument_item -> Comma . expression
    (56) expression -> . assignment
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 137
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 127

    (77) argument_item -> expression .

    RParen          reduce using rule 77 (argument_item -> expression .)
    Comma           reduce using rule 77 (argument_item -> expression .)
    Identifier      reduce using rule 77 (argument_item -> expression .)
    Minus           reduce using rule 77 (argument_item -> expression .)
    BitNot          reduce using rule 77 (argument_item -> expression .)
    Not             reduce using rule 77 (argument_item -> expression .)
    Integer         reduce using rule 77 (argument_item -> expression .)
    LParen          reduce using rule 77 (argument_item -> expression .)


state 128

    (95) conditional -> logical_or Question expression Colon . conditional
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 79
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    logical_or                     shift and go to state 25
    conditional                    shift and go to state 138
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 129

    (16) statement_matched -> If LParen expression RParen . statement_matched Else statement_matched
    (17) statement_unmatched -> If LParen expression RParen . statement_matched Else statement_unmatched
    (18) statement_unmatched -> If LParen expression RParen . statement
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (25) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (28) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (39) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (45) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (47) statement_matched -> . Return expression Semi
    (48) statement_matched -> . opt_expression Semi
    (49) statement_matched -> . LBrace block RBrace
    (50) statement_matched -> . Break Semi
    (51) statement_matched -> . Continue Semi
    (14) statement -> . statement_matched
    (15) statement -> . statement_unmatched
    (52) opt_expression -> . expression
    (53) opt_expression -> . empty
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (46) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (56) expression -> . assignment
    (1) empty -> .
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 50
    While           shift and go to state 51
    For             shift and go to state 52
    Do              shift and go to state 53
    Return          shift and go to state 54
    LBrace          shift and go to state 42
    Break           shift and go to state 56
    Continue        shift and go to state 57
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 49
    statement_matched              shift and go to state 139
    statement_unmatched            shift and go to state 48
    statement                      shift and go to state 140
    opt_expression                 shift and go to state 55
    empty                          shift and go to state 58
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 130

    (19) statement_matched -> While LParen expression RParen . statement_matched
    (20) statement_unmatched -> While LParen expression RParen . statement_unmatched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (25) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (28) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (39) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (45) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (47) statement_matched -> . Return expression Semi
    (48) statement_matched -> . opt_expression Semi
    (49) statement_matched -> . LBrace block RBrace
    (50) statement_matched -> . Break Semi
    (51) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (46) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (52) opt_expression -> . expression
    (53) opt_expression -> . empty
    (56) expression -> . assignment
    (1) empty -> .
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 50
    While           shift and go to state 51
    For             shift and go to state 52
    Do              shift and go to state 53
    Return          shift and go to state 54
    LBrace          shift and go to state 42
    Break           shift and go to state 56
    Continue        shift and go to state 57
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 49
    statement_matched              shift and go to state 141
    statement_unmatched            shift and go to state 142
    opt_expression                 shift and go to state 55
    empty                          shift and go to state 58
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 131

    (21) statement_matched -> For LParen expression Semi . expression Semi expression RParen statement_matched
    (27) statement_matched -> For LParen expression Semi . Semi expression RParen statement_matched
    (31) statement_matched -> For LParen expression Semi . expression Semi RParen statement_matched
    (35) statement_matched -> For LParen expression Semi . Semi RParen statement_matched
    (23) statement_unmatched -> For LParen expression Semi . expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> For LParen expression Semi . Semi expression RParen statement_unmatched
    (33) statement_unmatched -> For LParen expression Semi . expression Semi RParen statement_unmatched
    (37) statement_unmatched -> For LParen expression Semi . Semi RParen statement_unmatched
    (56) expression -> . assignment
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Semi            shift and go to state 144
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 143
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 132

    (41) statement_matched -> For LParen Semi Semi . expression RParen statement_matched
    (43) statement_matched -> For LParen Semi Semi . RParen statement_matched
    (42) statement_unmatched -> For LParen Semi Semi . expression RParen statement_unmatched
    (44) statement_unmatched -> For LParen Semi Semi . RParen statement_unmatched
    (56) expression -> . assignment
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    RParen          shift and go to state 146
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 145
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 133

    (25) statement_matched -> For LParen Semi expression . Semi expression RParen statement_matched
    (39) statement_matched -> For LParen Semi expression . Semi RParen statement_matched
    (26) statement_unmatched -> For LParen Semi expression . Semi expression RParen statement_unmatched
    (40) statement_unmatched -> For LParen Semi expression . Semi RParen statement_unmatched

    Semi            shift and go to state 147


state 134

    (22) statement_matched -> For LParen declaration Semi . expression Semi expression RParen statement_matched
    (28) statement_matched -> For LParen declaration Semi . Semi expression RParen statement_matched
    (32) statement_matched -> For LParen declaration Semi . expression Semi RParen statement_matched
    (36) statement_matched -> For LParen declaration Semi . Semi RParen statement_matched
    (24) statement_unmatched -> For LParen declaration Semi . expression Semi expression RParen statement_unmatched
    (30) statement_unmatched -> For LParen declaration Semi . Semi expression RParen statement_unmatched
    (34) statement_unmatched -> For LParen declaration Semi . expression Semi RParen statement_unmatched
    (38) statement_unmatched -> For LParen declaration Semi . Semi RParen statement_unmatched
    (56) expression -> . assignment
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Semi            shift and go to state 148
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 149
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 135

    (45) statement_matched -> Do statement_matched While LParen . expression RParen Semi
    (56) expression -> . assignment
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 150
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 136

    (46) statement_unmatched -> Do statement_unmatched While LParen . expression RParen Semi
    (56) expression -> . assignment
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 151
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 137

    (76) argument_item -> Comma expression .

    RParen          reduce using rule 76 (argument_item -> Comma expression .)
    Comma           reduce using rule 76 (argument_item -> Comma expression .)
    Identifier      reduce using rule 76 (argument_item -> Comma expression .)
    Minus           reduce using rule 76 (argument_item -> Comma expression .)
    BitNot          reduce using rule 76 (argument_item -> Comma expression .)
    Not             reduce using rule 76 (argument_item -> Comma expression .)
    Integer         reduce using rule 76 (argument_item -> Comma expression .)
    LParen          reduce using rule 76 (argument_item -> Comma expression .)


state 138

    (95) conditional -> logical_or Question expression Colon conditional .

    RParen          reduce using rule 95 (conditional -> logical_or Question expression Colon conditional .)
    Comma           reduce using rule 95 (conditional -> logical_or Question expression Colon conditional .)
    Int             reduce using rule 95 (conditional -> logical_or Question expression Colon conditional .)
    Semi            reduce using rule 95 (conditional -> logical_or Question expression Colon conditional .)
    Colon           reduce using rule 95 (conditional -> logical_or Question expression Colon conditional .)
    Identifier      reduce using rule 95 (conditional -> logical_or Question expression Colon conditional .)
    Minus           reduce using rule 95 (conditional -> logical_or Question expression Colon conditional .)
    BitNot          reduce using rule 95 (conditional -> logical_or Question expression Colon conditional .)
    Not             reduce using rule 95 (conditional -> logical_or Question expression Colon conditional .)
    Integer         reduce using rule 95 (conditional -> logical_or Question expression Colon conditional .)
    LParen          reduce using rule 95 (conditional -> logical_or Question expression Colon conditional .)


state 139

    (16) statement_matched -> If LParen expression RParen statement_matched . Else statement_matched
    (17) statement_unmatched -> If LParen expression RParen statement_matched . Else statement_unmatched
    (14) statement -> statement_matched .

    Else            shift and go to state 152
    RBrace          reduce using rule 14 (statement -> statement_matched .)
    If              reduce using rule 14 (statement -> statement_matched .)
    While           reduce using rule 14 (statement -> statement_matched .)
    For             reduce using rule 14 (statement -> statement_matched .)
    Do              reduce using rule 14 (statement -> statement_matched .)
    Return          reduce using rule 14 (statement -> statement_matched .)
    LBrace          reduce using rule 14 (statement -> statement_matched .)
    Break           reduce using rule 14 (statement -> statement_matched .)
    Continue        reduce using rule 14 (statement -> statement_matched .)
    Int             reduce using rule 14 (statement -> statement_matched .)
    Identifier      reduce using rule 14 (statement -> statement_matched .)
    Minus           reduce using rule 14 (statement -> statement_matched .)
    BitNot          reduce using rule 14 (statement -> statement_matched .)
    Not             reduce using rule 14 (statement -> statement_matched .)
    Integer         reduce using rule 14 (statement -> statement_matched .)
    LParen          reduce using rule 14 (statement -> statement_matched .)
    Semi            reduce using rule 14 (statement -> statement_matched .)


state 140

    (18) statement_unmatched -> If LParen expression RParen statement .

    RBrace          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    If              reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    While           reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    For             reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    Do              reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    Return          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    LBrace          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    Break           reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    Continue        reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    Int             reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    Identifier      reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    Minus           reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    BitNot          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    Not             reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    Integer         reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    LParen          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    Semi            reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)


state 141

    (19) statement_matched -> While LParen expression RParen statement_matched .

    RBrace          reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    If              reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    While           reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    For             reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    Do              reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    Return          reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    LBrace          reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    Break           reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    Continue        reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    Int             reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    Identifier      reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    Minus           reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    BitNot          reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    Not             reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    Integer         reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    LParen          reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    Semi            reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    Else            reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)


state 142

    (20) statement_unmatched -> While LParen expression RParen statement_unmatched .

    RBrace          reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    If              reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    While           reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    For             reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Do              reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Return          reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LBrace          reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Break           reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Continue        reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Int             reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Identifier      reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Minus           reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    BitNot          reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Not             reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Integer         reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LParen          reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Semi            reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)


state 143

    (21) statement_matched -> For LParen expression Semi expression . Semi expression RParen statement_matched
    (31) statement_matched -> For LParen expression Semi expression . Semi RParen statement_matched
    (23) statement_unmatched -> For LParen expression Semi expression . Semi expression RParen statement_unmatched
    (33) statement_unmatched -> For LParen expression Semi expression . Semi RParen statement_unmatched

    Semi            shift and go to state 153


state 144

    (27) statement_matched -> For LParen expression Semi Semi . expression RParen statement_matched
    (35) statement_matched -> For LParen expression Semi Semi . RParen statement_matched
    (29) statement_unmatched -> For LParen expression Semi Semi . expression RParen statement_unmatched
    (37) statement_unmatched -> For LParen expression Semi Semi . RParen statement_unmatched
    (56) expression -> . assignment
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    RParen          shift and go to state 155
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 154
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 145

    (41) statement_matched -> For LParen Semi Semi expression . RParen statement_matched
    (42) statement_unmatched -> For LParen Semi Semi expression . RParen statement_unmatched

    RParen          shift and go to state 156


state 146

    (43) statement_matched -> For LParen Semi Semi RParen . statement_matched
    (44) statement_unmatched -> For LParen Semi Semi RParen . statement_unmatched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (25) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (28) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (39) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (45) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (47) statement_matched -> . Return expression Semi
    (48) statement_matched -> . opt_expression Semi
    (49) statement_matched -> . LBrace block RBrace
    (50) statement_matched -> . Break Semi
    (51) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (46) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (52) opt_expression -> . expression
    (53) opt_expression -> . empty
    (56) expression -> . assignment
    (1) empty -> .
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 50
    While           shift and go to state 51
    For             shift and go to state 52
    Do              shift and go to state 53
    Return          shift and go to state 54
    LBrace          shift and go to state 42
    Break           shift and go to state 56
    Continue        shift and go to state 57
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    statement_matched              shift and go to state 157
    statement_unmatched            shift and go to state 158
    expression                     shift and go to state 49
    opt_expression                 shift and go to state 55
    empty                          shift and go to state 58
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 147

    (25) statement_matched -> For LParen Semi expression Semi . expression RParen statement_matched
    (39) statement_matched -> For LParen Semi expression Semi . RParen statement_matched
    (26) statement_unmatched -> For LParen Semi expression Semi . expression RParen statement_unmatched
    (40) statement_unmatched -> For LParen Semi expression Semi . RParen statement_unmatched
    (56) expression -> . assignment
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    RParen          shift and go to state 160
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 159
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 148

    (28) statement_matched -> For LParen declaration Semi Semi . expression RParen statement_matched
    (36) statement_matched -> For LParen declaration Semi Semi . RParen statement_matched
    (30) statement_unmatched -> For LParen declaration Semi Semi . expression RParen statement_unmatched
    (38) statement_unmatched -> For LParen declaration Semi Semi . RParen statement_unmatched
    (56) expression -> . assignment
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    RParen          shift and go to state 162
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 161
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 149

    (22) statement_matched -> For LParen declaration Semi expression . Semi expression RParen statement_matched
    (32) statement_matched -> For LParen declaration Semi expression . Semi RParen statement_matched
    (24) statement_unmatched -> For LParen declaration Semi expression . Semi expression RParen statement_unmatched
    (34) statement_unmatched -> For LParen declaration Semi expression . Semi RParen statement_unmatched

    Semi            shift and go to state 163


state 150

    (45) statement_matched -> Do statement_matched While LParen expression . RParen Semi

    RParen          shift and go to state 164


state 151

    (46) statement_unmatched -> Do statement_unmatched While LParen expression . RParen Semi

    RParen          shift and go to state 165


state 152

    (16) statement_matched -> If LParen expression RParen statement_matched Else . statement_matched
    (17) statement_unmatched -> If LParen expression RParen statement_matched Else . statement_unmatched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (25) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (28) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (39) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (45) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (47) statement_matched -> . Return expression Semi
    (48) statement_matched -> . opt_expression Semi
    (49) statement_matched -> . LBrace block RBrace
    (50) statement_matched -> . Break Semi
    (51) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (46) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (52) opt_expression -> . expression
    (53) opt_expression -> . empty
    (56) expression -> . assignment
    (1) empty -> .
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 50
    While           shift and go to state 51
    For             shift and go to state 52
    Do              shift and go to state 53
    Return          shift and go to state 54
    LBrace          shift and go to state 42
    Break           shift and go to state 56
    Continue        shift and go to state 57
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 49
    statement_matched              shift and go to state 166
    statement_unmatched            shift and go to state 167
    opt_expression                 shift and go to state 55
    empty                          shift and go to state 58
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 153

    (21) statement_matched -> For LParen expression Semi expression Semi . expression RParen statement_matched
    (31) statement_matched -> For LParen expression Semi expression Semi . RParen statement_matched
    (23) statement_unmatched -> For LParen expression Semi expression Semi . expression RParen statement_unmatched
    (33) statement_unmatched -> For LParen expression Semi expression Semi . RParen statement_unmatched
    (56) expression -> . assignment
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    RParen          shift and go to state 169
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 168
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 154

    (27) statement_matched -> For LParen expression Semi Semi expression . RParen statement_matched
    (29) statement_unmatched -> For LParen expression Semi Semi expression . RParen statement_unmatched

    RParen          shift and go to state 170


state 155

    (35) statement_matched -> For LParen expression Semi Semi RParen . statement_matched
    (37) statement_unmatched -> For LParen expression Semi Semi RParen . statement_unmatched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (25) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (28) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (39) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (45) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (47) statement_matched -> . Return expression Semi
    (48) statement_matched -> . opt_expression Semi
    (49) statement_matched -> . LBrace block RBrace
    (50) statement_matched -> . Break Semi
    (51) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (46) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (52) opt_expression -> . expression
    (53) opt_expression -> . empty
    (56) expression -> . assignment
    (1) empty -> .
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 50
    While           shift and go to state 51
    For             shift and go to state 52
    Do              shift and go to state 53
    Return          shift and go to state 54
    LBrace          shift and go to state 42
    Break           shift and go to state 56
    Continue        shift and go to state 57
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 49
    statement_matched              shift and go to state 171
    statement_unmatched            shift and go to state 172
    opt_expression                 shift and go to state 55
    empty                          shift and go to state 58
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 156

    (41) statement_matched -> For LParen Semi Semi expression RParen . statement_matched
    (42) statement_unmatched -> For LParen Semi Semi expression RParen . statement_unmatched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (25) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (28) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (39) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (45) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (47) statement_matched -> . Return expression Semi
    (48) statement_matched -> . opt_expression Semi
    (49) statement_matched -> . LBrace block RBrace
    (50) statement_matched -> . Break Semi
    (51) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (46) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (52) opt_expression -> . expression
    (53) opt_expression -> . empty
    (56) expression -> . assignment
    (1) empty -> .
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 50
    While           shift and go to state 51
    For             shift and go to state 52
    Do              shift and go to state 53
    Return          shift and go to state 54
    LBrace          shift and go to state 42
    Break           shift and go to state 56
    Continue        shift and go to state 57
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 49
    statement_matched              shift and go to state 173
    statement_unmatched            shift and go to state 174
    opt_expression                 shift and go to state 55
    empty                          shift and go to state 58
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 157

    (43) statement_matched -> For LParen Semi Semi RParen statement_matched .

    RBrace          reduce using rule 43 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    If              reduce using rule 43 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    While           reduce using rule 43 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    For             reduce using rule 43 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Do              reduce using rule 43 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Return          reduce using rule 43 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    LBrace          reduce using rule 43 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Break           reduce using rule 43 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Continue        reduce using rule 43 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Int             reduce using rule 43 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Identifier      reduce using rule 43 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Minus           reduce using rule 43 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    BitNot          reduce using rule 43 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Not             reduce using rule 43 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Integer         reduce using rule 43 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    LParen          reduce using rule 43 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Semi            reduce using rule 43 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Else            reduce using rule 43 (statement_matched -> For LParen Semi Semi RParen statement_matched .)


state 158

    (44) statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .

    RBrace          reduce using rule 44 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    If              reduce using rule 44 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    While           reduce using rule 44 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    For             reduce using rule 44 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Do              reduce using rule 44 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Return          reduce using rule 44 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    LBrace          reduce using rule 44 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Break           reduce using rule 44 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Continue        reduce using rule 44 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Int             reduce using rule 44 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Identifier      reduce using rule 44 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Minus           reduce using rule 44 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    BitNot          reduce using rule 44 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Not             reduce using rule 44 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Integer         reduce using rule 44 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    LParen          reduce using rule 44 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Semi            reduce using rule 44 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)


state 159

    (25) statement_matched -> For LParen Semi expression Semi expression . RParen statement_matched
    (26) statement_unmatched -> For LParen Semi expression Semi expression . RParen statement_unmatched

    RParen          shift and go to state 175


state 160

    (39) statement_matched -> For LParen Semi expression Semi RParen . statement_matched
    (40) statement_unmatched -> For LParen Semi expression Semi RParen . statement_unmatched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (25) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (28) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (39) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (45) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (47) statement_matched -> . Return expression Semi
    (48) statement_matched -> . opt_expression Semi
    (49) statement_matched -> . LBrace block RBrace
    (50) statement_matched -> . Break Semi
    (51) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (46) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (52) opt_expression -> . expression
    (53) opt_expression -> . empty
    (56) expression -> . assignment
    (1) empty -> .
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 50
    While           shift and go to state 51
    For             shift and go to state 52
    Do              shift and go to state 53
    Return          shift and go to state 54
    LBrace          shift and go to state 42
    Break           shift and go to state 56
    Continue        shift and go to state 57
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 49
    statement_matched              shift and go to state 176
    statement_unmatched            shift and go to state 177
    opt_expression                 shift and go to state 55
    empty                          shift and go to state 58
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 161

    (28) statement_matched -> For LParen declaration Semi Semi expression . RParen statement_matched
    (30) statement_unmatched -> For LParen declaration Semi Semi expression . RParen statement_unmatched

    RParen          shift and go to state 178


state 162

    (36) statement_matched -> For LParen declaration Semi Semi RParen . statement_matched
    (38) statement_unmatched -> For LParen declaration Semi Semi RParen . statement_unmatched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (25) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (28) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (39) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (45) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (47) statement_matched -> . Return expression Semi
    (48) statement_matched -> . opt_expression Semi
    (49) statement_matched -> . LBrace block RBrace
    (50) statement_matched -> . Break Semi
    (51) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (46) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (52) opt_expression -> . expression
    (53) opt_expression -> . empty
    (56) expression -> . assignment
    (1) empty -> .
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 50
    While           shift and go to state 51
    For             shift and go to state 52
    Do              shift and go to state 53
    Return          shift and go to state 54
    LBrace          shift and go to state 42
    Break           shift and go to state 56
    Continue        shift and go to state 57
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    statement_matched              shift and go to state 179
    statement_unmatched            shift and go to state 180
    expression                     shift and go to state 49
    opt_expression                 shift and go to state 55
    empty                          shift and go to state 58
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 163

    (22) statement_matched -> For LParen declaration Semi expression Semi . expression RParen statement_matched
    (32) statement_matched -> For LParen declaration Semi expression Semi . RParen statement_matched
    (24) statement_unmatched -> For LParen declaration Semi expression Semi . expression RParen statement_unmatched
    (34) statement_unmatched -> For LParen declaration Semi expression Semi . RParen statement_unmatched
    (56) expression -> . assignment
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    RParen          shift and go to state 182
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 181
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 164

    (45) statement_matched -> Do statement_matched While LParen expression RParen . Semi

    Semi            shift and go to state 183


state 165

    (46) statement_unmatched -> Do statement_unmatched While LParen expression RParen . Semi

    Semi            shift and go to state 184


state 166

    (16) statement_matched -> If LParen expression RParen statement_matched Else statement_matched .

    RBrace          reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    If              reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    While           reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    For             reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Do              reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Return          reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LBrace          reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Break           reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Continue        reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Int             reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Identifier      reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Minus           reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    BitNot          reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Not             reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Integer         reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LParen          reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Semi            reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Else            reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)


state 167

    (17) statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .

    RBrace          reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    If              reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    While           reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    For             reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Do              reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Return          reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LBrace          reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Break           reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Continue        reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Int             reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Identifier      reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Minus           reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    BitNot          reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Not             reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Integer         reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LParen          reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Semi            reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)


state 168

    (21) statement_matched -> For LParen expression Semi expression Semi expression . RParen statement_matched
    (23) statement_unmatched -> For LParen expression Semi expression Semi expression . RParen statement_unmatched

    RParen          shift and go to state 185


state 169

    (31) statement_matched -> For LParen expression Semi expression Semi RParen . statement_matched
    (33) statement_unmatched -> For LParen expression Semi expression Semi RParen . statement_unmatched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (25) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (28) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (39) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (45) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (47) statement_matched -> . Return expression Semi
    (48) statement_matched -> . opt_expression Semi
    (49) statement_matched -> . LBrace block RBrace
    (50) statement_matched -> . Break Semi
    (51) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (46) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (52) opt_expression -> . expression
    (53) opt_expression -> . empty
    (56) expression -> . assignment
    (1) empty -> .
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 50
    While           shift and go to state 51
    For             shift and go to state 52
    Do              shift and go to state 53
    Return          shift and go to state 54
    LBrace          shift and go to state 42
    Break           shift and go to state 56
    Continue        shift and go to state 57
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 49
    statement_matched              shift and go to state 186
    statement_unmatched            shift and go to state 187
    opt_expression                 shift and go to state 55
    empty                          shift and go to state 58
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 170

    (27) statement_matched -> For LParen expression Semi Semi expression RParen . statement_matched
    (29) statement_unmatched -> For LParen expression Semi Semi expression RParen . statement_unmatched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (25) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (28) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (39) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (45) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (47) statement_matched -> . Return expression Semi
    (48) statement_matched -> . opt_expression Semi
    (49) statement_matched -> . LBrace block RBrace
    (50) statement_matched -> . Break Semi
    (51) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (46) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (52) opt_expression -> . expression
    (53) opt_expression -> . empty
    (56) expression -> . assignment
    (1) empty -> .
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 50
    While           shift and go to state 51
    For             shift and go to state 52
    Do              shift and go to state 53
    Return          shift and go to state 54
    LBrace          shift and go to state 42
    Break           shift and go to state 56
    Continue        shift and go to state 57
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 49
    statement_matched              shift and go to state 188
    statement_unmatched            shift and go to state 189
    opt_expression                 shift and go to state 55
    empty                          shift and go to state 58
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 171

    (35) statement_matched -> For LParen expression Semi Semi RParen statement_matched .

    RBrace          reduce using rule 35 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    If              reduce using rule 35 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    While           reduce using rule 35 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    For             reduce using rule 35 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Do              reduce using rule 35 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Return          reduce using rule 35 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    LBrace          reduce using rule 35 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Break           reduce using rule 35 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Continue        reduce using rule 35 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Int             reduce using rule 35 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Identifier      reduce using rule 35 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Minus           reduce using rule 35 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    BitNot          reduce using rule 35 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Not             reduce using rule 35 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Integer         reduce using rule 35 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    LParen          reduce using rule 35 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Semi            reduce using rule 35 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Else            reduce using rule 35 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)


state 172

    (37) statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .

    RBrace          reduce using rule 37 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    If              reduce using rule 37 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    While           reduce using rule 37 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    For             reduce using rule 37 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Do              reduce using rule 37 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Return          reduce using rule 37 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    LBrace          reduce using rule 37 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Break           reduce using rule 37 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Continue        reduce using rule 37 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Int             reduce using rule 37 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Identifier      reduce using rule 37 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Minus           reduce using rule 37 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    BitNot          reduce using rule 37 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Not             reduce using rule 37 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Integer         reduce using rule 37 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    LParen          reduce using rule 37 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Semi            reduce using rule 37 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)


state 173

    (41) statement_matched -> For LParen Semi Semi expression RParen statement_matched .

    RBrace          reduce using rule 41 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    If              reduce using rule 41 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    While           reduce using rule 41 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    For             reduce using rule 41 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Do              reduce using rule 41 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Return          reduce using rule 41 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    LBrace          reduce using rule 41 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Break           reduce using rule 41 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Continue        reduce using rule 41 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Int             reduce using rule 41 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Identifier      reduce using rule 41 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Minus           reduce using rule 41 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    BitNot          reduce using rule 41 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Not             reduce using rule 41 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Integer         reduce using rule 41 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    LParen          reduce using rule 41 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Semi            reduce using rule 41 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Else            reduce using rule 41 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)


state 174

    (42) statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 42 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    If              reduce using rule 42 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    While           reduce using rule 42 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    For             reduce using rule 42 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Do              reduce using rule 42 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Return          reduce using rule 42 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 42 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Break           reduce using rule 42 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 42 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Int             reduce using rule 42 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 42 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 42 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 42 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Not             reduce using rule 42 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 42 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 42 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 42 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)


state 175

    (25) statement_matched -> For LParen Semi expression Semi expression RParen . statement_matched
    (26) statement_unmatched -> For LParen Semi expression Semi expression RParen . statement_unmatched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (25) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (28) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (39) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (45) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (47) statement_matched -> . Return expression Semi
    (48) statement_matched -> . opt_expression Semi
    (49) statement_matched -> . LBrace block RBrace
    (50) statement_matched -> . Break Semi
    (51) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (46) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (52) opt_expression -> . expression
    (53) opt_expression -> . empty
    (56) expression -> . assignment
    (1) empty -> .
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 50
    While           shift and go to state 51
    For             shift and go to state 52
    Do              shift and go to state 53
    Return          shift and go to state 54
    LBrace          shift and go to state 42
    Break           shift and go to state 56
    Continue        shift and go to state 57
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 49
    statement_matched              shift and go to state 190
    statement_unmatched            shift and go to state 191
    opt_expression                 shift and go to state 55
    empty                          shift and go to state 58
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 176

    (39) statement_matched -> For LParen Semi expression Semi RParen statement_matched .

    RBrace          reduce using rule 39 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    If              reduce using rule 39 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    While           reduce using rule 39 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    For             reduce using rule 39 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Do              reduce using rule 39 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Return          reduce using rule 39 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    LBrace          reduce using rule 39 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Break           reduce using rule 39 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Continue        reduce using rule 39 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Int             reduce using rule 39 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Identifier      reduce using rule 39 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Minus           reduce using rule 39 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    BitNot          reduce using rule 39 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Not             reduce using rule 39 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Integer         reduce using rule 39 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    LParen          reduce using rule 39 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Semi            reduce using rule 39 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Else            reduce using rule 39 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)


state 177

    (40) statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .

    RBrace          reduce using rule 40 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    If              reduce using rule 40 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    While           reduce using rule 40 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    For             reduce using rule 40 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Do              reduce using rule 40 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Return          reduce using rule 40 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    LBrace          reduce using rule 40 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Break           reduce using rule 40 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Continue        reduce using rule 40 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Int             reduce using rule 40 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Identifier      reduce using rule 40 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Minus           reduce using rule 40 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    BitNot          reduce using rule 40 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Not             reduce using rule 40 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Integer         reduce using rule 40 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    LParen          reduce using rule 40 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Semi            reduce using rule 40 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)


state 178

    (28) statement_matched -> For LParen declaration Semi Semi expression RParen . statement_matched
    (30) statement_unmatched -> For LParen declaration Semi Semi expression RParen . statement_unmatched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (25) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (28) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (39) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (45) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (47) statement_matched -> . Return expression Semi
    (48) statement_matched -> . opt_expression Semi
    (49) statement_matched -> . LBrace block RBrace
    (50) statement_matched -> . Break Semi
    (51) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (46) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (52) opt_expression -> . expression
    (53) opt_expression -> . empty
    (56) expression -> . assignment
    (1) empty -> .
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 50
    While           shift and go to state 51
    For             shift and go to state 52
    Do              shift and go to state 53
    Return          shift and go to state 54
    LBrace          shift and go to state 42
    Break           shift and go to state 56
    Continue        shift and go to state 57
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 49
    statement_matched              shift and go to state 192
    statement_unmatched            shift and go to state 193
    opt_expression                 shift and go to state 55
    empty                          shift and go to state 58
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 179

    (36) statement_matched -> For LParen declaration Semi Semi RParen statement_matched .

    RBrace          reduce using rule 36 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    If              reduce using rule 36 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    While           reduce using rule 36 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    For             reduce using rule 36 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Do              reduce using rule 36 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Return          reduce using rule 36 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    LBrace          reduce using rule 36 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Break           reduce using rule 36 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Continue        reduce using rule 36 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Int             reduce using rule 36 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Identifier      reduce using rule 36 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Minus           reduce using rule 36 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    BitNot          reduce using rule 36 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Not             reduce using rule 36 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Integer         reduce using rule 36 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    LParen          reduce using rule 36 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Semi            reduce using rule 36 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Else            reduce using rule 36 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)


state 180

    (38) statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .

    RBrace          reduce using rule 38 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    If              reduce using rule 38 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    While           reduce using rule 38 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    For             reduce using rule 38 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Do              reduce using rule 38 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Return          reduce using rule 38 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    LBrace          reduce using rule 38 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Break           reduce using rule 38 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Continue        reduce using rule 38 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Int             reduce using rule 38 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Identifier      reduce using rule 38 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Minus           reduce using rule 38 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    BitNot          reduce using rule 38 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Not             reduce using rule 38 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Integer         reduce using rule 38 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    LParen          reduce using rule 38 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Semi            reduce using rule 38 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)


state 181

    (22) statement_matched -> For LParen declaration Semi expression Semi expression . RParen statement_matched
    (24) statement_unmatched -> For LParen declaration Semi expression Semi expression . RParen statement_unmatched

    RParen          shift and go to state 194


state 182

    (32) statement_matched -> For LParen declaration Semi expression Semi RParen . statement_matched
    (34) statement_unmatched -> For LParen declaration Semi expression Semi RParen . statement_unmatched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (25) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (28) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (39) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (45) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (47) statement_matched -> . Return expression Semi
    (48) statement_matched -> . opt_expression Semi
    (49) statement_matched -> . LBrace block RBrace
    (50) statement_matched -> . Break Semi
    (51) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (46) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (52) opt_expression -> . expression
    (53) opt_expression -> . empty
    (56) expression -> . assignment
    (1) empty -> .
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 50
    While           shift and go to state 51
    For             shift and go to state 52
    Do              shift and go to state 53
    Return          shift and go to state 54
    LBrace          shift and go to state 42
    Break           shift and go to state 56
    Continue        shift and go to state 57
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 49
    statement_matched              shift and go to state 195
    statement_unmatched            shift and go to state 196
    opt_expression                 shift and go to state 55
    empty                          shift and go to state 58
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 183

    (45) statement_matched -> Do statement_matched While LParen expression RParen Semi .

    RBrace          reduce using rule 45 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    If              reduce using rule 45 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    While           reduce using rule 45 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    For             reduce using rule 45 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Do              reduce using rule 45 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Return          reduce using rule 45 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LBrace          reduce using rule 45 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Break           reduce using rule 45 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Continue        reduce using rule 45 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Int             reduce using rule 45 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Identifier      reduce using rule 45 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Minus           reduce using rule 45 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    BitNot          reduce using rule 45 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Not             reduce using rule 45 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Integer         reduce using rule 45 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LParen          reduce using rule 45 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Semi            reduce using rule 45 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Else            reduce using rule 45 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)


state 184

    (46) statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .

    RBrace          reduce using rule 46 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    If              reduce using rule 46 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    While           reduce using rule 46 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    For             reduce using rule 46 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Do              reduce using rule 46 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Return          reduce using rule 46 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    LBrace          reduce using rule 46 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Break           reduce using rule 46 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Continue        reduce using rule 46 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Int             reduce using rule 46 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Identifier      reduce using rule 46 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Minus           reduce using rule 46 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    BitNot          reduce using rule 46 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Not             reduce using rule 46 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Integer         reduce using rule 46 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    LParen          reduce using rule 46 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Semi            reduce using rule 46 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)


state 185

    (21) statement_matched -> For LParen expression Semi expression Semi expression RParen . statement_matched
    (23) statement_unmatched -> For LParen expression Semi expression Semi expression RParen . statement_unmatched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (25) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (28) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (39) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (45) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (47) statement_matched -> . Return expression Semi
    (48) statement_matched -> . opt_expression Semi
    (49) statement_matched -> . LBrace block RBrace
    (50) statement_matched -> . Break Semi
    (51) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (46) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (52) opt_expression -> . expression
    (53) opt_expression -> . empty
    (56) expression -> . assignment
    (1) empty -> .
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 50
    While           shift and go to state 51
    For             shift and go to state 52
    Do              shift and go to state 53
    Return          shift and go to state 54
    LBrace          shift and go to state 42
    Break           shift and go to state 56
    Continue        shift and go to state 57
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 49
    statement_matched              shift and go to state 197
    statement_unmatched            shift and go to state 198
    opt_expression                 shift and go to state 55
    empty                          shift and go to state 58
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 186

    (31) statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .

    RBrace          reduce using rule 31 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    If              reduce using rule 31 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    While           reduce using rule 31 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    For             reduce using rule 31 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Do              reduce using rule 31 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Return          reduce using rule 31 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    LBrace          reduce using rule 31 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Break           reduce using rule 31 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Continue        reduce using rule 31 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Int             reduce using rule 31 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Identifier      reduce using rule 31 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Minus           reduce using rule 31 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    BitNot          reduce using rule 31 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Not             reduce using rule 31 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Integer         reduce using rule 31 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    LParen          reduce using rule 31 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Semi            reduce using rule 31 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Else            reduce using rule 31 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)


state 187

    (33) statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .

    RBrace          reduce using rule 33 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    If              reduce using rule 33 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    While           reduce using rule 33 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    For             reduce using rule 33 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Do              reduce using rule 33 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Return          reduce using rule 33 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    LBrace          reduce using rule 33 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Break           reduce using rule 33 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Continue        reduce using rule 33 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Int             reduce using rule 33 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Identifier      reduce using rule 33 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Minus           reduce using rule 33 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    BitNot          reduce using rule 33 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Not             reduce using rule 33 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Integer         reduce using rule 33 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    LParen          reduce using rule 33 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Semi            reduce using rule 33 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)


state 188

    (27) statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .

    RBrace          reduce using rule 27 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    If              reduce using rule 27 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    While           reduce using rule 27 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    For             reduce using rule 27 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Do              reduce using rule 27 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Return          reduce using rule 27 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    LBrace          reduce using rule 27 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Break           reduce using rule 27 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Continue        reduce using rule 27 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Int             reduce using rule 27 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Identifier      reduce using rule 27 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Minus           reduce using rule 27 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    BitNot          reduce using rule 27 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Not             reduce using rule 27 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Integer         reduce using rule 27 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    LParen          reduce using rule 27 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Semi            reduce using rule 27 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Else            reduce using rule 27 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)


state 189

    (29) statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 29 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    If              reduce using rule 29 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    While           reduce using rule 29 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    For             reduce using rule 29 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Do              reduce using rule 29 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Return          reduce using rule 29 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 29 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Break           reduce using rule 29 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 29 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Int             reduce using rule 29 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 29 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 29 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 29 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Not             reduce using rule 29 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 29 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 29 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 29 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)


state 190

    (25) statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .

    RBrace          reduce using rule 25 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    If              reduce using rule 25 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    While           reduce using rule 25 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    For             reduce using rule 25 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Do              reduce using rule 25 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Return          reduce using rule 25 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    LBrace          reduce using rule 25 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Break           reduce using rule 25 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Continue        reduce using rule 25 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Int             reduce using rule 25 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Identifier      reduce using rule 25 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Minus           reduce using rule 25 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    BitNot          reduce using rule 25 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Not             reduce using rule 25 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Integer         reduce using rule 25 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    LParen          reduce using rule 25 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Semi            reduce using rule 25 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Else            reduce using rule 25 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)


state 191

    (26) statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 26 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    If              reduce using rule 26 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    While           reduce using rule 26 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    For             reduce using rule 26 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Do              reduce using rule 26 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Return          reduce using rule 26 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 26 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Break           reduce using rule 26 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 26 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Int             reduce using rule 26 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 26 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 26 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 26 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Not             reduce using rule 26 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 26 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 26 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 26 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)


state 192

    (28) statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .

    RBrace          reduce using rule 28 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    If              reduce using rule 28 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    While           reduce using rule 28 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    For             reduce using rule 28 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Do              reduce using rule 28 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Return          reduce using rule 28 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    LBrace          reduce using rule 28 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Break           reduce using rule 28 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Continue        reduce using rule 28 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Int             reduce using rule 28 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Identifier      reduce using rule 28 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Minus           reduce using rule 28 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    BitNot          reduce using rule 28 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Not             reduce using rule 28 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Integer         reduce using rule 28 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    LParen          reduce using rule 28 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Semi            reduce using rule 28 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Else            reduce using rule 28 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)


state 193

    (30) statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 30 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    If              reduce using rule 30 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    While           reduce using rule 30 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    For             reduce using rule 30 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Do              reduce using rule 30 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Return          reduce using rule 30 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 30 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Break           reduce using rule 30 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 30 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Int             reduce using rule 30 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 30 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 30 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 30 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Not             reduce using rule 30 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 30 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 30 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 30 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)


state 194

    (22) statement_matched -> For LParen declaration Semi expression Semi expression RParen . statement_matched
    (24) statement_unmatched -> For LParen declaration Semi expression Semi expression RParen . statement_unmatched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (25) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (28) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (39) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (43) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (45) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (47) statement_matched -> . Return expression Semi
    (48) statement_matched -> . opt_expression Semi
    (49) statement_matched -> . LBrace block RBrace
    (50) statement_matched -> . Break Semi
    (51) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (40) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (46) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (52) opt_expression -> . expression
    (53) opt_expression -> . empty
    (56) expression -> . assignment
    (1) empty -> .
    (57) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (58) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (59) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (60) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (61) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (62) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (63) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (64) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (65) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (66) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (67) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (68) unary -> . postfix
    (70) unary -> . Minus unary
    (71) unary -> . BitNot unary
    (72) unary -> . Not unary
    (69) postfix -> . primary
    (73) postfix -> . Identifier LParen arguments RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 50
    While           shift and go to state 51
    For             shift and go to state 52
    Do              shift and go to state 53
    Return          shift and go to state 54
    LBrace          shift and go to state 42
    Break           shift and go to state 56
    Continue        shift and go to state 57
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 34
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Integer         shift and go to state 41
    LParen          shift and go to state 40

    expression                     shift and go to state 49
    statement_matched              shift and go to state 199
    statement_unmatched            shift and go to state 200
    opt_expression                 shift and go to state 55
    empty                          shift and go to state 58
    assignment                     shift and go to state 23
    conditional                    shift and go to state 24
    logical_or                     shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 27
    xor                            shift and go to state 28
    bit_and                        shift and go to state 29
    equality                       shift and go to state 30
    relational                     shift and go to state 31
    additive                       shift and go to state 32
    multiplicative                 shift and go to state 33
    unary                          shift and go to state 35
    postfix                        shift and go to state 36
    primary                        shift and go to state 39

state 195

    (32) statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .

    RBrace          reduce using rule 32 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    If              reduce using rule 32 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    While           reduce using rule 32 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    For             reduce using rule 32 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Do              reduce using rule 32 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Return          reduce using rule 32 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    LBrace          reduce using rule 32 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Break           reduce using rule 32 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Continue        reduce using rule 32 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Int             reduce using rule 32 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Identifier      reduce using rule 32 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Minus           reduce using rule 32 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    BitNot          reduce using rule 32 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Not             reduce using rule 32 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Integer         reduce using rule 32 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    LParen          reduce using rule 32 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Semi            reduce using rule 32 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Else            reduce using rule 32 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)


state 196

    (34) statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .

    RBrace          reduce using rule 34 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    If              reduce using rule 34 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    While           reduce using rule 34 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    For             reduce using rule 34 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Do              reduce using rule 34 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Return          reduce using rule 34 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    LBrace          reduce using rule 34 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Break           reduce using rule 34 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Continue        reduce using rule 34 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Int             reduce using rule 34 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Identifier      reduce using rule 34 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Minus           reduce using rule 34 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    BitNot          reduce using rule 34 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Not             reduce using rule 34 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Integer         reduce using rule 34 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    LParen          reduce using rule 34 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Semi            reduce using rule 34 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)


state 197

    (21) statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .

    RBrace          reduce using rule 21 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    If              reduce using rule 21 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    While           reduce using rule 21 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    For             reduce using rule 21 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Do              reduce using rule 21 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Return          reduce using rule 21 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    LBrace          reduce using rule 21 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Break           reduce using rule 21 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Continue        reduce using rule 21 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Int             reduce using rule 21 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Identifier      reduce using rule 21 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Minus           reduce using rule 21 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    BitNot          reduce using rule 21 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Not             reduce using rule 21 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Integer         reduce using rule 21 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    LParen          reduce using rule 21 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Semi            reduce using rule 21 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Else            reduce using rule 21 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)


state 198

    (23) statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 23 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    If              reduce using rule 23 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    While           reduce using rule 23 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    For             reduce using rule 23 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Do              reduce using rule 23 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Return          reduce using rule 23 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 23 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Break           reduce using rule 23 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 23 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Int             reduce using rule 23 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 23 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 23 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 23 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Not             reduce using rule 23 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 23 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 23 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 23 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)


state 199

    (22) statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .

    RBrace          reduce using rule 22 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    If              reduce using rule 22 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    While           reduce using rule 22 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    For             reduce using rule 22 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Do              reduce using rule 22 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Return          reduce using rule 22 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    LBrace          reduce using rule 22 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Break           reduce using rule 22 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Continue        reduce using rule 22 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Int             reduce using rule 22 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Identifier      reduce using rule 22 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Minus           reduce using rule 22 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    BitNot          reduce using rule 22 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Not             reduce using rule 22 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Integer         reduce using rule 22 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    LParen          reduce using rule 22 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Semi            reduce using rule 22 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Else            reduce using rule 22 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)


state 200

    (24) statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 24 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    If              reduce using rule 24 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    While           reduce using rule 24 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    For             reduce using rule 24 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Do              reduce using rule 24 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Return          reduce using rule 24 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 24 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Break           reduce using rule 24 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 24 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Int             reduce using rule 24 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 24 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 24 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 24 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Not             reduce using rule 24 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 24 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 24 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 24 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LParen in state 21 resolved as shift
WARNING: shift/reduce conflict for Minus in state 32 resolved as shift
WARNING: shift/reduce conflict for LParen in state 79 resolved as shift
WARNING: shift/reduce conflict for Minus in state 105 resolved as shift
WARNING: shift/reduce conflict for Minus in state 106 resolved as shift
WARNING: shift/reduce conflict for Minus in state 107 resolved as shift
WARNING: shift/reduce conflict for Minus in state 108 resolved as shift
